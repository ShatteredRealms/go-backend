syntax = "proto3";
package sro.accounts;
option go_package = "pkg/pb";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";

service AuthorizationService {
  rpc GetAuthorization(IDMessage) returns (AuthorizationMessage) {
    option (google.api.http) = {
      get: "/v1/users/{id}/authorization"
    };
  }

  rpc AddAuthorization(AuthorizationMessage) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/users/{user_id}/authorization/add"
      body: "*"
    };
  }

  rpc RemoveAuthorization(AuthorizationMessage) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/users/{user_id}/authorization/remove"
      body: "*"
    };
  }

  rpc GetRoles(google.protobuf.Empty) returns (UserRoles) {
    option (google.api.http) = {
      get: "/v1/authorization/roles"
    };
  }

  rpc GetRole(IDMessage) returns (UserRole) {
    option (google.api.http) = {
      get: "/v1/authorization/roles/{id}"
    };
  }

  rpc CreateRole(UserRole) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/authorization/roles"
      body: "*"
    };
  }

  rpc EditRole(UserRole) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/v1/authorization/roles/{id}"
      body: "*"
    };
  }

  rpc DeleteRole(UserRole) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/authorization/roles/{id}"
    };
  }

  rpc GetAllPermissions(google.protobuf.Empty) returns (UserPermissions) {
    option (google.api.http) = {
      get: "/v1/authorization/permissions"
    };
  }

  rpc SubscribeUserUpdates(google.protobuf.Empty) returns (stream IDMessage) {
    option (google.api.http) = {
      get: "/v1/authorization/updates/users"
    };
  }

  rpc SubscribeRoleUpdates(google.protobuf.Empty) returns (stream IDMessage) {
    option (google.api.http) = {
      get: "/v1/authorization/updates/roles"
    };
  }
}

message IDMessage {
  uint64 id = 1;
}

message Permission {
  // The gRPC method the permission is for
  google.protobuf.StringValue permission = 1;
}

message UserPermission {
  // The gRPC method the permission is for
  google.protobuf.StringValue permission = 1;

  // If true then the permission is allowed for other users and for itself. If false, then it is only allowed for
  // making calls to or for itself.
  bool other = 2;
}

message UserPermissions {
  repeated UserPermission permissions = 1;
}

message UserRole {
  uint64 id = 1;
  google.protobuf.StringValue name = 2;
  repeated UserPermission permissions = 3;
}

message UserRoles {
  repeated UserRole roles = 1;
}

message AuthorizationMessage {
  uint64 user_id = 1;
  repeated UserRole roles = 2;
  repeated UserPermission permissions = 3;
}
