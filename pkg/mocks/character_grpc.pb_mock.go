// Code generated by MockGen. DO NOT EDIT.
// Source: /home/wil/sro/git/go-backend/pkg/pb/character_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=/home/wil/sro/git/go-backend/pkg/pb/character_grpc.pb.go -destination=/home/wil/sro/git/go-backend/pkg/mocks/character_grpc.pb_mock.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	pb "github.com/ShatteredRealms/go-backend/pkg/pb"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockCharacterServiceClient is a mock of CharacterServiceClient interface.
type MockCharacterServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockCharacterServiceClientMockRecorder
}

// MockCharacterServiceClientMockRecorder is the mock recorder for MockCharacterServiceClient.
type MockCharacterServiceClientMockRecorder struct {
	mock *MockCharacterServiceClient
}

// NewMockCharacterServiceClient creates a new mock instance.
func NewMockCharacterServiceClient(ctrl *gomock.Controller) *MockCharacterServiceClient {
	mock := &MockCharacterServiceClient{ctrl: ctrl}
	mock.recorder = &MockCharacterServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCharacterServiceClient) EXPECT() *MockCharacterServiceClientMockRecorder {
	return m.recorder
}

// AddCharacterPlayTime mocks base method.
func (m *MockCharacterServiceClient) AddCharacterPlayTime(ctx context.Context, in *pb.AddPlayTimeRequest, opts ...grpc.CallOption) (*pb.PlayTimeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddCharacterPlayTime", varargs...)
	ret0, _ := ret[0].(*pb.PlayTimeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddCharacterPlayTime indicates an expected call of AddCharacterPlayTime.
func (mr *MockCharacterServiceClientMockRecorder) AddCharacterPlayTime(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCharacterPlayTime", reflect.TypeOf((*MockCharacterServiceClient)(nil).AddCharacterPlayTime), varargs...)
}

// CreateCharacter mocks base method.
func (m *MockCharacterServiceClient) CreateCharacter(ctx context.Context, in *pb.CreateCharacterRequest, opts ...grpc.CallOption) (*pb.CharacterDetails, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCharacter", varargs...)
	ret0, _ := ret[0].(*pb.CharacterDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCharacter indicates an expected call of CreateCharacter.
func (mr *MockCharacterServiceClientMockRecorder) CreateCharacter(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCharacter", reflect.TypeOf((*MockCharacterServiceClient)(nil).CreateCharacter), varargs...)
}

// DeleteCharacter mocks base method.
func (m *MockCharacterServiceClient) DeleteCharacter(ctx context.Context, in *pb.CharacterTarget, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCharacter", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCharacter indicates an expected call of DeleteCharacter.
func (mr *MockCharacterServiceClientMockRecorder) DeleteCharacter(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCharacter", reflect.TypeOf((*MockCharacterServiceClient)(nil).DeleteCharacter), varargs...)
}

// EditCharacter mocks base method.
func (m *MockCharacterServiceClient) EditCharacter(ctx context.Context, in *pb.EditCharacterRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EditCharacter", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditCharacter indicates an expected call of EditCharacter.
func (mr *MockCharacterServiceClientMockRecorder) EditCharacter(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditCharacter", reflect.TypeOf((*MockCharacterServiceClient)(nil).EditCharacter), varargs...)
}

// GetAllCharactersForUser mocks base method.
func (m *MockCharacterServiceClient) GetAllCharactersForUser(ctx context.Context, in *pb.UserTarget, opts ...grpc.CallOption) (*pb.CharactersDetails, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAllCharactersForUser", varargs...)
	ret0, _ := ret[0].(*pb.CharactersDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCharactersForUser indicates an expected call of GetAllCharactersForUser.
func (mr *MockCharacterServiceClientMockRecorder) GetAllCharactersForUser(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCharactersForUser", reflect.TypeOf((*MockCharacterServiceClient)(nil).GetAllCharactersForUser), varargs...)
}

// GetCharacter mocks base method.
func (m *MockCharacterServiceClient) GetCharacter(ctx context.Context, in *pb.CharacterTarget, opts ...grpc.CallOption) (*pb.CharacterDetails, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCharacter", varargs...)
	ret0, _ := ret[0].(*pb.CharacterDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCharacter indicates an expected call of GetCharacter.
func (mr *MockCharacterServiceClientMockRecorder) GetCharacter(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCharacter", reflect.TypeOf((*MockCharacterServiceClient)(nil).GetCharacter), varargs...)
}

// GetCharacters mocks base method.
func (m *MockCharacterServiceClient) GetCharacters(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*pb.CharactersDetails, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCharacters", varargs...)
	ret0, _ := ret[0].(*pb.CharactersDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCharacters indicates an expected call of GetCharacters.
func (mr *MockCharacterServiceClientMockRecorder) GetCharacters(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCharacters", reflect.TypeOf((*MockCharacterServiceClient)(nil).GetCharacters), varargs...)
}

// GetInventory mocks base method.
func (m *MockCharacterServiceClient) GetInventory(ctx context.Context, in *pb.CharacterTarget, opts ...grpc.CallOption) (*pb.Inventory, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetInventory", varargs...)
	ret0, _ := ret[0].(*pb.Inventory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInventory indicates an expected call of GetInventory.
func (mr *MockCharacterServiceClientMockRecorder) GetInventory(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInventory", reflect.TypeOf((*MockCharacterServiceClient)(nil).GetInventory), varargs...)
}

// SetInventory mocks base method.
func (m *MockCharacterServiceClient) SetInventory(ctx context.Context, in *pb.UpdateInventoryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetInventory", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetInventory indicates an expected call of SetInventory.
func (mr *MockCharacterServiceClientMockRecorder) SetInventory(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetInventory", reflect.TypeOf((*MockCharacterServiceClient)(nil).SetInventory), varargs...)
}

// MockCharacterServiceServer is a mock of CharacterServiceServer interface.
type MockCharacterServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockCharacterServiceServerMockRecorder
}

// MockCharacterServiceServerMockRecorder is the mock recorder for MockCharacterServiceServer.
type MockCharacterServiceServerMockRecorder struct {
	mock *MockCharacterServiceServer
}

// NewMockCharacterServiceServer creates a new mock instance.
func NewMockCharacterServiceServer(ctrl *gomock.Controller) *MockCharacterServiceServer {
	mock := &MockCharacterServiceServer{ctrl: ctrl}
	mock.recorder = &MockCharacterServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCharacterServiceServer) EXPECT() *MockCharacterServiceServerMockRecorder {
	return m.recorder
}

// AddCharacterPlayTime mocks base method.
func (m *MockCharacterServiceServer) AddCharacterPlayTime(arg0 context.Context, arg1 *pb.AddPlayTimeRequest) (*pb.PlayTimeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCharacterPlayTime", arg0, arg1)
	ret0, _ := ret[0].(*pb.PlayTimeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddCharacterPlayTime indicates an expected call of AddCharacterPlayTime.
func (mr *MockCharacterServiceServerMockRecorder) AddCharacterPlayTime(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCharacterPlayTime", reflect.TypeOf((*MockCharacterServiceServer)(nil).AddCharacterPlayTime), arg0, arg1)
}

// CreateCharacter mocks base method.
func (m *MockCharacterServiceServer) CreateCharacter(arg0 context.Context, arg1 *pb.CreateCharacterRequest) (*pb.CharacterDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCharacter", arg0, arg1)
	ret0, _ := ret[0].(*pb.CharacterDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCharacter indicates an expected call of CreateCharacter.
func (mr *MockCharacterServiceServerMockRecorder) CreateCharacter(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCharacter", reflect.TypeOf((*MockCharacterServiceServer)(nil).CreateCharacter), arg0, arg1)
}

// DeleteCharacter mocks base method.
func (m *MockCharacterServiceServer) DeleteCharacter(arg0 context.Context, arg1 *pb.CharacterTarget) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCharacter", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCharacter indicates an expected call of DeleteCharacter.
func (mr *MockCharacterServiceServerMockRecorder) DeleteCharacter(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCharacter", reflect.TypeOf((*MockCharacterServiceServer)(nil).DeleteCharacter), arg0, arg1)
}

// EditCharacter mocks base method.
func (m *MockCharacterServiceServer) EditCharacter(arg0 context.Context, arg1 *pb.EditCharacterRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditCharacter", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditCharacter indicates an expected call of EditCharacter.
func (mr *MockCharacterServiceServerMockRecorder) EditCharacter(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditCharacter", reflect.TypeOf((*MockCharacterServiceServer)(nil).EditCharacter), arg0, arg1)
}

// GetAllCharactersForUser mocks base method.
func (m *MockCharacterServiceServer) GetAllCharactersForUser(arg0 context.Context, arg1 *pb.UserTarget) (*pb.CharactersDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCharactersForUser", arg0, arg1)
	ret0, _ := ret[0].(*pb.CharactersDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCharactersForUser indicates an expected call of GetAllCharactersForUser.
func (mr *MockCharacterServiceServerMockRecorder) GetAllCharactersForUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCharactersForUser", reflect.TypeOf((*MockCharacterServiceServer)(nil).GetAllCharactersForUser), arg0, arg1)
}

// GetCharacter mocks base method.
func (m *MockCharacterServiceServer) GetCharacter(arg0 context.Context, arg1 *pb.CharacterTarget) (*pb.CharacterDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCharacter", arg0, arg1)
	ret0, _ := ret[0].(*pb.CharacterDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCharacter indicates an expected call of GetCharacter.
func (mr *MockCharacterServiceServerMockRecorder) GetCharacter(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCharacter", reflect.TypeOf((*MockCharacterServiceServer)(nil).GetCharacter), arg0, arg1)
}

// GetCharacters mocks base method.
func (m *MockCharacterServiceServer) GetCharacters(arg0 context.Context, arg1 *emptypb.Empty) (*pb.CharactersDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCharacters", arg0, arg1)
	ret0, _ := ret[0].(*pb.CharactersDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCharacters indicates an expected call of GetCharacters.
func (mr *MockCharacterServiceServerMockRecorder) GetCharacters(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCharacters", reflect.TypeOf((*MockCharacterServiceServer)(nil).GetCharacters), arg0, arg1)
}

// GetInventory mocks base method.
func (m *MockCharacterServiceServer) GetInventory(arg0 context.Context, arg1 *pb.CharacterTarget) (*pb.Inventory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInventory", arg0, arg1)
	ret0, _ := ret[0].(*pb.Inventory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInventory indicates an expected call of GetInventory.
func (mr *MockCharacterServiceServerMockRecorder) GetInventory(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInventory", reflect.TypeOf((*MockCharacterServiceServer)(nil).GetInventory), arg0, arg1)
}

// SetInventory mocks base method.
func (m *MockCharacterServiceServer) SetInventory(arg0 context.Context, arg1 *pb.UpdateInventoryRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetInventory", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetInventory indicates an expected call of SetInventory.
func (mr *MockCharacterServiceServerMockRecorder) SetInventory(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetInventory", reflect.TypeOf((*MockCharacterServiceServer)(nil).SetInventory), arg0, arg1)
}

// mustEmbedUnimplementedCharacterServiceServer mocks base method.
func (m *MockCharacterServiceServer) mustEmbedUnimplementedCharacterServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedCharacterServiceServer")
}

// mustEmbedUnimplementedCharacterServiceServer indicates an expected call of mustEmbedUnimplementedCharacterServiceServer.
func (mr *MockCharacterServiceServerMockRecorder) mustEmbedUnimplementedCharacterServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedCharacterServiceServer", reflect.TypeOf((*MockCharacterServiceServer)(nil).mustEmbedUnimplementedCharacterServiceServer))
}

// MockUnsafeCharacterServiceServer is a mock of UnsafeCharacterServiceServer interface.
type MockUnsafeCharacterServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeCharacterServiceServerMockRecorder
}

// MockUnsafeCharacterServiceServerMockRecorder is the mock recorder for MockUnsafeCharacterServiceServer.
type MockUnsafeCharacterServiceServerMockRecorder struct {
	mock *MockUnsafeCharacterServiceServer
}

// NewMockUnsafeCharacterServiceServer creates a new mock instance.
func NewMockUnsafeCharacterServiceServer(ctrl *gomock.Controller) *MockUnsafeCharacterServiceServer {
	mock := &MockUnsafeCharacterServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeCharacterServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeCharacterServiceServer) EXPECT() *MockUnsafeCharacterServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedCharacterServiceServer mocks base method.
func (m *MockUnsafeCharacterServiceServer) mustEmbedUnimplementedCharacterServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedCharacterServiceServer")
}

// mustEmbedUnimplementedCharacterServiceServer indicates an expected call of mustEmbedUnimplementedCharacterServiceServer.
func (mr *MockUnsafeCharacterServiceServerMockRecorder) mustEmbedUnimplementedCharacterServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedCharacterServiceServer", reflect.TypeOf((*MockUnsafeCharacterServiceServer)(nil).mustEmbedUnimplementedCharacterServiceServer))
}
