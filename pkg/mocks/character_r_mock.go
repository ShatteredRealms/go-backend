// Code generated by MockGen. DO NOT EDIT.
// Source: /home/wil/sro/git/go-backend/pkg/repository/character_r.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=/home/wil/sro/git/go-backend/pkg/repository/character_r.go -destination=/home/wil/sro/git/go-backend/pkg/mocks/character_r_mock.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	character "github.com/ShatteredRealms/go-backend/pkg/model/character"
	repository "github.com/ShatteredRealms/go-backend/pkg/repository"
	gomock "go.uber.org/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockCharacterRepository is a mock of CharacterRepository interface.
type MockCharacterRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCharacterRepositoryMockRecorder
}

// MockCharacterRepositoryMockRecorder is the mock recorder for MockCharacterRepository.
type MockCharacterRepositoryMockRecorder struct {
	mock *MockCharacterRepository
}

// NewMockCharacterRepository creates a new mock instance.
func NewMockCharacterRepository(ctrl *gomock.Controller) *MockCharacterRepository {
	mock := &MockCharacterRepository{ctrl: ctrl}
	mock.recorder = &MockCharacterRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCharacterRepository) EXPECT() *MockCharacterRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCharacterRepository) Create(ctx context.Context, char *character.Character) (*character.Character, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, char)
	ret0, _ := ret[0].(*character.Character)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCharacterRepositoryMockRecorder) Create(ctx, char any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCharacterRepository)(nil).Create), ctx, char)
}

// Delete mocks base method.
func (m *MockCharacterRepository) Delete(ctx context.Context, char *character.Character) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, char)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCharacterRepositoryMockRecorder) Delete(ctx, char any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCharacterRepository)(nil).Delete), ctx, char)
}

// FindAll mocks base method.
func (m *MockCharacterRepository) FindAll(arg0 context.Context) ([]*character.Character, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", arg0)
	ret0, _ := ret[0].([]*character.Character)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockCharacterRepositoryMockRecorder) FindAll(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockCharacterRepository)(nil).FindAll), arg0)
}

// FindAllByOwner mocks base method.
func (m *MockCharacterRepository) FindAllByOwner(ctx context.Context, owner string) (character.Characters, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllByOwner", ctx, owner)
	ret0, _ := ret[0].(character.Characters)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllByOwner indicates an expected call of FindAllByOwner.
func (mr *MockCharacterRepositoryMockRecorder) FindAllByOwner(ctx, owner any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllByOwner", reflect.TypeOf((*MockCharacterRepository)(nil).FindAllByOwner), ctx, owner)
}

// FindById mocks base method.
func (m *MockCharacterRepository) FindById(ctx context.Context, id uint) (*character.Character, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", ctx, id)
	ret0, _ := ret[0].(*character.Character)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockCharacterRepositoryMockRecorder) FindById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockCharacterRepository)(nil).FindById), ctx, id)
}

// FindByName mocks base method.
func (m *MockCharacterRepository) FindByName(ctx context.Context, name string) (*character.Character, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByName", ctx, name)
	ret0, _ := ret[0].(*character.Character)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByName indicates an expected call of FindByName.
func (mr *MockCharacterRepositoryMockRecorder) FindByName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByName", reflect.TypeOf((*MockCharacterRepository)(nil).FindByName), ctx, name)
}

// Migrate mocks base method.
func (m *MockCharacterRepository) Migrate(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Migrate", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Migrate indicates an expected call of Migrate.
func (mr *MockCharacterRepositoryMockRecorder) Migrate(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Migrate", reflect.TypeOf((*MockCharacterRepository)(nil).Migrate), ctx)
}

// Save mocks base method.
func (m *MockCharacterRepository) Save(ctx context.Context, char *character.Character) (*character.Character, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, char)
	ret0, _ := ret[0].(*character.Character)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockCharacterRepositoryMockRecorder) Save(ctx, char any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockCharacterRepository)(nil).Save), ctx, char)
}

// WithTrx mocks base method.
func (m *MockCharacterRepository) WithTrx(trx *gorm.DB) repository.CharacterRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTrx", trx)
	ret0, _ := ret[0].(repository.CharacterRepository)
	return ret0
}

// WithTrx indicates an expected call of WithTrx.
func (mr *MockCharacterRepositoryMockRecorder) WithTrx(trx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTrx", reflect.TypeOf((*MockCharacterRepository)(nil).WithTrx), trx)
}
