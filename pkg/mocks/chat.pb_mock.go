// Code generated by MockGen. DO NOT EDIT.
// Source: /home/wil/sro/git/go-backend/pkg/pb/chat.pb.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=/home/wil/sro/git/go-backend/pkg/pb/chat.pb.go -destination=/home/wil/sro/git/go-backend/pkg/mocks/chat.pb_mock.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockisUpdateChatChannelRequest_OptionalName is a mock of isUpdateChatChannelRequest_OptionalName interface.
type MockisUpdateChatChannelRequest_OptionalName struct {
	ctrl     *gomock.Controller
	recorder *MockisUpdateChatChannelRequest_OptionalNameMockRecorder
}

// MockisUpdateChatChannelRequest_OptionalNameMockRecorder is the mock recorder for MockisUpdateChatChannelRequest_OptionalName.
type MockisUpdateChatChannelRequest_OptionalNameMockRecorder struct {
	mock *MockisUpdateChatChannelRequest_OptionalName
}

// NewMockisUpdateChatChannelRequest_OptionalName creates a new mock instance.
func NewMockisUpdateChatChannelRequest_OptionalName(ctrl *gomock.Controller) *MockisUpdateChatChannelRequest_OptionalName {
	mock := &MockisUpdateChatChannelRequest_OptionalName{ctrl: ctrl}
	mock.recorder = &MockisUpdateChatChannelRequest_OptionalNameMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockisUpdateChatChannelRequest_OptionalName) EXPECT() *MockisUpdateChatChannelRequest_OptionalNameMockRecorder {
	return m.recorder
}

// isUpdateChatChannelRequest_OptionalName mocks base method.
func (m *MockisUpdateChatChannelRequest_OptionalName) isUpdateChatChannelRequest_OptionalName() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "isUpdateChatChannelRequest_OptionalName")
}

// isUpdateChatChannelRequest_OptionalName indicates an expected call of isUpdateChatChannelRequest_OptionalName.
func (mr *MockisUpdateChatChannelRequest_OptionalNameMockRecorder) isUpdateChatChannelRequest_OptionalName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isUpdateChatChannelRequest_OptionalName", reflect.TypeOf((*MockisUpdateChatChannelRequest_OptionalName)(nil).isUpdateChatChannelRequest_OptionalName))
}

// MockisUpdateChatChannelRequest_OptionalDimension is a mock of isUpdateChatChannelRequest_OptionalDimension interface.
type MockisUpdateChatChannelRequest_OptionalDimension struct {
	ctrl     *gomock.Controller
	recorder *MockisUpdateChatChannelRequest_OptionalDimensionMockRecorder
}

// MockisUpdateChatChannelRequest_OptionalDimensionMockRecorder is the mock recorder for MockisUpdateChatChannelRequest_OptionalDimension.
type MockisUpdateChatChannelRequest_OptionalDimensionMockRecorder struct {
	mock *MockisUpdateChatChannelRequest_OptionalDimension
}

// NewMockisUpdateChatChannelRequest_OptionalDimension creates a new mock instance.
func NewMockisUpdateChatChannelRequest_OptionalDimension(ctrl *gomock.Controller) *MockisUpdateChatChannelRequest_OptionalDimension {
	mock := &MockisUpdateChatChannelRequest_OptionalDimension{ctrl: ctrl}
	mock.recorder = &MockisUpdateChatChannelRequest_OptionalDimensionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockisUpdateChatChannelRequest_OptionalDimension) EXPECT() *MockisUpdateChatChannelRequest_OptionalDimensionMockRecorder {
	return m.recorder
}

// isUpdateChatChannelRequest_OptionalDimension mocks base method.
func (m *MockisUpdateChatChannelRequest_OptionalDimension) isUpdateChatChannelRequest_OptionalDimension() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "isUpdateChatChannelRequest_OptionalDimension")
}

// isUpdateChatChannelRequest_OptionalDimension indicates an expected call of isUpdateChatChannelRequest_OptionalDimension.
func (mr *MockisUpdateChatChannelRequest_OptionalDimensionMockRecorder) isUpdateChatChannelRequest_OptionalDimension() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isUpdateChatChannelRequest_OptionalDimension", reflect.TypeOf((*MockisUpdateChatChannelRequest_OptionalDimension)(nil).isUpdateChatChannelRequest_OptionalDimension))
}
