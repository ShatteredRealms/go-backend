// Code generated by MockGen. DO NOT EDIT.
// Source: /home/wil/sro/git/go-backend/pkg/pb/chat_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=/home/wil/sro/git/go-backend/pkg/pb/chat_grpc.pb.go -destination=/home/wil/sro/git/go-backend/pkg/mocks/chat_grpc.pb_mock.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	pb "github.com/ShatteredRealms/go-backend/pkg/pb"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockChatServiceClient is a mock of ChatServiceClient interface.
type MockChatServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockChatServiceClientMockRecorder
}

// MockChatServiceClientMockRecorder is the mock recorder for MockChatServiceClient.
type MockChatServiceClientMockRecorder struct {
	mock *MockChatServiceClient
}

// NewMockChatServiceClient creates a new mock instance.
func NewMockChatServiceClient(ctrl *gomock.Controller) *MockChatServiceClient {
	mock := &MockChatServiceClient{ctrl: ctrl}
	mock.recorder = &MockChatServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatServiceClient) EXPECT() *MockChatServiceClientMockRecorder {
	return m.recorder
}

// AllChatChannels mocks base method.
func (m *MockChatServiceClient) AllChatChannels(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*pb.ChatChannels, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AllChatChannels", varargs...)
	ret0, _ := ret[0].(*pb.ChatChannels)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllChatChannels indicates an expected call of AllChatChannels.
func (mr *MockChatServiceClientMockRecorder) AllChatChannels(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllChatChannels", reflect.TypeOf((*MockChatServiceClient)(nil).AllChatChannels), varargs...)
}

// ConnectChannel mocks base method.
func (m *MockChatServiceClient) ConnectChannel(ctx context.Context, in *pb.ChatChannelTarget, opts ...grpc.CallOption) (pb.ChatService_ConnectChannelClient, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ConnectChannel", varargs...)
	ret0, _ := ret[0].(pb.ChatService_ConnectChannelClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConnectChannel indicates an expected call of ConnectChannel.
func (mr *MockChatServiceClientMockRecorder) ConnectChannel(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectChannel", reflect.TypeOf((*MockChatServiceClient)(nil).ConnectChannel), varargs...)
}

// ConnectDirectMessage mocks base method.
func (m *MockChatServiceClient) ConnectDirectMessage(ctx context.Context, in *pb.CharacterTarget, opts ...grpc.CallOption) (pb.ChatService_ConnectDirectMessageClient, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ConnectDirectMessage", varargs...)
	ret0, _ := ret[0].(pb.ChatService_ConnectDirectMessageClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConnectDirectMessage indicates an expected call of ConnectDirectMessage.
func (mr *MockChatServiceClientMockRecorder) ConnectDirectMessage(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectDirectMessage", reflect.TypeOf((*MockChatServiceClient)(nil).ConnectDirectMessage), varargs...)
}

// CreateChannel mocks base method.
func (m *MockChatServiceClient) CreateChannel(ctx context.Context, in *pb.CreateChannelMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateChannel", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChannel indicates an expected call of CreateChannel.
func (mr *MockChatServiceClientMockRecorder) CreateChannel(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChannel", reflect.TypeOf((*MockChatServiceClient)(nil).CreateChannel), varargs...)
}

// DeleteChannel mocks base method.
func (m *MockChatServiceClient) DeleteChannel(ctx context.Context, in *pb.ChatChannelTarget, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteChannel", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteChannel indicates an expected call of DeleteChannel.
func (mr *MockChatServiceClientMockRecorder) DeleteChannel(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChannel", reflect.TypeOf((*MockChatServiceClient)(nil).DeleteChannel), varargs...)
}

// EditChannel mocks base method.
func (m *MockChatServiceClient) EditChannel(ctx context.Context, in *pb.UpdateChatChannelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EditChannel", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditChannel indicates an expected call of EditChannel.
func (mr *MockChatServiceClientMockRecorder) EditChannel(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditChannel", reflect.TypeOf((*MockChatServiceClient)(nil).EditChannel), varargs...)
}

// GetAuthorizedChatChannels mocks base method.
func (m *MockChatServiceClient) GetAuthorizedChatChannels(ctx context.Context, in *pb.CharacterTarget, opts ...grpc.CallOption) (*pb.ChatChannels, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAuthorizedChatChannels", varargs...)
	ret0, _ := ret[0].(*pb.ChatChannels)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorizedChatChannels indicates an expected call of GetAuthorizedChatChannels.
func (mr *MockChatServiceClientMockRecorder) GetAuthorizedChatChannels(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorizedChatChannels", reflect.TypeOf((*MockChatServiceClient)(nil).GetAuthorizedChatChannels), varargs...)
}

// GetChannel mocks base method.
func (m *MockChatServiceClient) GetChannel(ctx context.Context, in *pb.ChatChannelTarget, opts ...grpc.CallOption) (*pb.ChatChannel, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetChannel", varargs...)
	ret0, _ := ret[0].(*pb.ChatChannel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChannel indicates an expected call of GetChannel.
func (mr *MockChatServiceClientMockRecorder) GetChannel(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannel", reflect.TypeOf((*MockChatServiceClient)(nil).GetChannel), varargs...)
}

// SendChatMessage mocks base method.
func (m *MockChatServiceClient) SendChatMessage(ctx context.Context, in *pb.SendChatMessageRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendChatMessage", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendChatMessage indicates an expected call of SendChatMessage.
func (mr *MockChatServiceClientMockRecorder) SendChatMessage(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendChatMessage", reflect.TypeOf((*MockChatServiceClient)(nil).SendChatMessage), varargs...)
}

// SendDirectMessage mocks base method.
func (m *MockChatServiceClient) SendDirectMessage(ctx context.Context, in *pb.SendDirectMessageRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendDirectMessage", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendDirectMessage indicates an expected call of SendDirectMessage.
func (mr *MockChatServiceClientMockRecorder) SendDirectMessage(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendDirectMessage", reflect.TypeOf((*MockChatServiceClient)(nil).SendDirectMessage), varargs...)
}

// SetUserChatChannelAuthorizations mocks base method.
func (m *MockChatServiceClient) SetUserChatChannelAuthorizations(ctx context.Context, in *pb.RequestSetChannelAuth, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetUserChatChannelAuthorizations", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetUserChatChannelAuthorizations indicates an expected call of SetUserChatChannelAuthorizations.
func (mr *MockChatServiceClientMockRecorder) SetUserChatChannelAuthorizations(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserChatChannelAuthorizations", reflect.TypeOf((*MockChatServiceClient)(nil).SetUserChatChannelAuthorizations), varargs...)
}

// UpdateUserChatChannelAuthorizations mocks base method.
func (m *MockChatServiceClient) UpdateUserChatChannelAuthorizations(ctx context.Context, in *pb.RequestChatChannelAuthChange, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateUserChatChannelAuthorizations", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserChatChannelAuthorizations indicates an expected call of UpdateUserChatChannelAuthorizations.
func (mr *MockChatServiceClientMockRecorder) UpdateUserChatChannelAuthorizations(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserChatChannelAuthorizations", reflect.TypeOf((*MockChatServiceClient)(nil).UpdateUserChatChannelAuthorizations), varargs...)
}

// MockChatService_ConnectChannelClient is a mock of ChatService_ConnectChannelClient interface.
type MockChatService_ConnectChannelClient struct {
	ctrl     *gomock.Controller
	recorder *MockChatService_ConnectChannelClientMockRecorder
}

// MockChatService_ConnectChannelClientMockRecorder is the mock recorder for MockChatService_ConnectChannelClient.
type MockChatService_ConnectChannelClientMockRecorder struct {
	mock *MockChatService_ConnectChannelClient
}

// NewMockChatService_ConnectChannelClient creates a new mock instance.
func NewMockChatService_ConnectChannelClient(ctrl *gomock.Controller) *MockChatService_ConnectChannelClient {
	mock := &MockChatService_ConnectChannelClient{ctrl: ctrl}
	mock.recorder = &MockChatService_ConnectChannelClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatService_ConnectChannelClient) EXPECT() *MockChatService_ConnectChannelClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockChatService_ConnectChannelClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockChatService_ConnectChannelClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockChatService_ConnectChannelClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockChatService_ConnectChannelClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockChatService_ConnectChannelClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockChatService_ConnectChannelClient)(nil).Context))
}

// Header mocks base method.
func (m *MockChatService_ConnectChannelClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockChatService_ConnectChannelClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockChatService_ConnectChannelClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockChatService_ConnectChannelClient) Recv() (*pb.ChatMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*pb.ChatMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockChatService_ConnectChannelClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockChatService_ConnectChannelClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockChatService_ConnectChannelClient) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockChatService_ConnectChannelClientMockRecorder) RecvMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockChatService_ConnectChannelClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockChatService_ConnectChannelClient) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockChatService_ConnectChannelClientMockRecorder) SendMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockChatService_ConnectChannelClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockChatService_ConnectChannelClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockChatService_ConnectChannelClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockChatService_ConnectChannelClient)(nil).Trailer))
}

// MockChatService_ConnectDirectMessageClient is a mock of ChatService_ConnectDirectMessageClient interface.
type MockChatService_ConnectDirectMessageClient struct {
	ctrl     *gomock.Controller
	recorder *MockChatService_ConnectDirectMessageClientMockRecorder
}

// MockChatService_ConnectDirectMessageClientMockRecorder is the mock recorder for MockChatService_ConnectDirectMessageClient.
type MockChatService_ConnectDirectMessageClientMockRecorder struct {
	mock *MockChatService_ConnectDirectMessageClient
}

// NewMockChatService_ConnectDirectMessageClient creates a new mock instance.
func NewMockChatService_ConnectDirectMessageClient(ctrl *gomock.Controller) *MockChatService_ConnectDirectMessageClient {
	mock := &MockChatService_ConnectDirectMessageClient{ctrl: ctrl}
	mock.recorder = &MockChatService_ConnectDirectMessageClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatService_ConnectDirectMessageClient) EXPECT() *MockChatService_ConnectDirectMessageClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockChatService_ConnectDirectMessageClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockChatService_ConnectDirectMessageClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockChatService_ConnectDirectMessageClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockChatService_ConnectDirectMessageClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockChatService_ConnectDirectMessageClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockChatService_ConnectDirectMessageClient)(nil).Context))
}

// Header mocks base method.
func (m *MockChatService_ConnectDirectMessageClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockChatService_ConnectDirectMessageClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockChatService_ConnectDirectMessageClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockChatService_ConnectDirectMessageClient) Recv() (*pb.ChatMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*pb.ChatMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockChatService_ConnectDirectMessageClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockChatService_ConnectDirectMessageClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockChatService_ConnectDirectMessageClient) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockChatService_ConnectDirectMessageClientMockRecorder) RecvMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockChatService_ConnectDirectMessageClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockChatService_ConnectDirectMessageClient) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockChatService_ConnectDirectMessageClientMockRecorder) SendMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockChatService_ConnectDirectMessageClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockChatService_ConnectDirectMessageClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockChatService_ConnectDirectMessageClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockChatService_ConnectDirectMessageClient)(nil).Trailer))
}

// MockChatServiceServer is a mock of ChatServiceServer interface.
type MockChatServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockChatServiceServerMockRecorder
}

// MockChatServiceServerMockRecorder is the mock recorder for MockChatServiceServer.
type MockChatServiceServerMockRecorder struct {
	mock *MockChatServiceServer
}

// NewMockChatServiceServer creates a new mock instance.
func NewMockChatServiceServer(ctrl *gomock.Controller) *MockChatServiceServer {
	mock := &MockChatServiceServer{ctrl: ctrl}
	mock.recorder = &MockChatServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatServiceServer) EXPECT() *MockChatServiceServerMockRecorder {
	return m.recorder
}

// AllChatChannels mocks base method.
func (m *MockChatServiceServer) AllChatChannels(arg0 context.Context, arg1 *emptypb.Empty) (*pb.ChatChannels, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllChatChannels", arg0, arg1)
	ret0, _ := ret[0].(*pb.ChatChannels)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllChatChannels indicates an expected call of AllChatChannels.
func (mr *MockChatServiceServerMockRecorder) AllChatChannels(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllChatChannels", reflect.TypeOf((*MockChatServiceServer)(nil).AllChatChannels), arg0, arg1)
}

// ConnectChannel mocks base method.
func (m *MockChatServiceServer) ConnectChannel(arg0 *pb.ChatChannelTarget, arg1 pb.ChatService_ConnectChannelServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectChannel", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConnectChannel indicates an expected call of ConnectChannel.
func (mr *MockChatServiceServerMockRecorder) ConnectChannel(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectChannel", reflect.TypeOf((*MockChatServiceServer)(nil).ConnectChannel), arg0, arg1)
}

// ConnectDirectMessage mocks base method.
func (m *MockChatServiceServer) ConnectDirectMessage(arg0 *pb.CharacterTarget, arg1 pb.ChatService_ConnectDirectMessageServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectDirectMessage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConnectDirectMessage indicates an expected call of ConnectDirectMessage.
func (mr *MockChatServiceServerMockRecorder) ConnectDirectMessage(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectDirectMessage", reflect.TypeOf((*MockChatServiceServer)(nil).ConnectDirectMessage), arg0, arg1)
}

// CreateChannel mocks base method.
func (m *MockChatServiceServer) CreateChannel(arg0 context.Context, arg1 *pb.CreateChannelMessage) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChannel", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChannel indicates an expected call of CreateChannel.
func (mr *MockChatServiceServerMockRecorder) CreateChannel(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChannel", reflect.TypeOf((*MockChatServiceServer)(nil).CreateChannel), arg0, arg1)
}

// DeleteChannel mocks base method.
func (m *MockChatServiceServer) DeleteChannel(arg0 context.Context, arg1 *pb.ChatChannelTarget) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChannel", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteChannel indicates an expected call of DeleteChannel.
func (mr *MockChatServiceServerMockRecorder) DeleteChannel(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChannel", reflect.TypeOf((*MockChatServiceServer)(nil).DeleteChannel), arg0, arg1)
}

// EditChannel mocks base method.
func (m *MockChatServiceServer) EditChannel(arg0 context.Context, arg1 *pb.UpdateChatChannelRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditChannel", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditChannel indicates an expected call of EditChannel.
func (mr *MockChatServiceServerMockRecorder) EditChannel(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditChannel", reflect.TypeOf((*MockChatServiceServer)(nil).EditChannel), arg0, arg1)
}

// GetAuthorizedChatChannels mocks base method.
func (m *MockChatServiceServer) GetAuthorizedChatChannels(arg0 context.Context, arg1 *pb.CharacterTarget) (*pb.ChatChannels, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthorizedChatChannels", arg0, arg1)
	ret0, _ := ret[0].(*pb.ChatChannels)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorizedChatChannels indicates an expected call of GetAuthorizedChatChannels.
func (mr *MockChatServiceServerMockRecorder) GetAuthorizedChatChannels(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorizedChatChannels", reflect.TypeOf((*MockChatServiceServer)(nil).GetAuthorizedChatChannels), arg0, arg1)
}

// GetChannel mocks base method.
func (m *MockChatServiceServer) GetChannel(arg0 context.Context, arg1 *pb.ChatChannelTarget) (*pb.ChatChannel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannel", arg0, arg1)
	ret0, _ := ret[0].(*pb.ChatChannel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChannel indicates an expected call of GetChannel.
func (mr *MockChatServiceServerMockRecorder) GetChannel(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannel", reflect.TypeOf((*MockChatServiceServer)(nil).GetChannel), arg0, arg1)
}

// SendChatMessage mocks base method.
func (m *MockChatServiceServer) SendChatMessage(arg0 context.Context, arg1 *pb.SendChatMessageRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendChatMessage", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendChatMessage indicates an expected call of SendChatMessage.
func (mr *MockChatServiceServerMockRecorder) SendChatMessage(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendChatMessage", reflect.TypeOf((*MockChatServiceServer)(nil).SendChatMessage), arg0, arg1)
}

// SendDirectMessage mocks base method.
func (m *MockChatServiceServer) SendDirectMessage(arg0 context.Context, arg1 *pb.SendDirectMessageRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendDirectMessage", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendDirectMessage indicates an expected call of SendDirectMessage.
func (mr *MockChatServiceServerMockRecorder) SendDirectMessage(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendDirectMessage", reflect.TypeOf((*MockChatServiceServer)(nil).SendDirectMessage), arg0, arg1)
}

// SetUserChatChannelAuthorizations mocks base method.
func (m *MockChatServiceServer) SetUserChatChannelAuthorizations(arg0 context.Context, arg1 *pb.RequestSetChannelAuth) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUserChatChannelAuthorizations", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetUserChatChannelAuthorizations indicates an expected call of SetUserChatChannelAuthorizations.
func (mr *MockChatServiceServerMockRecorder) SetUserChatChannelAuthorizations(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserChatChannelAuthorizations", reflect.TypeOf((*MockChatServiceServer)(nil).SetUserChatChannelAuthorizations), arg0, arg1)
}

// UpdateUserChatChannelAuthorizations mocks base method.
func (m *MockChatServiceServer) UpdateUserChatChannelAuthorizations(arg0 context.Context, arg1 *pb.RequestChatChannelAuthChange) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserChatChannelAuthorizations", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserChatChannelAuthorizations indicates an expected call of UpdateUserChatChannelAuthorizations.
func (mr *MockChatServiceServerMockRecorder) UpdateUserChatChannelAuthorizations(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserChatChannelAuthorizations", reflect.TypeOf((*MockChatServiceServer)(nil).UpdateUserChatChannelAuthorizations), arg0, arg1)
}

// mustEmbedUnimplementedChatServiceServer mocks base method.
func (m *MockChatServiceServer) mustEmbedUnimplementedChatServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedChatServiceServer")
}

// mustEmbedUnimplementedChatServiceServer indicates an expected call of mustEmbedUnimplementedChatServiceServer.
func (mr *MockChatServiceServerMockRecorder) mustEmbedUnimplementedChatServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedChatServiceServer", reflect.TypeOf((*MockChatServiceServer)(nil).mustEmbedUnimplementedChatServiceServer))
}

// MockUnsafeChatServiceServer is a mock of UnsafeChatServiceServer interface.
type MockUnsafeChatServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeChatServiceServerMockRecorder
}

// MockUnsafeChatServiceServerMockRecorder is the mock recorder for MockUnsafeChatServiceServer.
type MockUnsafeChatServiceServerMockRecorder struct {
	mock *MockUnsafeChatServiceServer
}

// NewMockUnsafeChatServiceServer creates a new mock instance.
func NewMockUnsafeChatServiceServer(ctrl *gomock.Controller) *MockUnsafeChatServiceServer {
	mock := &MockUnsafeChatServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeChatServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeChatServiceServer) EXPECT() *MockUnsafeChatServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedChatServiceServer mocks base method.
func (m *MockUnsafeChatServiceServer) mustEmbedUnimplementedChatServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedChatServiceServer")
}

// mustEmbedUnimplementedChatServiceServer indicates an expected call of mustEmbedUnimplementedChatServiceServer.
func (mr *MockUnsafeChatServiceServerMockRecorder) mustEmbedUnimplementedChatServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedChatServiceServer", reflect.TypeOf((*MockUnsafeChatServiceServer)(nil).mustEmbedUnimplementedChatServiceServer))
}

// MockChatService_ConnectChannelServer is a mock of ChatService_ConnectChannelServer interface.
type MockChatService_ConnectChannelServer struct {
	ctrl     *gomock.Controller
	recorder *MockChatService_ConnectChannelServerMockRecorder
}

// MockChatService_ConnectChannelServerMockRecorder is the mock recorder for MockChatService_ConnectChannelServer.
type MockChatService_ConnectChannelServerMockRecorder struct {
	mock *MockChatService_ConnectChannelServer
}

// NewMockChatService_ConnectChannelServer creates a new mock instance.
func NewMockChatService_ConnectChannelServer(ctrl *gomock.Controller) *MockChatService_ConnectChannelServer {
	mock := &MockChatService_ConnectChannelServer{ctrl: ctrl}
	mock.recorder = &MockChatService_ConnectChannelServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatService_ConnectChannelServer) EXPECT() *MockChatService_ConnectChannelServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockChatService_ConnectChannelServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockChatService_ConnectChannelServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockChatService_ConnectChannelServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockChatService_ConnectChannelServer) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockChatService_ConnectChannelServerMockRecorder) RecvMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockChatService_ConnectChannelServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockChatService_ConnectChannelServer) Send(arg0 *pb.ChatMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockChatService_ConnectChannelServerMockRecorder) Send(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockChatService_ConnectChannelServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockChatService_ConnectChannelServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockChatService_ConnectChannelServerMockRecorder) SendHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockChatService_ConnectChannelServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockChatService_ConnectChannelServer) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockChatService_ConnectChannelServerMockRecorder) SendMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockChatService_ConnectChannelServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockChatService_ConnectChannelServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockChatService_ConnectChannelServerMockRecorder) SetHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockChatService_ConnectChannelServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockChatService_ConnectChannelServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockChatService_ConnectChannelServerMockRecorder) SetTrailer(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockChatService_ConnectChannelServer)(nil).SetTrailer), arg0)
}

// MockChatService_ConnectDirectMessageServer is a mock of ChatService_ConnectDirectMessageServer interface.
type MockChatService_ConnectDirectMessageServer struct {
	ctrl     *gomock.Controller
	recorder *MockChatService_ConnectDirectMessageServerMockRecorder
}

// MockChatService_ConnectDirectMessageServerMockRecorder is the mock recorder for MockChatService_ConnectDirectMessageServer.
type MockChatService_ConnectDirectMessageServerMockRecorder struct {
	mock *MockChatService_ConnectDirectMessageServer
}

// NewMockChatService_ConnectDirectMessageServer creates a new mock instance.
func NewMockChatService_ConnectDirectMessageServer(ctrl *gomock.Controller) *MockChatService_ConnectDirectMessageServer {
	mock := &MockChatService_ConnectDirectMessageServer{ctrl: ctrl}
	mock.recorder = &MockChatService_ConnectDirectMessageServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatService_ConnectDirectMessageServer) EXPECT() *MockChatService_ConnectDirectMessageServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockChatService_ConnectDirectMessageServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockChatService_ConnectDirectMessageServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockChatService_ConnectDirectMessageServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockChatService_ConnectDirectMessageServer) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockChatService_ConnectDirectMessageServerMockRecorder) RecvMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockChatService_ConnectDirectMessageServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockChatService_ConnectDirectMessageServer) Send(arg0 *pb.ChatMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockChatService_ConnectDirectMessageServerMockRecorder) Send(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockChatService_ConnectDirectMessageServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockChatService_ConnectDirectMessageServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockChatService_ConnectDirectMessageServerMockRecorder) SendHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockChatService_ConnectDirectMessageServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockChatService_ConnectDirectMessageServer) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockChatService_ConnectDirectMessageServerMockRecorder) SendMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockChatService_ConnectDirectMessageServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockChatService_ConnectDirectMessageServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockChatService_ConnectDirectMessageServerMockRecorder) SetHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockChatService_ConnectDirectMessageServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockChatService_ConnectDirectMessageServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockChatService_ConnectDirectMessageServerMockRecorder) SetTrailer(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockChatService_ConnectDirectMessageServer)(nil).SetTrailer), arg0)
}
