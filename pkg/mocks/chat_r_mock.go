// Code generated by MockGen. DO NOT EDIT.
// Source: /home/wil/sro/git/go-backend/pkg/repository/chat_r.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=/home/wil/sro/git/go-backend/pkg/repository/chat_r.go -destination=/home/wil/sro/git/go-backend/pkg/mocks/chat_r_mock.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/ShatteredRealms/go-backend/pkg/model"
	gomock "go.uber.org/mock/gomock"
)

// MockChatRepository is a mock of ChatRepository interface.
type MockChatRepository struct {
	ctrl     *gomock.Controller
	recorder *MockChatRepositoryMockRecorder
}

// MockChatRepositoryMockRecorder is the mock recorder for MockChatRepository.
type MockChatRepositoryMockRecorder struct {
	mock *MockChatRepository
}

// NewMockChatRepository creates a new mock instance.
func NewMockChatRepository(ctrl *gomock.Controller) *MockChatRepository {
	mock := &MockChatRepository{ctrl: ctrl}
	mock.recorder = &MockChatRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatRepository) EXPECT() *MockChatRepositoryMockRecorder {
	return m.recorder
}

// AllChannels mocks base method.
func (m *MockChatRepository) AllChannels(ctx context.Context) (model.ChatChannels, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllChannels", ctx)
	ret0, _ := ret[0].(model.ChatChannels)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllChannels indicates an expected call of AllChannels.
func (mr *MockChatRepositoryMockRecorder) AllChannels(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllChannels", reflect.TypeOf((*MockChatRepository)(nil).AllChannels), ctx)
}

// AuthorizedChannelsForCharacter mocks base method.
func (m *MockChatRepository) AuthorizedChannelsForCharacter(ctx context.Context, characterId uint) (model.ChatChannels, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthorizedChannelsForCharacter", ctx, characterId)
	ret0, _ := ret[0].(model.ChatChannels)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthorizedChannelsForCharacter indicates an expected call of AuthorizedChannelsForCharacter.
func (mr *MockChatRepositoryMockRecorder) AuthorizedChannelsForCharacter(ctx, characterId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthorizedChannelsForCharacter", reflect.TypeOf((*MockChatRepository)(nil).AuthorizedChannelsForCharacter), ctx, characterId)
}

// ChangeAuthorizationForCharacter mocks base method.
func (m *MockChatRepository) ChangeAuthorizationForCharacter(ctx context.Context, characterId uint, channelIds []uint, addAuth bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeAuthorizationForCharacter", ctx, characterId, channelIds, addAuth)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeAuthorizationForCharacter indicates an expected call of ChangeAuthorizationForCharacter.
func (mr *MockChatRepositoryMockRecorder) ChangeAuthorizationForCharacter(ctx, characterId, channelIds, addAuth any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeAuthorizationForCharacter", reflect.TypeOf((*MockChatRepository)(nil).ChangeAuthorizationForCharacter), ctx, characterId, channelIds, addAuth)
}

// CreateChannel mocks base method.
func (m *MockChatRepository) CreateChannel(ctx context.Context, channel *model.ChatChannel) (*model.ChatChannel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChannel", ctx, channel)
	ret0, _ := ret[0].(*model.ChatChannel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChannel indicates an expected call of CreateChannel.
func (mr *MockChatRepositoryMockRecorder) CreateChannel(ctx, channel any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChannel", reflect.TypeOf((*MockChatRepository)(nil).CreateChannel), ctx, channel)
}

// DeleteChannel mocks base method.
func (m *MockChatRepository) DeleteChannel(ctx context.Context, channel *model.ChatChannel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChannel", ctx, channel)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteChannel indicates an expected call of DeleteChannel.
func (mr *MockChatRepositoryMockRecorder) DeleteChannel(ctx, channel any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChannel", reflect.TypeOf((*MockChatRepository)(nil).DeleteChannel), ctx, channel)
}

// FindDeletedWithName mocks base method.
func (m *MockChatRepository) FindDeletedWithName(ctx context.Context, name string) (*model.ChatChannel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindDeletedWithName", ctx, name)
	ret0, _ := ret[0].(*model.ChatChannel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindDeletedWithName indicates an expected call of FindDeletedWithName.
func (mr *MockChatRepositoryMockRecorder) FindDeletedWithName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindDeletedWithName", reflect.TypeOf((*MockChatRepository)(nil).FindDeletedWithName), ctx, name)
}

// GetChannel mocks base method.
func (m *MockChatRepository) GetChannel(ctx context.Context, id uint) (*model.ChatChannel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannel", ctx, id)
	ret0, _ := ret[0].(*model.ChatChannel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChannel indicates an expected call of GetChannel.
func (mr *MockChatRepositoryMockRecorder) GetChannel(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannel", reflect.TypeOf((*MockChatRepository)(nil).GetChannel), ctx, id)
}

// Migrate mocks base method.
func (m *MockChatRepository) Migrate(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Migrate", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Migrate indicates an expected call of Migrate.
func (mr *MockChatRepositoryMockRecorder) Migrate(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Migrate", reflect.TypeOf((*MockChatRepository)(nil).Migrate), ctx)
}

// UpdateChannel mocks base method.
func (m *MockChatRepository) UpdateChannel(ctx context.Context, channel *model.ChatChannel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateChannel", ctx, channel)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateChannel indicates an expected call of UpdateChannel.
func (mr *MockChatRepositoryMockRecorder) UpdateChannel(ctx, channel any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChannel", reflect.TypeOf((*MockChatRepository)(nil).UpdateChannel), ctx, channel)
}
