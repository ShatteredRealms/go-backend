// Code generated by MockGen. DO NOT EDIT.
// Source: /home/wil/sro/git/go-backend/pkg/service/gamebackend_s.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=/home/wil/sro/git/go-backend/pkg/service/gamebackend_s.go -destination=/home/wil/sro/git/go-backend/pkg/mocks/gamebackend_s_mock.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/ShatteredRealms/go-backend/pkg/model"
	pb "github.com/ShatteredRealms/go-backend/pkg/pb"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockdimensionService is a mock of dimensionService interface.
type MockdimensionService struct {
	ctrl     *gomock.Controller
	recorder *MockdimensionServiceMockRecorder
}

// MockdimensionServiceMockRecorder is the mock recorder for MockdimensionService.
type MockdimensionServiceMockRecorder struct {
	mock *MockdimensionService
}

// NewMockdimensionService creates a new mock instance.
func NewMockdimensionService(ctrl *gomock.Controller) *MockdimensionService {
	mock := &MockdimensionService{ctrl: ctrl}
	mock.recorder = &MockdimensionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockdimensionService) EXPECT() *MockdimensionServiceMockRecorder {
	return m.recorder
}

// CreateDimension mocks base method.
func (m *MockdimensionService) CreateDimension(ctx context.Context, name, location, version string, mapIds []*uuid.UUID) (*model.Dimension, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDimension", ctx, name, location, version, mapIds)
	ret0, _ := ret[0].(*model.Dimension)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDimension indicates an expected call of CreateDimension.
func (mr *MockdimensionServiceMockRecorder) CreateDimension(ctx, name, location, version, mapIds any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDimension", reflect.TypeOf((*MockdimensionService)(nil).CreateDimension), ctx, name, location, version, mapIds)
}

// DeleteDimensionById mocks base method.
func (m *MockdimensionService) DeleteDimensionById(ctx context.Context, id *uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDimensionById", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDimensionById indicates an expected call of DeleteDimensionById.
func (mr *MockdimensionServiceMockRecorder) DeleteDimensionById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDimensionById", reflect.TypeOf((*MockdimensionService)(nil).DeleteDimensionById), ctx, id)
}

// DeleteDimensionByName mocks base method.
func (m *MockdimensionService) DeleteDimensionByName(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDimensionByName", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDimensionByName indicates an expected call of DeleteDimensionByName.
func (mr *MockdimensionServiceMockRecorder) DeleteDimensionByName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDimensionByName", reflect.TypeOf((*MockdimensionService)(nil).DeleteDimensionByName), ctx, name)
}

// DuplicateDimension mocks base method.
func (m *MockdimensionService) DuplicateDimension(ctx context.Context, refId *uuid.UUID, name string) (*model.Dimension, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DuplicateDimension", ctx, refId, name)
	ret0, _ := ret[0].(*model.Dimension)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DuplicateDimension indicates an expected call of DuplicateDimension.
func (mr *MockdimensionServiceMockRecorder) DuplicateDimension(ctx, refId, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DuplicateDimension", reflect.TypeOf((*MockdimensionService)(nil).DuplicateDimension), ctx, refId, name)
}

// EditDimension mocks base method.
func (m *MockdimensionService) EditDimension(ctx context.Context, request *pb.EditDimensionRequest) (*model.Dimension, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditDimension", ctx, request)
	ret0, _ := ret[0].(*model.Dimension)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditDimension indicates an expected call of EditDimension.
func (mr *MockdimensionServiceMockRecorder) EditDimension(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditDimension", reflect.TypeOf((*MockdimensionService)(nil).EditDimension), ctx, request)
}

// FindAllDimensions mocks base method.
func (m *MockdimensionService) FindAllDimensions(ctx context.Context) (model.Dimensions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllDimensions", ctx)
	ret0, _ := ret[0].(model.Dimensions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllDimensions indicates an expected call of FindAllDimensions.
func (mr *MockdimensionServiceMockRecorder) FindAllDimensions(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllDimensions", reflect.TypeOf((*MockdimensionService)(nil).FindAllDimensions), ctx)
}

// FindDimensionById mocks base method.
func (m *MockdimensionService) FindDimensionById(ctx context.Context, id *uuid.UUID) (*model.Dimension, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindDimensionById", ctx, id)
	ret0, _ := ret[0].(*model.Dimension)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindDimensionById indicates an expected call of FindDimensionById.
func (mr *MockdimensionServiceMockRecorder) FindDimensionById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindDimensionById", reflect.TypeOf((*MockdimensionService)(nil).FindDimensionById), ctx, id)
}

// FindDimensionByName mocks base method.
func (m *MockdimensionService) FindDimensionByName(ctx context.Context, name string) (*model.Dimension, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindDimensionByName", ctx, name)
	ret0, _ := ret[0].(*model.Dimension)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindDimensionByName indicates an expected call of FindDimensionByName.
func (mr *MockdimensionServiceMockRecorder) FindDimensionByName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindDimensionByName", reflect.TypeOf((*MockdimensionService)(nil).FindDimensionByName), ctx, name)
}

// FindDimensionsByIds mocks base method.
func (m *MockdimensionService) FindDimensionsByIds(ctx context.Context, ids []*uuid.UUID) (model.Dimensions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindDimensionsByIds", ctx, ids)
	ret0, _ := ret[0].(model.Dimensions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindDimensionsByIds indicates an expected call of FindDimensionsByIds.
func (mr *MockdimensionServiceMockRecorder) FindDimensionsByIds(ctx, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindDimensionsByIds", reflect.TypeOf((*MockdimensionService)(nil).FindDimensionsByIds), ctx, ids)
}

// FindDimensionsByNames mocks base method.
func (m *MockdimensionService) FindDimensionsByNames(ctx context.Context, names []string) (model.Dimensions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindDimensionsByNames", ctx, names)
	ret0, _ := ret[0].(model.Dimensions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindDimensionsByNames indicates an expected call of FindDimensionsByNames.
func (mr *MockdimensionServiceMockRecorder) FindDimensionsByNames(ctx, names any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindDimensionsByNames", reflect.TypeOf((*MockdimensionService)(nil).FindDimensionsByNames), ctx, names)
}

// FindDimensionsWithMapIds mocks base method.
func (m *MockdimensionService) FindDimensionsWithMapIds(ctx context.Context, ids []*uuid.UUID) (model.Dimensions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindDimensionsWithMapIds", ctx, ids)
	ret0, _ := ret[0].(model.Dimensions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindDimensionsWithMapIds indicates an expected call of FindDimensionsWithMapIds.
func (mr *MockdimensionServiceMockRecorder) FindDimensionsWithMapIds(ctx, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindDimensionsWithMapIds", reflect.TypeOf((*MockdimensionService)(nil).FindDimensionsWithMapIds), ctx, ids)
}

// MockmapService is a mock of mapService interface.
type MockmapService struct {
	ctrl     *gomock.Controller
	recorder *MockmapServiceMockRecorder
}

// MockmapServiceMockRecorder is the mock recorder for MockmapService.
type MockmapServiceMockRecorder struct {
	mock *MockmapService
}

// NewMockmapService creates a new mock instance.
func NewMockmapService(ctrl *gomock.Controller) *MockmapService {
	mock := &MockmapService{ctrl: ctrl}
	mock.recorder = &MockmapServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockmapService) EXPECT() *MockmapServiceMockRecorder {
	return m.recorder
}

// CreateMap mocks base method.
func (m *MockmapService) CreateMap(ctx context.Context, name, path string, maxPlayers uint64, instanced bool) (*model.Map, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMap", ctx, name, path, maxPlayers, instanced)
	ret0, _ := ret[0].(*model.Map)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMap indicates an expected call of CreateMap.
func (mr *MockmapServiceMockRecorder) CreateMap(ctx, name, path, maxPlayers, instanced any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMap", reflect.TypeOf((*MockmapService)(nil).CreateMap), ctx, name, path, maxPlayers, instanced)
}

// DeleteMapById mocks base method.
func (m *MockmapService) DeleteMapById(ctx context.Context, id *uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMapById", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMapById indicates an expected call of DeleteMapById.
func (mr *MockmapServiceMockRecorder) DeleteMapById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMapById", reflect.TypeOf((*MockmapService)(nil).DeleteMapById), ctx, id)
}

// DeleteMapByName mocks base method.
func (m *MockmapService) DeleteMapByName(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMapByName", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMapByName indicates an expected call of DeleteMapByName.
func (mr *MockmapServiceMockRecorder) DeleteMapByName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMapByName", reflect.TypeOf((*MockmapService)(nil).DeleteMapByName), ctx, name)
}

// EditMap mocks base method.
func (m *MockmapService) EditMap(ctx context.Context, request *pb.EditMapRequest) (*model.Map, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditMap", ctx, request)
	ret0, _ := ret[0].(*model.Map)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditMap indicates an expected call of EditMap.
func (mr *MockmapServiceMockRecorder) EditMap(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditMap", reflect.TypeOf((*MockmapService)(nil).EditMap), ctx, request)
}

// FindAllMaps mocks base method.
func (m *MockmapService) FindAllMaps(ctx context.Context) (model.Maps, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllMaps", ctx)
	ret0, _ := ret[0].(model.Maps)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllMaps indicates an expected call of FindAllMaps.
func (mr *MockmapServiceMockRecorder) FindAllMaps(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllMaps", reflect.TypeOf((*MockmapService)(nil).FindAllMaps), ctx)
}

// FindMapById mocks base method.
func (m *MockmapService) FindMapById(ctx context.Context, id *uuid.UUID) (*model.Map, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMapById", ctx, id)
	ret0, _ := ret[0].(*model.Map)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMapById indicates an expected call of FindMapById.
func (mr *MockmapServiceMockRecorder) FindMapById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMapById", reflect.TypeOf((*MockmapService)(nil).FindMapById), ctx, id)
}

// FindMapByName mocks base method.
func (m *MockmapService) FindMapByName(ctx context.Context, name string) (*model.Map, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMapByName", ctx, name)
	ret0, _ := ret[0].(*model.Map)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMapByName indicates an expected call of FindMapByName.
func (mr *MockmapServiceMockRecorder) FindMapByName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMapByName", reflect.TypeOf((*MockmapService)(nil).FindMapByName), ctx, name)
}

// FindMapsByIds mocks base method.
func (m *MockmapService) FindMapsByIds(ctx context.Context, ids []*uuid.UUID) (model.Maps, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMapsByIds", ctx, ids)
	ret0, _ := ret[0].(model.Maps)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMapsByIds indicates an expected call of FindMapsByIds.
func (mr *MockmapServiceMockRecorder) FindMapsByIds(ctx, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMapsByIds", reflect.TypeOf((*MockmapService)(nil).FindMapsByIds), ctx, ids)
}

// FindMapsByNames mocks base method.
func (m *MockmapService) FindMapsByNames(ctx context.Context, names []string) (model.Maps, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMapsByNames", ctx, names)
	ret0, _ := ret[0].(model.Maps)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMapsByNames indicates an expected call of FindMapsByNames.
func (mr *MockmapServiceMockRecorder) FindMapsByNames(ctx, names any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMapsByNames", reflect.TypeOf((*MockmapService)(nil).FindMapsByNames), ctx, names)
}

// MockconnectionService is a mock of connectionService interface.
type MockconnectionService struct {
	ctrl     *gomock.Controller
	recorder *MockconnectionServiceMockRecorder
}

// MockconnectionServiceMockRecorder is the mock recorder for MockconnectionService.
type MockconnectionServiceMockRecorder struct {
	mock *MockconnectionService
}

// NewMockconnectionService creates a new mock instance.
func NewMockconnectionService(ctrl *gomock.Controller) *MockconnectionService {
	mock := &MockconnectionService{ctrl: ctrl}
	mock.recorder = &MockconnectionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockconnectionService) EXPECT() *MockconnectionServiceMockRecorder {
	return m.recorder
}

// CheckPlayerConnection mocks base method.
func (m *MockconnectionService) CheckPlayerConnection(ctx context.Context, id *uuid.UUID, serverName string) (*model.PendingConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPlayerConnection", ctx, id, serverName)
	ret0, _ := ret[0].(*model.PendingConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckPlayerConnection indicates an expected call of CheckPlayerConnection.
func (mr *MockconnectionServiceMockRecorder) CheckPlayerConnection(ctx, id, serverName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPlayerConnection", reflect.TypeOf((*MockconnectionService)(nil).CheckPlayerConnection), ctx, id, serverName)
}

// CreatePendingConnection mocks base method.
func (m *MockconnectionService) CreatePendingConnection(ctx context.Context, character, serverName string) (*model.PendingConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePendingConnection", ctx, character, serverName)
	ret0, _ := ret[0].(*model.PendingConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePendingConnection indicates an expected call of CreatePendingConnection.
func (mr *MockconnectionServiceMockRecorder) CreatePendingConnection(ctx, character, serverName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePendingConnection", reflect.TypeOf((*MockconnectionService)(nil).CreatePendingConnection), ctx, character, serverName)
}

// MockGamebackendService is a mock of GamebackendService interface.
type MockGamebackendService struct {
	ctrl     *gomock.Controller
	recorder *MockGamebackendServiceMockRecorder
}

// MockGamebackendServiceMockRecorder is the mock recorder for MockGamebackendService.
type MockGamebackendServiceMockRecorder struct {
	mock *MockGamebackendService
}

// NewMockGamebackendService creates a new mock instance.
func NewMockGamebackendService(ctrl *gomock.Controller) *MockGamebackendService {
	mock := &MockGamebackendService{ctrl: ctrl}
	mock.recorder = &MockGamebackendServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGamebackendService) EXPECT() *MockGamebackendServiceMockRecorder {
	return m.recorder
}

// CheckPlayerConnection mocks base method.
func (m *MockGamebackendService) CheckPlayerConnection(ctx context.Context, id *uuid.UUID, serverName string) (*model.PendingConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPlayerConnection", ctx, id, serverName)
	ret0, _ := ret[0].(*model.PendingConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckPlayerConnection indicates an expected call of CheckPlayerConnection.
func (mr *MockGamebackendServiceMockRecorder) CheckPlayerConnection(ctx, id, serverName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPlayerConnection", reflect.TypeOf((*MockGamebackendService)(nil).CheckPlayerConnection), ctx, id, serverName)
}

// CreateDimension mocks base method.
func (m *MockGamebackendService) CreateDimension(ctx context.Context, name, location, version string, mapIds []*uuid.UUID) (*model.Dimension, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDimension", ctx, name, location, version, mapIds)
	ret0, _ := ret[0].(*model.Dimension)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDimension indicates an expected call of CreateDimension.
func (mr *MockGamebackendServiceMockRecorder) CreateDimension(ctx, name, location, version, mapIds any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDimension", reflect.TypeOf((*MockGamebackendService)(nil).CreateDimension), ctx, name, location, version, mapIds)
}

// CreateMap mocks base method.
func (m *MockGamebackendService) CreateMap(ctx context.Context, name, path string, maxPlayers uint64, instanced bool) (*model.Map, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMap", ctx, name, path, maxPlayers, instanced)
	ret0, _ := ret[0].(*model.Map)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMap indicates an expected call of CreateMap.
func (mr *MockGamebackendServiceMockRecorder) CreateMap(ctx, name, path, maxPlayers, instanced any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMap", reflect.TypeOf((*MockGamebackendService)(nil).CreateMap), ctx, name, path, maxPlayers, instanced)
}

// CreatePendingConnection mocks base method.
func (m *MockGamebackendService) CreatePendingConnection(ctx context.Context, character, serverName string) (*model.PendingConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePendingConnection", ctx, character, serverName)
	ret0, _ := ret[0].(*model.PendingConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePendingConnection indicates an expected call of CreatePendingConnection.
func (mr *MockGamebackendServiceMockRecorder) CreatePendingConnection(ctx, character, serverName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePendingConnection", reflect.TypeOf((*MockGamebackendService)(nil).CreatePendingConnection), ctx, character, serverName)
}

// DeleteDimensionById mocks base method.
func (m *MockGamebackendService) DeleteDimensionById(ctx context.Context, id *uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDimensionById", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDimensionById indicates an expected call of DeleteDimensionById.
func (mr *MockGamebackendServiceMockRecorder) DeleteDimensionById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDimensionById", reflect.TypeOf((*MockGamebackendService)(nil).DeleteDimensionById), ctx, id)
}

// DeleteDimensionByName mocks base method.
func (m *MockGamebackendService) DeleteDimensionByName(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDimensionByName", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDimensionByName indicates an expected call of DeleteDimensionByName.
func (mr *MockGamebackendServiceMockRecorder) DeleteDimensionByName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDimensionByName", reflect.TypeOf((*MockGamebackendService)(nil).DeleteDimensionByName), ctx, name)
}

// DeleteMapById mocks base method.
func (m *MockGamebackendService) DeleteMapById(ctx context.Context, id *uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMapById", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMapById indicates an expected call of DeleteMapById.
func (mr *MockGamebackendServiceMockRecorder) DeleteMapById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMapById", reflect.TypeOf((*MockGamebackendService)(nil).DeleteMapById), ctx, id)
}

// DeleteMapByName mocks base method.
func (m *MockGamebackendService) DeleteMapByName(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMapByName", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMapByName indicates an expected call of DeleteMapByName.
func (mr *MockGamebackendServiceMockRecorder) DeleteMapByName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMapByName", reflect.TypeOf((*MockGamebackendService)(nil).DeleteMapByName), ctx, name)
}

// DuplicateDimension mocks base method.
func (m *MockGamebackendService) DuplicateDimension(ctx context.Context, refId *uuid.UUID, name string) (*model.Dimension, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DuplicateDimension", ctx, refId, name)
	ret0, _ := ret[0].(*model.Dimension)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DuplicateDimension indicates an expected call of DuplicateDimension.
func (mr *MockGamebackendServiceMockRecorder) DuplicateDimension(ctx, refId, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DuplicateDimension", reflect.TypeOf((*MockGamebackendService)(nil).DuplicateDimension), ctx, refId, name)
}

// EditDimension mocks base method.
func (m *MockGamebackendService) EditDimension(ctx context.Context, request *pb.EditDimensionRequest) (*model.Dimension, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditDimension", ctx, request)
	ret0, _ := ret[0].(*model.Dimension)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditDimension indicates an expected call of EditDimension.
func (mr *MockGamebackendServiceMockRecorder) EditDimension(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditDimension", reflect.TypeOf((*MockGamebackendService)(nil).EditDimension), ctx, request)
}

// EditMap mocks base method.
func (m *MockGamebackendService) EditMap(ctx context.Context, request *pb.EditMapRequest) (*model.Map, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditMap", ctx, request)
	ret0, _ := ret[0].(*model.Map)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditMap indicates an expected call of EditMap.
func (mr *MockGamebackendServiceMockRecorder) EditMap(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditMap", reflect.TypeOf((*MockGamebackendService)(nil).EditMap), ctx, request)
}

// FindAllDimensions mocks base method.
func (m *MockGamebackendService) FindAllDimensions(ctx context.Context) (model.Dimensions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllDimensions", ctx)
	ret0, _ := ret[0].(model.Dimensions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllDimensions indicates an expected call of FindAllDimensions.
func (mr *MockGamebackendServiceMockRecorder) FindAllDimensions(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllDimensions", reflect.TypeOf((*MockGamebackendService)(nil).FindAllDimensions), ctx)
}

// FindAllMaps mocks base method.
func (m *MockGamebackendService) FindAllMaps(ctx context.Context) (model.Maps, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllMaps", ctx)
	ret0, _ := ret[0].(model.Maps)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllMaps indicates an expected call of FindAllMaps.
func (mr *MockGamebackendServiceMockRecorder) FindAllMaps(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllMaps", reflect.TypeOf((*MockGamebackendService)(nil).FindAllMaps), ctx)
}

// FindDimensionById mocks base method.
func (m *MockGamebackendService) FindDimensionById(ctx context.Context, id *uuid.UUID) (*model.Dimension, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindDimensionById", ctx, id)
	ret0, _ := ret[0].(*model.Dimension)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindDimensionById indicates an expected call of FindDimensionById.
func (mr *MockGamebackendServiceMockRecorder) FindDimensionById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindDimensionById", reflect.TypeOf((*MockGamebackendService)(nil).FindDimensionById), ctx, id)
}

// FindDimensionByName mocks base method.
func (m *MockGamebackendService) FindDimensionByName(ctx context.Context, name string) (*model.Dimension, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindDimensionByName", ctx, name)
	ret0, _ := ret[0].(*model.Dimension)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindDimensionByName indicates an expected call of FindDimensionByName.
func (mr *MockGamebackendServiceMockRecorder) FindDimensionByName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindDimensionByName", reflect.TypeOf((*MockGamebackendService)(nil).FindDimensionByName), ctx, name)
}

// FindDimensionsByIds mocks base method.
func (m *MockGamebackendService) FindDimensionsByIds(ctx context.Context, ids []*uuid.UUID) (model.Dimensions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindDimensionsByIds", ctx, ids)
	ret0, _ := ret[0].(model.Dimensions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindDimensionsByIds indicates an expected call of FindDimensionsByIds.
func (mr *MockGamebackendServiceMockRecorder) FindDimensionsByIds(ctx, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindDimensionsByIds", reflect.TypeOf((*MockGamebackendService)(nil).FindDimensionsByIds), ctx, ids)
}

// FindDimensionsByNames mocks base method.
func (m *MockGamebackendService) FindDimensionsByNames(ctx context.Context, names []string) (model.Dimensions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindDimensionsByNames", ctx, names)
	ret0, _ := ret[0].(model.Dimensions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindDimensionsByNames indicates an expected call of FindDimensionsByNames.
func (mr *MockGamebackendServiceMockRecorder) FindDimensionsByNames(ctx, names any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindDimensionsByNames", reflect.TypeOf((*MockGamebackendService)(nil).FindDimensionsByNames), ctx, names)
}

// FindDimensionsWithMapIds mocks base method.
func (m *MockGamebackendService) FindDimensionsWithMapIds(ctx context.Context, ids []*uuid.UUID) (model.Dimensions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindDimensionsWithMapIds", ctx, ids)
	ret0, _ := ret[0].(model.Dimensions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindDimensionsWithMapIds indicates an expected call of FindDimensionsWithMapIds.
func (mr *MockGamebackendServiceMockRecorder) FindDimensionsWithMapIds(ctx, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindDimensionsWithMapIds", reflect.TypeOf((*MockGamebackendService)(nil).FindDimensionsWithMapIds), ctx, ids)
}

// FindMapById mocks base method.
func (m *MockGamebackendService) FindMapById(ctx context.Context, id *uuid.UUID) (*model.Map, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMapById", ctx, id)
	ret0, _ := ret[0].(*model.Map)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMapById indicates an expected call of FindMapById.
func (mr *MockGamebackendServiceMockRecorder) FindMapById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMapById", reflect.TypeOf((*MockGamebackendService)(nil).FindMapById), ctx, id)
}

// FindMapByName mocks base method.
func (m *MockGamebackendService) FindMapByName(ctx context.Context, name string) (*model.Map, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMapByName", ctx, name)
	ret0, _ := ret[0].(*model.Map)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMapByName indicates an expected call of FindMapByName.
func (mr *MockGamebackendServiceMockRecorder) FindMapByName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMapByName", reflect.TypeOf((*MockGamebackendService)(nil).FindMapByName), ctx, name)
}

// FindMapsByIds mocks base method.
func (m *MockGamebackendService) FindMapsByIds(ctx context.Context, ids []*uuid.UUID) (model.Maps, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMapsByIds", ctx, ids)
	ret0, _ := ret[0].(model.Maps)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMapsByIds indicates an expected call of FindMapsByIds.
func (mr *MockGamebackendServiceMockRecorder) FindMapsByIds(ctx, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMapsByIds", reflect.TypeOf((*MockGamebackendService)(nil).FindMapsByIds), ctx, ids)
}

// FindMapsByNames mocks base method.
func (m *MockGamebackendService) FindMapsByNames(ctx context.Context, names []string) (model.Maps, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMapsByNames", ctx, names)
	ret0, _ := ret[0].(model.Maps)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMapsByNames indicates an expected call of FindMapsByNames.
func (mr *MockGamebackendServiceMockRecorder) FindMapsByNames(ctx, names any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMapsByNames", reflect.TypeOf((*MockGamebackendService)(nil).FindMapsByNames), ctx, names)
}
