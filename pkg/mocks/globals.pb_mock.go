// Code generated by MockGen. DO NOT EDIT.
// Source: /home/wil/sro/git/go-backend/pkg/pb/globals.pb.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=/home/wil/sro/git/go-backend/pkg/pb/globals.pb.go -destination=/home/wil/sro/git/go-backend/pkg/mocks/globals.pb_mock.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockisUserTarget_Target is a mock of isUserTarget_Target interface.
type MockisUserTarget_Target struct {
	ctrl     *gomock.Controller
	recorder *MockisUserTarget_TargetMockRecorder
}

// MockisUserTarget_TargetMockRecorder is the mock recorder for MockisUserTarget_Target.
type MockisUserTarget_TargetMockRecorder struct {
	mock *MockisUserTarget_Target
}

// NewMockisUserTarget_Target creates a new mock instance.
func NewMockisUserTarget_Target(ctrl *gomock.Controller) *MockisUserTarget_Target {
	mock := &MockisUserTarget_Target{ctrl: ctrl}
	mock.recorder = &MockisUserTarget_TargetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockisUserTarget_Target) EXPECT() *MockisUserTarget_TargetMockRecorder {
	return m.recorder
}

// isUserTarget_Target mocks base method.
func (m *MockisUserTarget_Target) isUserTarget_Target() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "isUserTarget_Target")
}

// isUserTarget_Target indicates an expected call of isUserTarget_Target.
func (mr *MockisUserTarget_TargetMockRecorder) isUserTarget_Target() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isUserTarget_Target", reflect.TypeOf((*MockisUserTarget_Target)(nil).isUserTarget_Target))
}
