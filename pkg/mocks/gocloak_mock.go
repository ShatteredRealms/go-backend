// Code generated by MockGen. DO NOT EDIT.
// Source: /home/wil/sro/git/go-backend/pkg/auth/gocloak.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=/home/wil/sro/git/go-backend/pkg/auth/gocloak.go -destination=/home/wil/sro/git/go-backend/pkg/mocks/gocloak_mock.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gocloak "github.com/Nerzal/gocloak/v13"
	resty "github.com/go-resty/resty/v2"
	jwt "github.com/golang-jwt/jwt/v4"
	gomock "go.uber.org/mock/gomock"
)

// MockKeycloakClient is a mock of KeycloakClient interface.
type MockKeycloakClient struct {
	ctrl     *gomock.Controller
	recorder *MockKeycloakClientMockRecorder
}

// MockKeycloakClientMockRecorder is the mock recorder for MockKeycloakClient.
type MockKeycloakClientMockRecorder struct {
	mock *MockKeycloakClient
}

// NewMockKeycloakClient creates a new mock instance.
func NewMockKeycloakClient(ctrl *gomock.Controller) *MockKeycloakClient {
	mock := &MockKeycloakClient{ctrl: ctrl}
	mock.recorder = &MockKeycloakClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeycloakClient) EXPECT() *MockKeycloakClientMockRecorder {
	return m.recorder
}

// AddClientRoleComposite mocks base method.
func (m *MockKeycloakClient) AddClientRoleComposite(ctx context.Context, token, realm, roleID string, roles []gocloak.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddClientRoleComposite", ctx, token, realm, roleID, roles)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddClientRoleComposite indicates an expected call of AddClientRoleComposite.
func (mr *MockKeycloakClientMockRecorder) AddClientRoleComposite(ctx, token, realm, roleID, roles any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddClientRoleComposite", reflect.TypeOf((*MockKeycloakClient)(nil).AddClientRoleComposite), ctx, token, realm, roleID, roles)
}

// AddClientRoleToGroup mocks base method.
func (m *MockKeycloakClient) AddClientRoleToGroup(ctx context.Context, token, realm, idOfClient, groupID string, roles []gocloak.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddClientRoleToGroup", ctx, token, realm, idOfClient, groupID, roles)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddClientRoleToGroup indicates an expected call of AddClientRoleToGroup.
func (mr *MockKeycloakClientMockRecorder) AddClientRoleToGroup(ctx, token, realm, idOfClient, groupID, roles any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddClientRoleToGroup", reflect.TypeOf((*MockKeycloakClient)(nil).AddClientRoleToGroup), ctx, token, realm, idOfClient, groupID, roles)
}

// AddClientRoleToUser mocks base method.
func (m *MockKeycloakClient) AddClientRoleToUser(ctx context.Context, token, realm, idOfClient, userID string, roles []gocloak.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddClientRoleToUser", ctx, token, realm, idOfClient, userID, roles)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddClientRoleToUser indicates an expected call of AddClientRoleToUser.
func (mr *MockKeycloakClientMockRecorder) AddClientRoleToUser(ctx, token, realm, idOfClient, userID, roles any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddClientRoleToUser", reflect.TypeOf((*MockKeycloakClient)(nil).AddClientRoleToUser), ctx, token, realm, idOfClient, userID, roles)
}

// AddDefaultGroup mocks base method.
func (m *MockKeycloakClient) AddDefaultGroup(ctx context.Context, accessToken, realm, groupID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddDefaultGroup", ctx, accessToken, realm, groupID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddDefaultGroup indicates an expected call of AddDefaultGroup.
func (mr *MockKeycloakClientMockRecorder) AddDefaultGroup(ctx, accessToken, realm, groupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDefaultGroup", reflect.TypeOf((*MockKeycloakClient)(nil).AddDefaultGroup), ctx, accessToken, realm, groupID)
}

// AddDefaultScopeToClient mocks base method.
func (m *MockKeycloakClient) AddDefaultScopeToClient(ctx context.Context, token, realm, idOfClient, scopeID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddDefaultScopeToClient", ctx, token, realm, idOfClient, scopeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddDefaultScopeToClient indicates an expected call of AddDefaultScopeToClient.
func (mr *MockKeycloakClientMockRecorder) AddDefaultScopeToClient(ctx, token, realm, idOfClient, scopeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDefaultScopeToClient", reflect.TypeOf((*MockKeycloakClient)(nil).AddDefaultScopeToClient), ctx, token, realm, idOfClient, scopeID)
}

// AddOptionalScopeToClient mocks base method.
func (m *MockKeycloakClient) AddOptionalScopeToClient(ctx context.Context, token, realm, idOfClient, scopeID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOptionalScopeToClient", ctx, token, realm, idOfClient, scopeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddOptionalScopeToClient indicates an expected call of AddOptionalScopeToClient.
func (mr *MockKeycloakClientMockRecorder) AddOptionalScopeToClient(ctx, token, realm, idOfClient, scopeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOptionalScopeToClient", reflect.TypeOf((*MockKeycloakClient)(nil).AddOptionalScopeToClient), ctx, token, realm, idOfClient, scopeID)
}

// AddRealmRoleComposite mocks base method.
func (m *MockKeycloakClient) AddRealmRoleComposite(ctx context.Context, token, realm, roleName string, roles []gocloak.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRealmRoleComposite", ctx, token, realm, roleName, roles)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRealmRoleComposite indicates an expected call of AddRealmRoleComposite.
func (mr *MockKeycloakClientMockRecorder) AddRealmRoleComposite(ctx, token, realm, roleName, roles any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRealmRoleComposite", reflect.TypeOf((*MockKeycloakClient)(nil).AddRealmRoleComposite), ctx, token, realm, roleName, roles)
}

// AddRealmRoleToGroup mocks base method.
func (m *MockKeycloakClient) AddRealmRoleToGroup(ctx context.Context, token, realm, groupID string, roles []gocloak.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRealmRoleToGroup", ctx, token, realm, groupID, roles)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRealmRoleToGroup indicates an expected call of AddRealmRoleToGroup.
func (mr *MockKeycloakClientMockRecorder) AddRealmRoleToGroup(ctx, token, realm, groupID, roles any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRealmRoleToGroup", reflect.TypeOf((*MockKeycloakClient)(nil).AddRealmRoleToGroup), ctx, token, realm, groupID, roles)
}

// AddRealmRoleToUser mocks base method.
func (m *MockKeycloakClient) AddRealmRoleToUser(ctx context.Context, token, realm, userID string, roles []gocloak.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRealmRoleToUser", ctx, token, realm, userID, roles)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRealmRoleToUser indicates an expected call of AddRealmRoleToUser.
func (mr *MockKeycloakClientMockRecorder) AddRealmRoleToUser(ctx, token, realm, userID, roles any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRealmRoleToUser", reflect.TypeOf((*MockKeycloakClient)(nil).AddRealmRoleToUser), ctx, token, realm, userID, roles)
}

// AddUserToGroup mocks base method.
func (m *MockKeycloakClient) AddUserToGroup(ctx context.Context, token, realm, userID, groupID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserToGroup", ctx, token, realm, userID, groupID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUserToGroup indicates an expected call of AddUserToGroup.
func (mr *MockKeycloakClientMockRecorder) AddUserToGroup(ctx, token, realm, userID, groupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserToGroup", reflect.TypeOf((*MockKeycloakClient)(nil).AddUserToGroup), ctx, token, realm, userID, groupID)
}

// ClearKeysCache mocks base method.
func (m *MockKeycloakClient) ClearKeysCache(ctx context.Context, token, realm string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearKeysCache", ctx, token, realm)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearKeysCache indicates an expected call of ClearKeysCache.
func (mr *MockKeycloakClientMockRecorder) ClearKeysCache(ctx, token, realm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearKeysCache", reflect.TypeOf((*MockKeycloakClient)(nil).ClearKeysCache), ctx, token, realm)
}

// ClearRealmCache mocks base method.
func (m *MockKeycloakClient) ClearRealmCache(ctx context.Context, token, realm string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearRealmCache", ctx, token, realm)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearRealmCache indicates an expected call of ClearRealmCache.
func (mr *MockKeycloakClientMockRecorder) ClearRealmCache(ctx, token, realm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearRealmCache", reflect.TypeOf((*MockKeycloakClient)(nil).ClearRealmCache), ctx, token, realm)
}

// ClearUserCache mocks base method.
func (m *MockKeycloakClient) ClearUserCache(ctx context.Context, token, realm string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearUserCache", ctx, token, realm)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearUserCache indicates an expected call of ClearUserCache.
func (mr *MockKeycloakClientMockRecorder) ClearUserCache(ctx, token, realm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearUserCache", reflect.TypeOf((*MockKeycloakClient)(nil).ClearUserCache), ctx, token, realm)
}

// CreateAuthenticationFlow mocks base method.
func (m *MockKeycloakClient) CreateAuthenticationFlow(ctx context.Context, token, realm string, flow gocloak.AuthenticationFlowRepresentation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAuthenticationFlow", ctx, token, realm, flow)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAuthenticationFlow indicates an expected call of CreateAuthenticationFlow.
func (mr *MockKeycloakClientMockRecorder) CreateAuthenticationFlow(ctx, token, realm, flow any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAuthenticationFlow", reflect.TypeOf((*MockKeycloakClient)(nil).CreateAuthenticationFlow), ctx, token, realm, flow)
}

// CreateChildGroup mocks base method.
func (m *MockKeycloakClient) CreateChildGroup(ctx context.Context, token, realm, groupID string, group gocloak.Group) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChildGroup", ctx, token, realm, groupID, group)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChildGroup indicates an expected call of CreateChildGroup.
func (mr *MockKeycloakClientMockRecorder) CreateChildGroup(ctx, token, realm, groupID, group any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChildGroup", reflect.TypeOf((*MockKeycloakClient)(nil).CreateChildGroup), ctx, token, realm, groupID, group)
}

// CreateClient mocks base method.
func (m *MockKeycloakClient) CreateClient(ctx context.Context, accessToken, realm string, newClient gocloak.Client) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClient", ctx, accessToken, realm, newClient)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClient indicates an expected call of CreateClient.
func (mr *MockKeycloakClientMockRecorder) CreateClient(ctx, accessToken, realm, newClient any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClient", reflect.TypeOf((*MockKeycloakClient)(nil).CreateClient), ctx, accessToken, realm, newClient)
}

// CreateClientProtocolMapper mocks base method.
func (m *MockKeycloakClient) CreateClientProtocolMapper(ctx context.Context, token, realm, idOfClient string, mapper gocloak.ProtocolMapperRepresentation) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClientProtocolMapper", ctx, token, realm, idOfClient, mapper)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClientProtocolMapper indicates an expected call of CreateClientProtocolMapper.
func (mr *MockKeycloakClientMockRecorder) CreateClientProtocolMapper(ctx, token, realm, idOfClient, mapper any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClientProtocolMapper", reflect.TypeOf((*MockKeycloakClient)(nil).CreateClientProtocolMapper), ctx, token, realm, idOfClient, mapper)
}

// CreateClientRole mocks base method.
func (m *MockKeycloakClient) CreateClientRole(ctx context.Context, accessToken, realm, idOfClient string, role gocloak.Role) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClientRole", ctx, accessToken, realm, idOfClient, role)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClientRole indicates an expected call of CreateClientRole.
func (mr *MockKeycloakClientMockRecorder) CreateClientRole(ctx, accessToken, realm, idOfClient, role any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClientRole", reflect.TypeOf((*MockKeycloakClient)(nil).CreateClientRole), ctx, accessToken, realm, idOfClient, role)
}

// CreateClientScope mocks base method.
func (m *MockKeycloakClient) CreateClientScope(ctx context.Context, accessToken, realm string, scope gocloak.ClientScope) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClientScope", ctx, accessToken, realm, scope)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClientScope indicates an expected call of CreateClientScope.
func (mr *MockKeycloakClientMockRecorder) CreateClientScope(ctx, accessToken, realm, scope any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClientScope", reflect.TypeOf((*MockKeycloakClient)(nil).CreateClientScope), ctx, accessToken, realm, scope)
}

// CreateClientScopeMappingsClientRoles mocks base method.
func (m *MockKeycloakClient) CreateClientScopeMappingsClientRoles(ctx context.Context, token, realm, idOfClient, idOfSelectedClient string, roles []gocloak.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClientScopeMappingsClientRoles", ctx, token, realm, idOfClient, idOfSelectedClient, roles)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateClientScopeMappingsClientRoles indicates an expected call of CreateClientScopeMappingsClientRoles.
func (mr *MockKeycloakClientMockRecorder) CreateClientScopeMappingsClientRoles(ctx, token, realm, idOfClient, idOfSelectedClient, roles any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClientScopeMappingsClientRoles", reflect.TypeOf((*MockKeycloakClient)(nil).CreateClientScopeMappingsClientRoles), ctx, token, realm, idOfClient, idOfSelectedClient, roles)
}

// CreateClientScopeMappingsRealmRoles mocks base method.
func (m *MockKeycloakClient) CreateClientScopeMappingsRealmRoles(ctx context.Context, token, realm, idOfClient string, roles []gocloak.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClientScopeMappingsRealmRoles", ctx, token, realm, idOfClient, roles)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateClientScopeMappingsRealmRoles indicates an expected call of CreateClientScopeMappingsRealmRoles.
func (mr *MockKeycloakClientMockRecorder) CreateClientScopeMappingsRealmRoles(ctx, token, realm, idOfClient, roles any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClientScopeMappingsRealmRoles", reflect.TypeOf((*MockKeycloakClient)(nil).CreateClientScopeMappingsRealmRoles), ctx, token, realm, idOfClient, roles)
}

// CreateClientScopesScopeMappingsClientRoles mocks base method.
func (m *MockKeycloakClient) CreateClientScopesScopeMappingsClientRoles(ctx context.Context, token, realm, idOfClientScope, idOfClient string, roles []gocloak.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClientScopesScopeMappingsClientRoles", ctx, token, realm, idOfClientScope, idOfClient, roles)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateClientScopesScopeMappingsClientRoles indicates an expected call of CreateClientScopesScopeMappingsClientRoles.
func (mr *MockKeycloakClientMockRecorder) CreateClientScopesScopeMappingsClientRoles(ctx, token, realm, idOfClientScope, idOfClient, roles any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClientScopesScopeMappingsClientRoles", reflect.TypeOf((*MockKeycloakClient)(nil).CreateClientScopesScopeMappingsClientRoles), ctx, token, realm, idOfClientScope, idOfClient, roles)
}

// CreateClientScopesScopeMappingsRealmRoles mocks base method.
func (m *MockKeycloakClient) CreateClientScopesScopeMappingsRealmRoles(ctx context.Context, token, realm, idOfCLientScope string, roles []gocloak.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClientScopesScopeMappingsRealmRoles", ctx, token, realm, idOfCLientScope, roles)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateClientScopesScopeMappingsRealmRoles indicates an expected call of CreateClientScopesScopeMappingsRealmRoles.
func (mr *MockKeycloakClientMockRecorder) CreateClientScopesScopeMappingsRealmRoles(ctx, token, realm, idOfCLientScope, roles any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClientScopesScopeMappingsRealmRoles", reflect.TypeOf((*MockKeycloakClient)(nil).CreateClientScopesScopeMappingsRealmRoles), ctx, token, realm, idOfCLientScope, roles)
}

// CreateComponent mocks base method.
func (m *MockKeycloakClient) CreateComponent(ctx context.Context, accessToken, realm string, component gocloak.Component) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComponent", ctx, accessToken, realm, component)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateComponent indicates an expected call of CreateComponent.
func (mr *MockKeycloakClientMockRecorder) CreateComponent(ctx, accessToken, realm, component any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComponent", reflect.TypeOf((*MockKeycloakClient)(nil).CreateComponent), ctx, accessToken, realm, component)
}

// CreateGroup mocks base method.
func (m *MockKeycloakClient) CreateGroup(ctx context.Context, accessToken, realm string, group gocloak.Group) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGroup", ctx, accessToken, realm, group)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGroup indicates an expected call of CreateGroup.
func (mr *MockKeycloakClientMockRecorder) CreateGroup(ctx, accessToken, realm, group any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroup", reflect.TypeOf((*MockKeycloakClient)(nil).CreateGroup), ctx, accessToken, realm, group)
}

// CreateIdentityProvider mocks base method.
func (m *MockKeycloakClient) CreateIdentityProvider(ctx context.Context, token, realm string, providerRep gocloak.IdentityProviderRepresentation) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIdentityProvider", ctx, token, realm, providerRep)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIdentityProvider indicates an expected call of CreateIdentityProvider.
func (mr *MockKeycloakClientMockRecorder) CreateIdentityProvider(ctx, token, realm, providerRep any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIdentityProvider", reflect.TypeOf((*MockKeycloakClient)(nil).CreateIdentityProvider), ctx, token, realm, providerRep)
}

// CreateIdentityProviderMapper mocks base method.
func (m *MockKeycloakClient) CreateIdentityProviderMapper(ctx context.Context, token, realm, alias string, mapper gocloak.IdentityProviderMapper) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIdentityProviderMapper", ctx, token, realm, alias, mapper)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIdentityProviderMapper indicates an expected call of CreateIdentityProviderMapper.
func (mr *MockKeycloakClientMockRecorder) CreateIdentityProviderMapper(ctx, token, realm, alias, mapper any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIdentityProviderMapper", reflect.TypeOf((*MockKeycloakClient)(nil).CreateIdentityProviderMapper), ctx, token, realm, alias, mapper)
}

// CreatePermission mocks base method.
func (m *MockKeycloakClient) CreatePermission(ctx context.Context, token, realm, idOfClient string, permission gocloak.PermissionRepresentation) (*gocloak.PermissionRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePermission", ctx, token, realm, idOfClient, permission)
	ret0, _ := ret[0].(*gocloak.PermissionRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePermission indicates an expected call of CreatePermission.
func (mr *MockKeycloakClientMockRecorder) CreatePermission(ctx, token, realm, idOfClient, permission any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePermission", reflect.TypeOf((*MockKeycloakClient)(nil).CreatePermission), ctx, token, realm, idOfClient, permission)
}

// CreatePermissionTicket mocks base method.
func (m *MockKeycloakClient) CreatePermissionTicket(ctx context.Context, token, realm string, permissions []gocloak.CreatePermissionTicketParams) (*gocloak.PermissionTicketResponseRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePermissionTicket", ctx, token, realm, permissions)
	ret0, _ := ret[0].(*gocloak.PermissionTicketResponseRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePermissionTicket indicates an expected call of CreatePermissionTicket.
func (mr *MockKeycloakClientMockRecorder) CreatePermissionTicket(ctx, token, realm, permissions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePermissionTicket", reflect.TypeOf((*MockKeycloakClient)(nil).CreatePermissionTicket), ctx, token, realm, permissions)
}

// CreatePolicy mocks base method.
func (m *MockKeycloakClient) CreatePolicy(ctx context.Context, token, realm, idOfClient string, policy gocloak.PolicyRepresentation) (*gocloak.PolicyRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePolicy", ctx, token, realm, idOfClient, policy)
	ret0, _ := ret[0].(*gocloak.PolicyRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePolicy indicates an expected call of CreatePolicy.
func (mr *MockKeycloakClientMockRecorder) CreatePolicy(ctx, token, realm, idOfClient, policy any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePolicy", reflect.TypeOf((*MockKeycloakClient)(nil).CreatePolicy), ctx, token, realm, idOfClient, policy)
}

// CreateRealm mocks base method.
func (m *MockKeycloakClient) CreateRealm(ctx context.Context, token string, realm gocloak.RealmRepresentation) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRealm", ctx, token, realm)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRealm indicates an expected call of CreateRealm.
func (mr *MockKeycloakClientMockRecorder) CreateRealm(ctx, token, realm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRealm", reflect.TypeOf((*MockKeycloakClient)(nil).CreateRealm), ctx, token, realm)
}

// CreateRealmRole mocks base method.
func (m *MockKeycloakClient) CreateRealmRole(ctx context.Context, token, realm string, role gocloak.Role) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRealmRole", ctx, token, realm, role)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRealmRole indicates an expected call of CreateRealmRole.
func (mr *MockKeycloakClientMockRecorder) CreateRealmRole(ctx, token, realm, role any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRealmRole", reflect.TypeOf((*MockKeycloakClient)(nil).CreateRealmRole), ctx, token, realm, role)
}

// CreateResource mocks base method.
func (m *MockKeycloakClient) CreateResource(ctx context.Context, token, realm, idOfClient string, resource gocloak.ResourceRepresentation) (*gocloak.ResourceRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateResource", ctx, token, realm, idOfClient, resource)
	ret0, _ := ret[0].(*gocloak.ResourceRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateResource indicates an expected call of CreateResource.
func (mr *MockKeycloakClientMockRecorder) CreateResource(ctx, token, realm, idOfClient, resource any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateResource", reflect.TypeOf((*MockKeycloakClient)(nil).CreateResource), ctx, token, realm, idOfClient, resource)
}

// CreateResourceClient mocks base method.
func (m *MockKeycloakClient) CreateResourceClient(ctx context.Context, token, realm string, resource gocloak.ResourceRepresentation) (*gocloak.ResourceRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateResourceClient", ctx, token, realm, resource)
	ret0, _ := ret[0].(*gocloak.ResourceRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateResourceClient indicates an expected call of CreateResourceClient.
func (mr *MockKeycloakClientMockRecorder) CreateResourceClient(ctx, token, realm, resource any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateResourceClient", reflect.TypeOf((*MockKeycloakClient)(nil).CreateResourceClient), ctx, token, realm, resource)
}

// CreateResourcePolicy mocks base method.
func (m *MockKeycloakClient) CreateResourcePolicy(ctx context.Context, token, realm, resourceID string, policy gocloak.ResourcePolicyRepresentation) (*gocloak.ResourcePolicyRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateResourcePolicy", ctx, token, realm, resourceID, policy)
	ret0, _ := ret[0].(*gocloak.ResourcePolicyRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateResourcePolicy indicates an expected call of CreateResourcePolicy.
func (mr *MockKeycloakClientMockRecorder) CreateResourcePolicy(ctx, token, realm, resourceID, policy any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateResourcePolicy", reflect.TypeOf((*MockKeycloakClient)(nil).CreateResourcePolicy), ctx, token, realm, resourceID, policy)
}

// CreateScope mocks base method.
func (m *MockKeycloakClient) CreateScope(ctx context.Context, token, realm, idOfClient string, scope gocloak.ScopeRepresentation) (*gocloak.ScopeRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateScope", ctx, token, realm, idOfClient, scope)
	ret0, _ := ret[0].(*gocloak.ScopeRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateScope indicates an expected call of CreateScope.
func (mr *MockKeycloakClientMockRecorder) CreateScope(ctx, token, realm, idOfClient, scope any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateScope", reflect.TypeOf((*MockKeycloakClient)(nil).CreateScope), ctx, token, realm, idOfClient, scope)
}

// CreateUser mocks base method.
func (m *MockKeycloakClient) CreateUser(ctx context.Context, token, realm string, user gocloak.User) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, token, realm, user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockKeycloakClientMockRecorder) CreateUser(ctx, token, realm, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockKeycloakClient)(nil).CreateUser), ctx, token, realm, user)
}

// CreateUserFederatedIdentity mocks base method.
func (m *MockKeycloakClient) CreateUserFederatedIdentity(ctx context.Context, token, realm, userID, providerID string, federatedIdentityRep gocloak.FederatedIdentityRepresentation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserFederatedIdentity", ctx, token, realm, userID, providerID, federatedIdentityRep)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUserFederatedIdentity indicates an expected call of CreateUserFederatedIdentity.
func (mr *MockKeycloakClientMockRecorder) CreateUserFederatedIdentity(ctx, token, realm, userID, providerID, federatedIdentityRep any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserFederatedIdentity", reflect.TypeOf((*MockKeycloakClient)(nil).CreateUserFederatedIdentity), ctx, token, realm, userID, providerID, federatedIdentityRep)
}

// DecodeAccessToken mocks base method.
func (m *MockKeycloakClient) DecodeAccessToken(ctx context.Context, accessToken, realm string) (*jwt.Token, *jwt.MapClaims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodeAccessToken", ctx, accessToken, realm)
	ret0, _ := ret[0].(*jwt.Token)
	ret1, _ := ret[1].(*jwt.MapClaims)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DecodeAccessToken indicates an expected call of DecodeAccessToken.
func (mr *MockKeycloakClientMockRecorder) DecodeAccessToken(ctx, accessToken, realm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeAccessToken", reflect.TypeOf((*MockKeycloakClient)(nil).DecodeAccessToken), ctx, accessToken, realm)
}

// DecodeAccessTokenCustomClaims mocks base method.
func (m *MockKeycloakClient) DecodeAccessTokenCustomClaims(ctx context.Context, accessToken, realm string, claims jwt.Claims) (*jwt.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodeAccessTokenCustomClaims", ctx, accessToken, realm, claims)
	ret0, _ := ret[0].(*jwt.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecodeAccessTokenCustomClaims indicates an expected call of DecodeAccessTokenCustomClaims.
func (mr *MockKeycloakClientMockRecorder) DecodeAccessTokenCustomClaims(ctx, accessToken, realm, claims any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeAccessTokenCustomClaims", reflect.TypeOf((*MockKeycloakClient)(nil).DecodeAccessTokenCustomClaims), ctx, accessToken, realm, claims)
}

// DeleteAuthenticationFlow mocks base method.
func (m *MockKeycloakClient) DeleteAuthenticationFlow(ctx context.Context, token, realm, flowID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAuthenticationFlow", ctx, token, realm, flowID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAuthenticationFlow indicates an expected call of DeleteAuthenticationFlow.
func (mr *MockKeycloakClientMockRecorder) DeleteAuthenticationFlow(ctx, token, realm, flowID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAuthenticationFlow", reflect.TypeOf((*MockKeycloakClient)(nil).DeleteAuthenticationFlow), ctx, token, realm, flowID)
}

// DeleteClient mocks base method.
func (m *MockKeycloakClient) DeleteClient(ctx context.Context, accessToken, realm, idOfClient string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClient", ctx, accessToken, realm, idOfClient)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClient indicates an expected call of DeleteClient.
func (mr *MockKeycloakClientMockRecorder) DeleteClient(ctx, accessToken, realm, idOfClient any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClient", reflect.TypeOf((*MockKeycloakClient)(nil).DeleteClient), ctx, accessToken, realm, idOfClient)
}

// DeleteClientProtocolMapper mocks base method.
func (m *MockKeycloakClient) DeleteClientProtocolMapper(ctx context.Context, token, realm, idOfClient, mapperID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClientProtocolMapper", ctx, token, realm, idOfClient, mapperID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClientProtocolMapper indicates an expected call of DeleteClientProtocolMapper.
func (mr *MockKeycloakClientMockRecorder) DeleteClientProtocolMapper(ctx, token, realm, idOfClient, mapperID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClientProtocolMapper", reflect.TypeOf((*MockKeycloakClient)(nil).DeleteClientProtocolMapper), ctx, token, realm, idOfClient, mapperID)
}

// DeleteClientRole mocks base method.
func (m *MockKeycloakClient) DeleteClientRole(ctx context.Context, accessToken, realm, idOfClient, roleName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClientRole", ctx, accessToken, realm, idOfClient, roleName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClientRole indicates an expected call of DeleteClientRole.
func (mr *MockKeycloakClientMockRecorder) DeleteClientRole(ctx, accessToken, realm, idOfClient, roleName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClientRole", reflect.TypeOf((*MockKeycloakClient)(nil).DeleteClientRole), ctx, accessToken, realm, idOfClient, roleName)
}

// DeleteClientRoleComposite mocks base method.
func (m *MockKeycloakClient) DeleteClientRoleComposite(ctx context.Context, token, realm, roleID string, roles []gocloak.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClientRoleComposite", ctx, token, realm, roleID, roles)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClientRoleComposite indicates an expected call of DeleteClientRoleComposite.
func (mr *MockKeycloakClientMockRecorder) DeleteClientRoleComposite(ctx, token, realm, roleID, roles any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClientRoleComposite", reflect.TypeOf((*MockKeycloakClient)(nil).DeleteClientRoleComposite), ctx, token, realm, roleID, roles)
}

// DeleteClientRoleFromGroup mocks base method.
func (m *MockKeycloakClient) DeleteClientRoleFromGroup(ctx context.Context, token, realm, idOfClient, groupID string, roles []gocloak.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClientRoleFromGroup", ctx, token, realm, idOfClient, groupID, roles)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClientRoleFromGroup indicates an expected call of DeleteClientRoleFromGroup.
func (mr *MockKeycloakClientMockRecorder) DeleteClientRoleFromGroup(ctx, token, realm, idOfClient, groupID, roles any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClientRoleFromGroup", reflect.TypeOf((*MockKeycloakClient)(nil).DeleteClientRoleFromGroup), ctx, token, realm, idOfClient, groupID, roles)
}

// DeleteClientRoleFromUser mocks base method.
func (m *MockKeycloakClient) DeleteClientRoleFromUser(ctx context.Context, token, realm, idOfClient, userID string, roles []gocloak.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClientRoleFromUser", ctx, token, realm, idOfClient, userID, roles)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClientRoleFromUser indicates an expected call of DeleteClientRoleFromUser.
func (mr *MockKeycloakClientMockRecorder) DeleteClientRoleFromUser(ctx, token, realm, idOfClient, userID, roles any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClientRoleFromUser", reflect.TypeOf((*MockKeycloakClient)(nil).DeleteClientRoleFromUser), ctx, token, realm, idOfClient, userID, roles)
}

// DeleteClientScope mocks base method.
func (m *MockKeycloakClient) DeleteClientScope(ctx context.Context, accessToken, realm, scopeID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClientScope", ctx, accessToken, realm, scopeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClientScope indicates an expected call of DeleteClientScope.
func (mr *MockKeycloakClientMockRecorder) DeleteClientScope(ctx, accessToken, realm, scopeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClientScope", reflect.TypeOf((*MockKeycloakClient)(nil).DeleteClientScope), ctx, accessToken, realm, scopeID)
}

// DeleteClientScopeMappingsClientRoles mocks base method.
func (m *MockKeycloakClient) DeleteClientScopeMappingsClientRoles(ctx context.Context, token, realm, idOfClient, idOfSelectedClient string, roles []gocloak.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClientScopeMappingsClientRoles", ctx, token, realm, idOfClient, idOfSelectedClient, roles)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClientScopeMappingsClientRoles indicates an expected call of DeleteClientScopeMappingsClientRoles.
func (mr *MockKeycloakClientMockRecorder) DeleteClientScopeMappingsClientRoles(ctx, token, realm, idOfClient, idOfSelectedClient, roles any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClientScopeMappingsClientRoles", reflect.TypeOf((*MockKeycloakClient)(nil).DeleteClientScopeMappingsClientRoles), ctx, token, realm, idOfClient, idOfSelectedClient, roles)
}

// DeleteClientScopeMappingsRealmRoles mocks base method.
func (m *MockKeycloakClient) DeleteClientScopeMappingsRealmRoles(ctx context.Context, token, realm, idOfClient string, roles []gocloak.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClientScopeMappingsRealmRoles", ctx, token, realm, idOfClient, roles)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClientScopeMappingsRealmRoles indicates an expected call of DeleteClientScopeMappingsRealmRoles.
func (mr *MockKeycloakClientMockRecorder) DeleteClientScopeMappingsRealmRoles(ctx, token, realm, idOfClient, roles any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClientScopeMappingsRealmRoles", reflect.TypeOf((*MockKeycloakClient)(nil).DeleteClientScopeMappingsRealmRoles), ctx, token, realm, idOfClient, roles)
}

// DeleteClientScopesScopeMappingsClientRoles mocks base method.
func (m *MockKeycloakClient) DeleteClientScopesScopeMappingsClientRoles(ctx context.Context, token, realm, idOfClientScope, ifOfClient string, roles []gocloak.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClientScopesScopeMappingsClientRoles", ctx, token, realm, idOfClientScope, ifOfClient, roles)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClientScopesScopeMappingsClientRoles indicates an expected call of DeleteClientScopesScopeMappingsClientRoles.
func (mr *MockKeycloakClientMockRecorder) DeleteClientScopesScopeMappingsClientRoles(ctx, token, realm, idOfClientScope, ifOfClient, roles any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClientScopesScopeMappingsClientRoles", reflect.TypeOf((*MockKeycloakClient)(nil).DeleteClientScopesScopeMappingsClientRoles), ctx, token, realm, idOfClientScope, ifOfClient, roles)
}

// DeleteClientScopesScopeMappingsRealmRoles mocks base method.
func (m *MockKeycloakClient) DeleteClientScopesScopeMappingsRealmRoles(ctx context.Context, token, realm, idOfCLientScope string, roles []gocloak.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClientScopesScopeMappingsRealmRoles", ctx, token, realm, idOfCLientScope, roles)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClientScopesScopeMappingsRealmRoles indicates an expected call of DeleteClientScopesScopeMappingsRealmRoles.
func (mr *MockKeycloakClientMockRecorder) DeleteClientScopesScopeMappingsRealmRoles(ctx, token, realm, idOfCLientScope, roles any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClientScopesScopeMappingsRealmRoles", reflect.TypeOf((*MockKeycloakClient)(nil).DeleteClientScopesScopeMappingsRealmRoles), ctx, token, realm, idOfCLientScope, roles)
}

// DeleteComponent mocks base method.
func (m *MockKeycloakClient) DeleteComponent(ctx context.Context, accessToken, realm, componentID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComponent", ctx, accessToken, realm, componentID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteComponent indicates an expected call of DeleteComponent.
func (mr *MockKeycloakClientMockRecorder) DeleteComponent(ctx, accessToken, realm, componentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComponent", reflect.TypeOf((*MockKeycloakClient)(nil).DeleteComponent), ctx, accessToken, realm, componentID)
}

// DeleteCredentials mocks base method.
func (m *MockKeycloakClient) DeleteCredentials(ctx context.Context, token, realm, UserID, CredentialID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCredentials", ctx, token, realm, UserID, CredentialID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCredentials indicates an expected call of DeleteCredentials.
func (mr *MockKeycloakClientMockRecorder) DeleteCredentials(ctx, token, realm, UserID, CredentialID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCredentials", reflect.TypeOf((*MockKeycloakClient)(nil).DeleteCredentials), ctx, token, realm, UserID, CredentialID)
}

// DeleteGroup mocks base method.
func (m *MockKeycloakClient) DeleteGroup(ctx context.Context, accessToken, realm, groupID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGroup", ctx, accessToken, realm, groupID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGroup indicates an expected call of DeleteGroup.
func (mr *MockKeycloakClientMockRecorder) DeleteGroup(ctx, accessToken, realm, groupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroup", reflect.TypeOf((*MockKeycloakClient)(nil).DeleteGroup), ctx, accessToken, realm, groupID)
}

// DeleteIdentityProvider mocks base method.
func (m *MockKeycloakClient) DeleteIdentityProvider(ctx context.Context, token, realm, alias string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIdentityProvider", ctx, token, realm, alias)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteIdentityProvider indicates an expected call of DeleteIdentityProvider.
func (mr *MockKeycloakClientMockRecorder) DeleteIdentityProvider(ctx, token, realm, alias any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIdentityProvider", reflect.TypeOf((*MockKeycloakClient)(nil).DeleteIdentityProvider), ctx, token, realm, alias)
}

// DeletePermission mocks base method.
func (m *MockKeycloakClient) DeletePermission(ctx context.Context, token, realm, idOfClient, permissionID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePermission", ctx, token, realm, idOfClient, permissionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePermission indicates an expected call of DeletePermission.
func (mr *MockKeycloakClientMockRecorder) DeletePermission(ctx, token, realm, idOfClient, permissionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePermission", reflect.TypeOf((*MockKeycloakClient)(nil).DeletePermission), ctx, token, realm, idOfClient, permissionID)
}

// DeletePolicy mocks base method.
func (m *MockKeycloakClient) DeletePolicy(ctx context.Context, token, realm, idOfClient, policyID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePolicy", ctx, token, realm, idOfClient, policyID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePolicy indicates an expected call of DeletePolicy.
func (mr *MockKeycloakClientMockRecorder) DeletePolicy(ctx, token, realm, idOfClient, policyID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePolicy", reflect.TypeOf((*MockKeycloakClient)(nil).DeletePolicy), ctx, token, realm, idOfClient, policyID)
}

// DeleteRealm mocks base method.
func (m *MockKeycloakClient) DeleteRealm(ctx context.Context, token, realm string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRealm", ctx, token, realm)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRealm indicates an expected call of DeleteRealm.
func (mr *MockKeycloakClientMockRecorder) DeleteRealm(ctx, token, realm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRealm", reflect.TypeOf((*MockKeycloakClient)(nil).DeleteRealm), ctx, token, realm)
}

// DeleteRealmRole mocks base method.
func (m *MockKeycloakClient) DeleteRealmRole(ctx context.Context, token, realm, roleName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRealmRole", ctx, token, realm, roleName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRealmRole indicates an expected call of DeleteRealmRole.
func (mr *MockKeycloakClientMockRecorder) DeleteRealmRole(ctx, token, realm, roleName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRealmRole", reflect.TypeOf((*MockKeycloakClient)(nil).DeleteRealmRole), ctx, token, realm, roleName)
}

// DeleteRealmRoleComposite mocks base method.
func (m *MockKeycloakClient) DeleteRealmRoleComposite(ctx context.Context, token, realm, roleName string, roles []gocloak.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRealmRoleComposite", ctx, token, realm, roleName, roles)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRealmRoleComposite indicates an expected call of DeleteRealmRoleComposite.
func (mr *MockKeycloakClientMockRecorder) DeleteRealmRoleComposite(ctx, token, realm, roleName, roles any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRealmRoleComposite", reflect.TypeOf((*MockKeycloakClient)(nil).DeleteRealmRoleComposite), ctx, token, realm, roleName, roles)
}

// DeleteRealmRoleFromGroup mocks base method.
func (m *MockKeycloakClient) DeleteRealmRoleFromGroup(ctx context.Context, token, realm, groupID string, roles []gocloak.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRealmRoleFromGroup", ctx, token, realm, groupID, roles)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRealmRoleFromGroup indicates an expected call of DeleteRealmRoleFromGroup.
func (mr *MockKeycloakClientMockRecorder) DeleteRealmRoleFromGroup(ctx, token, realm, groupID, roles any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRealmRoleFromGroup", reflect.TypeOf((*MockKeycloakClient)(nil).DeleteRealmRoleFromGroup), ctx, token, realm, groupID, roles)
}

// DeleteRealmRoleFromUser mocks base method.
func (m *MockKeycloakClient) DeleteRealmRoleFromUser(ctx context.Context, token, realm, userID string, roles []gocloak.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRealmRoleFromUser", ctx, token, realm, userID, roles)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRealmRoleFromUser indicates an expected call of DeleteRealmRoleFromUser.
func (mr *MockKeycloakClientMockRecorder) DeleteRealmRoleFromUser(ctx, token, realm, userID, roles any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRealmRoleFromUser", reflect.TypeOf((*MockKeycloakClient)(nil).DeleteRealmRoleFromUser), ctx, token, realm, userID, roles)
}

// DeleteResource mocks base method.
func (m *MockKeycloakClient) DeleteResource(ctx context.Context, token, realm, idOfClient, resourceID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResource", ctx, token, realm, idOfClient, resourceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteResource indicates an expected call of DeleteResource.
func (mr *MockKeycloakClientMockRecorder) DeleteResource(ctx, token, realm, idOfClient, resourceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResource", reflect.TypeOf((*MockKeycloakClient)(nil).DeleteResource), ctx, token, realm, idOfClient, resourceID)
}

// DeleteResourceClient mocks base method.
func (m *MockKeycloakClient) DeleteResourceClient(ctx context.Context, token, realm, resourceID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResourceClient", ctx, token, realm, resourceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteResourceClient indicates an expected call of DeleteResourceClient.
func (mr *MockKeycloakClientMockRecorder) DeleteResourceClient(ctx, token, realm, resourceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResourceClient", reflect.TypeOf((*MockKeycloakClient)(nil).DeleteResourceClient), ctx, token, realm, resourceID)
}

// DeleteResourcePolicy mocks base method.
func (m *MockKeycloakClient) DeleteResourcePolicy(ctx context.Context, token, realm, permissionID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResourcePolicy", ctx, token, realm, permissionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteResourcePolicy indicates an expected call of DeleteResourcePolicy.
func (mr *MockKeycloakClientMockRecorder) DeleteResourcePolicy(ctx, token, realm, permissionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResourcePolicy", reflect.TypeOf((*MockKeycloakClient)(nil).DeleteResourcePolicy), ctx, token, realm, permissionID)
}

// DeleteScope mocks base method.
func (m *MockKeycloakClient) DeleteScope(ctx context.Context, token, realm, idOfClient, scopeID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteScope", ctx, token, realm, idOfClient, scopeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteScope indicates an expected call of DeleteScope.
func (mr *MockKeycloakClientMockRecorder) DeleteScope(ctx, token, realm, idOfClient, scopeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteScope", reflect.TypeOf((*MockKeycloakClient)(nil).DeleteScope), ctx, token, realm, idOfClient, scopeID)
}

// DeleteUser mocks base method.
func (m *MockKeycloakClient) DeleteUser(ctx context.Context, accessToken, realm, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, accessToken, realm, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockKeycloakClientMockRecorder) DeleteUser(ctx, accessToken, realm, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockKeycloakClient)(nil).DeleteUser), ctx, accessToken, realm, userID)
}

// DeleteUserFederatedIdentity mocks base method.
func (m *MockKeycloakClient) DeleteUserFederatedIdentity(ctx context.Context, token, realm, userID, providerID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserFederatedIdentity", ctx, token, realm, userID, providerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserFederatedIdentity indicates an expected call of DeleteUserFederatedIdentity.
func (mr *MockKeycloakClientMockRecorder) DeleteUserFederatedIdentity(ctx, token, realm, userID, providerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserFederatedIdentity", reflect.TypeOf((*MockKeycloakClient)(nil).DeleteUserFederatedIdentity), ctx, token, realm, userID, providerID)
}

// DeleteUserFromGroup mocks base method.
func (m *MockKeycloakClient) DeleteUserFromGroup(ctx context.Context, token, realm, userID, groupID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserFromGroup", ctx, token, realm, userID, groupID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserFromGroup indicates an expected call of DeleteUserFromGroup.
func (mr *MockKeycloakClientMockRecorder) DeleteUserFromGroup(ctx, token, realm, userID, groupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserFromGroup", reflect.TypeOf((*MockKeycloakClient)(nil).DeleteUserFromGroup), ctx, token, realm, userID, groupID)
}

// DeleteUserPermission mocks base method.
func (m *MockKeycloakClient) DeleteUserPermission(ctx context.Context, token, realm, ticketID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserPermission", ctx, token, realm, ticketID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserPermission indicates an expected call of DeleteUserPermission.
func (mr *MockKeycloakClientMockRecorder) DeleteUserPermission(ctx, token, realm, ticketID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserPermission", reflect.TypeOf((*MockKeycloakClient)(nil).DeleteUserPermission), ctx, token, realm, ticketID)
}

// DisableAllCredentialsByType mocks base method.
func (m *MockKeycloakClient) DisableAllCredentialsByType(ctx context.Context, token, realm, userID string, types []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableAllCredentialsByType", ctx, token, realm, userID, types)
	ret0, _ := ret[0].(error)
	return ret0
}

// DisableAllCredentialsByType indicates an expected call of DisableAllCredentialsByType.
func (mr *MockKeycloakClientMockRecorder) DisableAllCredentialsByType(ctx, token, realm, userID, types any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableAllCredentialsByType", reflect.TypeOf((*MockKeycloakClient)(nil).DisableAllCredentialsByType), ctx, token, realm, userID, types)
}

// ExecuteActionsEmail mocks base method.
func (m *MockKeycloakClient) ExecuteActionsEmail(ctx context.Context, token, realm string, params gocloak.ExecuteActionsEmail) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteActionsEmail", ctx, token, realm, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecuteActionsEmail indicates an expected call of ExecuteActionsEmail.
func (mr *MockKeycloakClientMockRecorder) ExecuteActionsEmail(ctx, token, realm, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteActionsEmail", reflect.TypeOf((*MockKeycloakClient)(nil).ExecuteActionsEmail), ctx, token, realm, params)
}

// GetAuthenticationFlow mocks base method.
func (m *MockKeycloakClient) GetAuthenticationFlow(ctx context.Context, token, realm, authenticationFlowID string) (*gocloak.AuthenticationFlowRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthenticationFlow", ctx, token, realm, authenticationFlowID)
	ret0, _ := ret[0].(*gocloak.AuthenticationFlowRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthenticationFlow indicates an expected call of GetAuthenticationFlow.
func (mr *MockKeycloakClientMockRecorder) GetAuthenticationFlow(ctx, token, realm, authenticationFlowID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthenticationFlow", reflect.TypeOf((*MockKeycloakClient)(nil).GetAuthenticationFlow), ctx, token, realm, authenticationFlowID)
}

// GetAuthenticationFlows mocks base method.
func (m *MockKeycloakClient) GetAuthenticationFlows(ctx context.Context, token, realm string) ([]*gocloak.AuthenticationFlowRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthenticationFlows", ctx, token, realm)
	ret0, _ := ret[0].([]*gocloak.AuthenticationFlowRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthenticationFlows indicates an expected call of GetAuthenticationFlows.
func (mr *MockKeycloakClientMockRecorder) GetAuthenticationFlows(ctx, token, realm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthenticationFlows", reflect.TypeOf((*MockKeycloakClient)(nil).GetAuthenticationFlows), ctx, token, realm)
}

// GetAvailableClientRolesByGroupID mocks base method.
func (m *MockKeycloakClient) GetAvailableClientRolesByGroupID(ctx context.Context, token, realm, idOfClient, groupID string) ([]*gocloak.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailableClientRolesByGroupID", ctx, token, realm, idOfClient, groupID)
	ret0, _ := ret[0].([]*gocloak.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailableClientRolesByGroupID indicates an expected call of GetAvailableClientRolesByGroupID.
func (mr *MockKeycloakClientMockRecorder) GetAvailableClientRolesByGroupID(ctx, token, realm, idOfClient, groupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailableClientRolesByGroupID", reflect.TypeOf((*MockKeycloakClient)(nil).GetAvailableClientRolesByGroupID), ctx, token, realm, idOfClient, groupID)
}

// GetAvailableClientRolesByUserID mocks base method.
func (m *MockKeycloakClient) GetAvailableClientRolesByUserID(ctx context.Context, token, realm, idOfClient, userID string) ([]*gocloak.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailableClientRolesByUserID", ctx, token, realm, idOfClient, userID)
	ret0, _ := ret[0].([]*gocloak.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailableClientRolesByUserID indicates an expected call of GetAvailableClientRolesByUserID.
func (mr *MockKeycloakClientMockRecorder) GetAvailableClientRolesByUserID(ctx, token, realm, idOfClient, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailableClientRolesByUserID", reflect.TypeOf((*MockKeycloakClient)(nil).GetAvailableClientRolesByUserID), ctx, token, realm, idOfClient, userID)
}

// GetAvailableRealmRolesByGroupID mocks base method.
func (m *MockKeycloakClient) GetAvailableRealmRolesByGroupID(ctx context.Context, token, realm, groupID string) ([]*gocloak.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailableRealmRolesByGroupID", ctx, token, realm, groupID)
	ret0, _ := ret[0].([]*gocloak.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailableRealmRolesByGroupID indicates an expected call of GetAvailableRealmRolesByGroupID.
func (mr *MockKeycloakClientMockRecorder) GetAvailableRealmRolesByGroupID(ctx, token, realm, groupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailableRealmRolesByGroupID", reflect.TypeOf((*MockKeycloakClient)(nil).GetAvailableRealmRolesByGroupID), ctx, token, realm, groupID)
}

// GetAvailableRealmRolesByUserID mocks base method.
func (m *MockKeycloakClient) GetAvailableRealmRolesByUserID(ctx context.Context, token, realm, userID string) ([]*gocloak.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailableRealmRolesByUserID", ctx, token, realm, userID)
	ret0, _ := ret[0].([]*gocloak.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailableRealmRolesByUserID indicates an expected call of GetAvailableRealmRolesByUserID.
func (mr *MockKeycloakClientMockRecorder) GetAvailableRealmRolesByUserID(ctx, token, realm, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailableRealmRolesByUserID", reflect.TypeOf((*MockKeycloakClient)(nil).GetAvailableRealmRolesByUserID), ctx, token, realm, userID)
}

// GetCerts mocks base method.
func (m *MockKeycloakClient) GetCerts(ctx context.Context, realm string) (*gocloak.CertResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCerts", ctx, realm)
	ret0, _ := ret[0].(*gocloak.CertResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCerts indicates an expected call of GetCerts.
func (mr *MockKeycloakClientMockRecorder) GetCerts(ctx, realm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCerts", reflect.TypeOf((*MockKeycloakClient)(nil).GetCerts), ctx, realm)
}

// GetClient mocks base method.
func (m *MockKeycloakClient) GetClient(ctx context.Context, accessToken, realm, idOfClient string) (*gocloak.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClient", ctx, accessToken, realm, idOfClient)
	ret0, _ := ret[0].(*gocloak.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClient indicates an expected call of GetClient.
func (mr *MockKeycloakClientMockRecorder) GetClient(ctx, accessToken, realm, idOfClient any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClient", reflect.TypeOf((*MockKeycloakClient)(nil).GetClient), ctx, accessToken, realm, idOfClient)
}

// GetClientOfflineSessions mocks base method.
func (m *MockKeycloakClient) GetClientOfflineSessions(ctx context.Context, token, realm, idOfClient string) ([]*gocloak.UserSessionRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientOfflineSessions", ctx, token, realm, idOfClient)
	ret0, _ := ret[0].([]*gocloak.UserSessionRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientOfflineSessions indicates an expected call of GetClientOfflineSessions.
func (mr *MockKeycloakClientMockRecorder) GetClientOfflineSessions(ctx, token, realm, idOfClient any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientOfflineSessions", reflect.TypeOf((*MockKeycloakClient)(nil).GetClientOfflineSessions), ctx, token, realm, idOfClient)
}

// GetClientRole mocks base method.
func (m *MockKeycloakClient) GetClientRole(ctx context.Context, token, realm, idOfClient, roleName string) (*gocloak.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientRole", ctx, token, realm, idOfClient, roleName)
	ret0, _ := ret[0].(*gocloak.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientRole indicates an expected call of GetClientRole.
func (mr *MockKeycloakClientMockRecorder) GetClientRole(ctx, token, realm, idOfClient, roleName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientRole", reflect.TypeOf((*MockKeycloakClient)(nil).GetClientRole), ctx, token, realm, idOfClient, roleName)
}

// GetClientRoleByID mocks base method.
func (m *MockKeycloakClient) GetClientRoleByID(ctx context.Context, accessToken, realm, roleID string) (*gocloak.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientRoleByID", ctx, accessToken, realm, roleID)
	ret0, _ := ret[0].(*gocloak.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientRoleByID indicates an expected call of GetClientRoleByID.
func (mr *MockKeycloakClientMockRecorder) GetClientRoleByID(ctx, accessToken, realm, roleID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientRoleByID", reflect.TypeOf((*MockKeycloakClient)(nil).GetClientRoleByID), ctx, accessToken, realm, roleID)
}

// GetClientRoles mocks base method.
func (m *MockKeycloakClient) GetClientRoles(ctx context.Context, accessToken, realm, idOfClient string, params gocloak.GetRoleParams) ([]*gocloak.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientRoles", ctx, accessToken, realm, idOfClient, params)
	ret0, _ := ret[0].([]*gocloak.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientRoles indicates an expected call of GetClientRoles.
func (mr *MockKeycloakClientMockRecorder) GetClientRoles(ctx, accessToken, realm, idOfClient, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientRoles", reflect.TypeOf((*MockKeycloakClient)(nil).GetClientRoles), ctx, accessToken, realm, idOfClient, params)
}

// GetClientRolesByGroupID mocks base method.
func (m *MockKeycloakClient) GetClientRolesByGroupID(ctx context.Context, token, realm, idOfClient, groupID string) ([]*gocloak.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientRolesByGroupID", ctx, token, realm, idOfClient, groupID)
	ret0, _ := ret[0].([]*gocloak.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientRolesByGroupID indicates an expected call of GetClientRolesByGroupID.
func (mr *MockKeycloakClientMockRecorder) GetClientRolesByGroupID(ctx, token, realm, idOfClient, groupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientRolesByGroupID", reflect.TypeOf((*MockKeycloakClient)(nil).GetClientRolesByGroupID), ctx, token, realm, idOfClient, groupID)
}

// GetClientRolesByUserID mocks base method.
func (m *MockKeycloakClient) GetClientRolesByUserID(ctx context.Context, token, realm, idOfClient, userID string) ([]*gocloak.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientRolesByUserID", ctx, token, realm, idOfClient, userID)
	ret0, _ := ret[0].([]*gocloak.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientRolesByUserID indicates an expected call of GetClientRolesByUserID.
func (mr *MockKeycloakClientMockRecorder) GetClientRolesByUserID(ctx, token, realm, idOfClient, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientRolesByUserID", reflect.TypeOf((*MockKeycloakClient)(nil).GetClientRolesByUserID), ctx, token, realm, idOfClient, userID)
}

// GetClientScope mocks base method.
func (m *MockKeycloakClient) GetClientScope(ctx context.Context, token, realm, scopeID string) (*gocloak.ClientScope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientScope", ctx, token, realm, scopeID)
	ret0, _ := ret[0].(*gocloak.ClientScope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientScope indicates an expected call of GetClientScope.
func (mr *MockKeycloakClientMockRecorder) GetClientScope(ctx, token, realm, scopeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientScope", reflect.TypeOf((*MockKeycloakClient)(nil).GetClientScope), ctx, token, realm, scopeID)
}

// GetClientScopeMappings mocks base method.
func (m *MockKeycloakClient) GetClientScopeMappings(ctx context.Context, token, realm, idOfClient string) (*gocloak.MappingsRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientScopeMappings", ctx, token, realm, idOfClient)
	ret0, _ := ret[0].(*gocloak.MappingsRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientScopeMappings indicates an expected call of GetClientScopeMappings.
func (mr *MockKeycloakClientMockRecorder) GetClientScopeMappings(ctx, token, realm, idOfClient any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientScopeMappings", reflect.TypeOf((*MockKeycloakClient)(nil).GetClientScopeMappings), ctx, token, realm, idOfClient)
}

// GetClientScopeMappingsClientRoles mocks base method.
func (m *MockKeycloakClient) GetClientScopeMappingsClientRoles(ctx context.Context, token, realm, idOfClient, idOfSelectedClient string) ([]*gocloak.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientScopeMappingsClientRoles", ctx, token, realm, idOfClient, idOfSelectedClient)
	ret0, _ := ret[0].([]*gocloak.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientScopeMappingsClientRoles indicates an expected call of GetClientScopeMappingsClientRoles.
func (mr *MockKeycloakClientMockRecorder) GetClientScopeMappingsClientRoles(ctx, token, realm, idOfClient, idOfSelectedClient any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientScopeMappingsClientRoles", reflect.TypeOf((*MockKeycloakClient)(nil).GetClientScopeMappingsClientRoles), ctx, token, realm, idOfClient, idOfSelectedClient)
}

// GetClientScopeMappingsClientRolesAvailable mocks base method.
func (m *MockKeycloakClient) GetClientScopeMappingsClientRolesAvailable(ctx context.Context, token, realm, idOfClient, idOfSelectedClient string) ([]*gocloak.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientScopeMappingsClientRolesAvailable", ctx, token, realm, idOfClient, idOfSelectedClient)
	ret0, _ := ret[0].([]*gocloak.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientScopeMappingsClientRolesAvailable indicates an expected call of GetClientScopeMappingsClientRolesAvailable.
func (mr *MockKeycloakClientMockRecorder) GetClientScopeMappingsClientRolesAvailable(ctx, token, realm, idOfClient, idOfSelectedClient any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientScopeMappingsClientRolesAvailable", reflect.TypeOf((*MockKeycloakClient)(nil).GetClientScopeMappingsClientRolesAvailable), ctx, token, realm, idOfClient, idOfSelectedClient)
}

// GetClientScopeMappingsRealmRoles mocks base method.
func (m *MockKeycloakClient) GetClientScopeMappingsRealmRoles(ctx context.Context, token, realm, idOfClient string) ([]*gocloak.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientScopeMappingsRealmRoles", ctx, token, realm, idOfClient)
	ret0, _ := ret[0].([]*gocloak.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientScopeMappingsRealmRoles indicates an expected call of GetClientScopeMappingsRealmRoles.
func (mr *MockKeycloakClientMockRecorder) GetClientScopeMappingsRealmRoles(ctx, token, realm, idOfClient any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientScopeMappingsRealmRoles", reflect.TypeOf((*MockKeycloakClient)(nil).GetClientScopeMappingsRealmRoles), ctx, token, realm, idOfClient)
}

// GetClientScopeMappingsRealmRolesAvailable mocks base method.
func (m *MockKeycloakClient) GetClientScopeMappingsRealmRolesAvailable(ctx context.Context, token, realm, idOfClient string) ([]*gocloak.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientScopeMappingsRealmRolesAvailable", ctx, token, realm, idOfClient)
	ret0, _ := ret[0].([]*gocloak.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientScopeMappingsRealmRolesAvailable indicates an expected call of GetClientScopeMappingsRealmRolesAvailable.
func (mr *MockKeycloakClientMockRecorder) GetClientScopeMappingsRealmRolesAvailable(ctx, token, realm, idOfClient any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientScopeMappingsRealmRolesAvailable", reflect.TypeOf((*MockKeycloakClient)(nil).GetClientScopeMappingsRealmRolesAvailable), ctx, token, realm, idOfClient)
}

// GetClientScopes mocks base method.
func (m *MockKeycloakClient) GetClientScopes(ctx context.Context, token, realm string) ([]*gocloak.ClientScope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientScopes", ctx, token, realm)
	ret0, _ := ret[0].([]*gocloak.ClientScope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientScopes indicates an expected call of GetClientScopes.
func (mr *MockKeycloakClientMockRecorder) GetClientScopes(ctx, token, realm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientScopes", reflect.TypeOf((*MockKeycloakClient)(nil).GetClientScopes), ctx, token, realm)
}

// GetClientScopesScopeMappingsClientRoles mocks base method.
func (m *MockKeycloakClient) GetClientScopesScopeMappingsClientRoles(ctx context.Context, token, realm, idOfClientScope, idOfClient string) ([]*gocloak.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientScopesScopeMappingsClientRoles", ctx, token, realm, idOfClientScope, idOfClient)
	ret0, _ := ret[0].([]*gocloak.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientScopesScopeMappingsClientRoles indicates an expected call of GetClientScopesScopeMappingsClientRoles.
func (mr *MockKeycloakClientMockRecorder) GetClientScopesScopeMappingsClientRoles(ctx, token, realm, idOfClientScope, idOfClient any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientScopesScopeMappingsClientRoles", reflect.TypeOf((*MockKeycloakClient)(nil).GetClientScopesScopeMappingsClientRoles), ctx, token, realm, idOfClientScope, idOfClient)
}

// GetClientScopesScopeMappingsClientRolesAvailable mocks base method.
func (m *MockKeycloakClient) GetClientScopesScopeMappingsClientRolesAvailable(ctx context.Context, token, realm, idOfClientScope, idOfClient string) ([]*gocloak.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientScopesScopeMappingsClientRolesAvailable", ctx, token, realm, idOfClientScope, idOfClient)
	ret0, _ := ret[0].([]*gocloak.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientScopesScopeMappingsClientRolesAvailable indicates an expected call of GetClientScopesScopeMappingsClientRolesAvailable.
func (mr *MockKeycloakClientMockRecorder) GetClientScopesScopeMappingsClientRolesAvailable(ctx, token, realm, idOfClientScope, idOfClient any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientScopesScopeMappingsClientRolesAvailable", reflect.TypeOf((*MockKeycloakClient)(nil).GetClientScopesScopeMappingsClientRolesAvailable), ctx, token, realm, idOfClientScope, idOfClient)
}

// GetClientScopesScopeMappingsRealmRoles mocks base method.
func (m *MockKeycloakClient) GetClientScopesScopeMappingsRealmRoles(ctx context.Context, token, realm, idOfClientScope string) ([]*gocloak.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientScopesScopeMappingsRealmRoles", ctx, token, realm, idOfClientScope)
	ret0, _ := ret[0].([]*gocloak.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientScopesScopeMappingsRealmRoles indicates an expected call of GetClientScopesScopeMappingsRealmRoles.
func (mr *MockKeycloakClientMockRecorder) GetClientScopesScopeMappingsRealmRoles(ctx, token, realm, idOfClientScope any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientScopesScopeMappingsRealmRoles", reflect.TypeOf((*MockKeycloakClient)(nil).GetClientScopesScopeMappingsRealmRoles), ctx, token, realm, idOfClientScope)
}

// GetClientScopesScopeMappingsRealmRolesAvailable mocks base method.
func (m *MockKeycloakClient) GetClientScopesScopeMappingsRealmRolesAvailable(ctx context.Context, token, realm, idOfClientScope string) ([]*gocloak.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientScopesScopeMappingsRealmRolesAvailable", ctx, token, realm, idOfClientScope)
	ret0, _ := ret[0].([]*gocloak.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientScopesScopeMappingsRealmRolesAvailable indicates an expected call of GetClientScopesScopeMappingsRealmRolesAvailable.
func (mr *MockKeycloakClientMockRecorder) GetClientScopesScopeMappingsRealmRolesAvailable(ctx, token, realm, idOfClientScope any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientScopesScopeMappingsRealmRolesAvailable", reflect.TypeOf((*MockKeycloakClient)(nil).GetClientScopesScopeMappingsRealmRolesAvailable), ctx, token, realm, idOfClientScope)
}

// GetClientSecret mocks base method.
func (m *MockKeycloakClient) GetClientSecret(ctx context.Context, token, realm, idOfClient string) (*gocloak.CredentialRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientSecret", ctx, token, realm, idOfClient)
	ret0, _ := ret[0].(*gocloak.CredentialRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientSecret indicates an expected call of GetClientSecret.
func (mr *MockKeycloakClientMockRecorder) GetClientSecret(ctx, token, realm, idOfClient any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientSecret", reflect.TypeOf((*MockKeycloakClient)(nil).GetClientSecret), ctx, token, realm, idOfClient)
}

// GetClientServiceAccount mocks base method.
func (m *MockKeycloakClient) GetClientServiceAccount(ctx context.Context, token, realm, idOfClient string) (*gocloak.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientServiceAccount", ctx, token, realm, idOfClient)
	ret0, _ := ret[0].(*gocloak.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientServiceAccount indicates an expected call of GetClientServiceAccount.
func (mr *MockKeycloakClientMockRecorder) GetClientServiceAccount(ctx, token, realm, idOfClient any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientServiceAccount", reflect.TypeOf((*MockKeycloakClient)(nil).GetClientServiceAccount), ctx, token, realm, idOfClient)
}

// GetClientUserSessions mocks base method.
func (m *MockKeycloakClient) GetClientUserSessions(ctx context.Context, token, realm, idOfClient string) ([]*gocloak.UserSessionRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientUserSessions", ctx, token, realm, idOfClient)
	ret0, _ := ret[0].([]*gocloak.UserSessionRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientUserSessions indicates an expected call of GetClientUserSessions.
func (mr *MockKeycloakClientMockRecorder) GetClientUserSessions(ctx, token, realm, idOfClient any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientUserSessions", reflect.TypeOf((*MockKeycloakClient)(nil).GetClientUserSessions), ctx, token, realm, idOfClient)
}

// GetClients mocks base method.
func (m *MockKeycloakClient) GetClients(ctx context.Context, accessToken, realm string, params gocloak.GetClientsParams) ([]*gocloak.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClients", ctx, accessToken, realm, params)
	ret0, _ := ret[0].([]*gocloak.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClients indicates an expected call of GetClients.
func (mr *MockKeycloakClientMockRecorder) GetClients(ctx, accessToken, realm, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClients", reflect.TypeOf((*MockKeycloakClient)(nil).GetClients), ctx, accessToken, realm, params)
}

// GetClientsDefaultScopes mocks base method.
func (m *MockKeycloakClient) GetClientsDefaultScopes(ctx context.Context, token, realm, idOfClient string) ([]*gocloak.ClientScope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientsDefaultScopes", ctx, token, realm, idOfClient)
	ret0, _ := ret[0].([]*gocloak.ClientScope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientsDefaultScopes indicates an expected call of GetClientsDefaultScopes.
func (mr *MockKeycloakClientMockRecorder) GetClientsDefaultScopes(ctx, token, realm, idOfClient any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientsDefaultScopes", reflect.TypeOf((*MockKeycloakClient)(nil).GetClientsDefaultScopes), ctx, token, realm, idOfClient)
}

// GetClientsOptionalScopes mocks base method.
func (m *MockKeycloakClient) GetClientsOptionalScopes(ctx context.Context, token, realm, idOfClient string) ([]*gocloak.ClientScope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientsOptionalScopes", ctx, token, realm, idOfClient)
	ret0, _ := ret[0].([]*gocloak.ClientScope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientsOptionalScopes indicates an expected call of GetClientsOptionalScopes.
func (mr *MockKeycloakClientMockRecorder) GetClientsOptionalScopes(ctx, token, realm, idOfClient any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientsOptionalScopes", reflect.TypeOf((*MockKeycloakClient)(nil).GetClientsOptionalScopes), ctx, token, realm, idOfClient)
}

// GetComponents mocks base method.
func (m *MockKeycloakClient) GetComponents(ctx context.Context, accessToken, realm string) ([]*gocloak.Component, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComponents", ctx, accessToken, realm)
	ret0, _ := ret[0].([]*gocloak.Component)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComponents indicates an expected call of GetComponents.
func (mr *MockKeycloakClientMockRecorder) GetComponents(ctx, accessToken, realm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComponents", reflect.TypeOf((*MockKeycloakClient)(nil).GetComponents), ctx, accessToken, realm)
}

// GetCompositeClientRolesByGroupID mocks base method.
func (m *MockKeycloakClient) GetCompositeClientRolesByGroupID(ctx context.Context, token, realm, idOfClient, groupID string) ([]*gocloak.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompositeClientRolesByGroupID", ctx, token, realm, idOfClient, groupID)
	ret0, _ := ret[0].([]*gocloak.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompositeClientRolesByGroupID indicates an expected call of GetCompositeClientRolesByGroupID.
func (mr *MockKeycloakClientMockRecorder) GetCompositeClientRolesByGroupID(ctx, token, realm, idOfClient, groupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompositeClientRolesByGroupID", reflect.TypeOf((*MockKeycloakClient)(nil).GetCompositeClientRolesByGroupID), ctx, token, realm, idOfClient, groupID)
}

// GetCompositeClientRolesByRoleID mocks base method.
func (m *MockKeycloakClient) GetCompositeClientRolesByRoleID(ctx context.Context, token, realm, idOfClient, roleID string) ([]*gocloak.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompositeClientRolesByRoleID", ctx, token, realm, idOfClient, roleID)
	ret0, _ := ret[0].([]*gocloak.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompositeClientRolesByRoleID indicates an expected call of GetCompositeClientRolesByRoleID.
func (mr *MockKeycloakClientMockRecorder) GetCompositeClientRolesByRoleID(ctx, token, realm, idOfClient, roleID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompositeClientRolesByRoleID", reflect.TypeOf((*MockKeycloakClient)(nil).GetCompositeClientRolesByRoleID), ctx, token, realm, idOfClient, roleID)
}

// GetCompositeClientRolesByUserID mocks base method.
func (m *MockKeycloakClient) GetCompositeClientRolesByUserID(ctx context.Context, token, realm, idOfClient, userID string) ([]*gocloak.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompositeClientRolesByUserID", ctx, token, realm, idOfClient, userID)
	ret0, _ := ret[0].([]*gocloak.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompositeClientRolesByUserID indicates an expected call of GetCompositeClientRolesByUserID.
func (mr *MockKeycloakClientMockRecorder) GetCompositeClientRolesByUserID(ctx, token, realm, idOfClient, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompositeClientRolesByUserID", reflect.TypeOf((*MockKeycloakClient)(nil).GetCompositeClientRolesByUserID), ctx, token, realm, idOfClient, userID)
}

// GetCompositeRealmRoles mocks base method.
func (m *MockKeycloakClient) GetCompositeRealmRoles(ctx context.Context, token, realm, roleName string) ([]*gocloak.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompositeRealmRoles", ctx, token, realm, roleName)
	ret0, _ := ret[0].([]*gocloak.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompositeRealmRoles indicates an expected call of GetCompositeRealmRoles.
func (mr *MockKeycloakClientMockRecorder) GetCompositeRealmRoles(ctx, token, realm, roleName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompositeRealmRoles", reflect.TypeOf((*MockKeycloakClient)(nil).GetCompositeRealmRoles), ctx, token, realm, roleName)
}

// GetCompositeRealmRolesByGroupID mocks base method.
func (m *MockKeycloakClient) GetCompositeRealmRolesByGroupID(ctx context.Context, token, realm, groupID string) ([]*gocloak.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompositeRealmRolesByGroupID", ctx, token, realm, groupID)
	ret0, _ := ret[0].([]*gocloak.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompositeRealmRolesByGroupID indicates an expected call of GetCompositeRealmRolesByGroupID.
func (mr *MockKeycloakClientMockRecorder) GetCompositeRealmRolesByGroupID(ctx, token, realm, groupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompositeRealmRolesByGroupID", reflect.TypeOf((*MockKeycloakClient)(nil).GetCompositeRealmRolesByGroupID), ctx, token, realm, groupID)
}

// GetCompositeRealmRolesByRoleID mocks base method.
func (m *MockKeycloakClient) GetCompositeRealmRolesByRoleID(ctx context.Context, token, realm, roleID string) ([]*gocloak.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompositeRealmRolesByRoleID", ctx, token, realm, roleID)
	ret0, _ := ret[0].([]*gocloak.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompositeRealmRolesByRoleID indicates an expected call of GetCompositeRealmRolesByRoleID.
func (mr *MockKeycloakClientMockRecorder) GetCompositeRealmRolesByRoleID(ctx, token, realm, roleID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompositeRealmRolesByRoleID", reflect.TypeOf((*MockKeycloakClient)(nil).GetCompositeRealmRolesByRoleID), ctx, token, realm, roleID)
}

// GetCompositeRealmRolesByUserID mocks base method.
func (m *MockKeycloakClient) GetCompositeRealmRolesByUserID(ctx context.Context, token, realm, userID string) ([]*gocloak.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompositeRealmRolesByUserID", ctx, token, realm, userID)
	ret0, _ := ret[0].([]*gocloak.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompositeRealmRolesByUserID indicates an expected call of GetCompositeRealmRolesByUserID.
func (mr *MockKeycloakClientMockRecorder) GetCompositeRealmRolesByUserID(ctx, token, realm, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompositeRealmRolesByUserID", reflect.TypeOf((*MockKeycloakClient)(nil).GetCompositeRealmRolesByUserID), ctx, token, realm, userID)
}

// GetConfiguredUserStorageCredentialTypes mocks base method.
func (m *MockKeycloakClient) GetConfiguredUserStorageCredentialTypes(ctx context.Context, token, realm, userID string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfiguredUserStorageCredentialTypes", ctx, token, realm, userID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfiguredUserStorageCredentialTypes indicates an expected call of GetConfiguredUserStorageCredentialTypes.
func (mr *MockKeycloakClientMockRecorder) GetConfiguredUserStorageCredentialTypes(ctx, token, realm, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfiguredUserStorageCredentialTypes", reflect.TypeOf((*MockKeycloakClient)(nil).GetConfiguredUserStorageCredentialTypes), ctx, token, realm, userID)
}

// GetCredentialRegistrators mocks base method.
func (m *MockKeycloakClient) GetCredentialRegistrators(ctx context.Context, token, realm string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCredentialRegistrators", ctx, token, realm)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCredentialRegistrators indicates an expected call of GetCredentialRegistrators.
func (mr *MockKeycloakClientMockRecorder) GetCredentialRegistrators(ctx, token, realm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCredentialRegistrators", reflect.TypeOf((*MockKeycloakClient)(nil).GetCredentialRegistrators), ctx, token, realm)
}

// GetCredentials mocks base method.
func (m *MockKeycloakClient) GetCredentials(ctx context.Context, token, realm, UserID string) ([]*gocloak.CredentialRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCredentials", ctx, token, realm, UserID)
	ret0, _ := ret[0].([]*gocloak.CredentialRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCredentials indicates an expected call of GetCredentials.
func (mr *MockKeycloakClientMockRecorder) GetCredentials(ctx, token, realm, UserID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCredentials", reflect.TypeOf((*MockKeycloakClient)(nil).GetCredentials), ctx, token, realm, UserID)
}

// GetDefaultDefaultClientScopes mocks base method.
func (m *MockKeycloakClient) GetDefaultDefaultClientScopes(ctx context.Context, token, realm string) ([]*gocloak.ClientScope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultDefaultClientScopes", ctx, token, realm)
	ret0, _ := ret[0].([]*gocloak.ClientScope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDefaultDefaultClientScopes indicates an expected call of GetDefaultDefaultClientScopes.
func (mr *MockKeycloakClientMockRecorder) GetDefaultDefaultClientScopes(ctx, token, realm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultDefaultClientScopes", reflect.TypeOf((*MockKeycloakClient)(nil).GetDefaultDefaultClientScopes), ctx, token, realm)
}

// GetDefaultGroups mocks base method.
func (m *MockKeycloakClient) GetDefaultGroups(ctx context.Context, accessToken, realm string) ([]*gocloak.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultGroups", ctx, accessToken, realm)
	ret0, _ := ret[0].([]*gocloak.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDefaultGroups indicates an expected call of GetDefaultGroups.
func (mr *MockKeycloakClientMockRecorder) GetDefaultGroups(ctx, accessToken, realm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultGroups", reflect.TypeOf((*MockKeycloakClient)(nil).GetDefaultGroups), ctx, accessToken, realm)
}

// GetDefaultOptionalClientScopes mocks base method.
func (m *MockKeycloakClient) GetDefaultOptionalClientScopes(ctx context.Context, token, realm string) ([]*gocloak.ClientScope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultOptionalClientScopes", ctx, token, realm)
	ret0, _ := ret[0].([]*gocloak.ClientScope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDefaultOptionalClientScopes indicates an expected call of GetDefaultOptionalClientScopes.
func (mr *MockKeycloakClientMockRecorder) GetDefaultOptionalClientScopes(ctx, token, realm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultOptionalClientScopes", reflect.TypeOf((*MockKeycloakClient)(nil).GetDefaultOptionalClientScopes), ctx, token, realm)
}

// GetDependentPermissions mocks base method.
func (m *MockKeycloakClient) GetDependentPermissions(ctx context.Context, token, realm, idOfClient, policyID string) ([]*gocloak.PermissionRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDependentPermissions", ctx, token, realm, idOfClient, policyID)
	ret0, _ := ret[0].([]*gocloak.PermissionRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDependentPermissions indicates an expected call of GetDependentPermissions.
func (mr *MockKeycloakClientMockRecorder) GetDependentPermissions(ctx, token, realm, idOfClient, policyID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDependentPermissions", reflect.TypeOf((*MockKeycloakClient)(nil).GetDependentPermissions), ctx, token, realm, idOfClient, policyID)
}

// GetEvents mocks base method.
func (m *MockKeycloakClient) GetEvents(ctx context.Context, token, realm string, params gocloak.GetEventsParams) ([]*gocloak.EventRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvents", ctx, token, realm, params)
	ret0, _ := ret[0].([]*gocloak.EventRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvents indicates an expected call of GetEvents.
func (mr *MockKeycloakClientMockRecorder) GetEvents(ctx, token, realm, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvents", reflect.TypeOf((*MockKeycloakClient)(nil).GetEvents), ctx, token, realm, params)
}

// GetGroup mocks base method.
func (m *MockKeycloakClient) GetGroup(ctx context.Context, accessToken, realm, groupID string) (*gocloak.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroup", ctx, accessToken, realm, groupID)
	ret0, _ := ret[0].(*gocloak.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroup indicates an expected call of GetGroup.
func (mr *MockKeycloakClientMockRecorder) GetGroup(ctx, accessToken, realm, groupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroup", reflect.TypeOf((*MockKeycloakClient)(nil).GetGroup), ctx, accessToken, realm, groupID)
}

// GetGroupMembers mocks base method.
func (m *MockKeycloakClient) GetGroupMembers(ctx context.Context, accessToken, realm, groupID string, params gocloak.GetGroupsParams) ([]*gocloak.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupMembers", ctx, accessToken, realm, groupID, params)
	ret0, _ := ret[0].([]*gocloak.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupMembers indicates an expected call of GetGroupMembers.
func (mr *MockKeycloakClientMockRecorder) GetGroupMembers(ctx, accessToken, realm, groupID, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupMembers", reflect.TypeOf((*MockKeycloakClient)(nil).GetGroupMembers), ctx, accessToken, realm, groupID, params)
}

// GetGroups mocks base method.
func (m *MockKeycloakClient) GetGroups(ctx context.Context, accessToken, realm string, params gocloak.GetGroupsParams) ([]*gocloak.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroups", ctx, accessToken, realm, params)
	ret0, _ := ret[0].([]*gocloak.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroups indicates an expected call of GetGroups.
func (mr *MockKeycloakClientMockRecorder) GetGroups(ctx, accessToken, realm, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroups", reflect.TypeOf((*MockKeycloakClient)(nil).GetGroups), ctx, accessToken, realm, params)
}

// GetGroupsCount mocks base method.
func (m *MockKeycloakClient) GetGroupsCount(ctx context.Context, token, realm string, params gocloak.GetGroupsParams) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupsCount", ctx, token, realm, params)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupsCount indicates an expected call of GetGroupsCount.
func (mr *MockKeycloakClientMockRecorder) GetGroupsCount(ctx, token, realm, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupsCount", reflect.TypeOf((*MockKeycloakClient)(nil).GetGroupsCount), ctx, token, realm, params)
}

// GetIdentityProvider mocks base method.
func (m *MockKeycloakClient) GetIdentityProvider(ctx context.Context, token, realm, alias string) (*gocloak.IdentityProviderRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdentityProvider", ctx, token, realm, alias)
	ret0, _ := ret[0].(*gocloak.IdentityProviderRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdentityProvider indicates an expected call of GetIdentityProvider.
func (mr *MockKeycloakClientMockRecorder) GetIdentityProvider(ctx, token, realm, alias any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdentityProvider", reflect.TypeOf((*MockKeycloakClient)(nil).GetIdentityProvider), ctx, token, realm, alias)
}

// GetIdentityProviderMapper mocks base method.
func (m *MockKeycloakClient) GetIdentityProviderMapper(ctx context.Context, token, realm, alias, mapperID string) (*gocloak.IdentityProviderMapper, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdentityProviderMapper", ctx, token, realm, alias, mapperID)
	ret0, _ := ret[0].(*gocloak.IdentityProviderMapper)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdentityProviderMapper indicates an expected call of GetIdentityProviderMapper.
func (mr *MockKeycloakClientMockRecorder) GetIdentityProviderMapper(ctx, token, realm, alias, mapperID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdentityProviderMapper", reflect.TypeOf((*MockKeycloakClient)(nil).GetIdentityProviderMapper), ctx, token, realm, alias, mapperID)
}

// GetIdentityProviders mocks base method.
func (m *MockKeycloakClient) GetIdentityProviders(ctx context.Context, token, realm string) ([]*gocloak.IdentityProviderRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdentityProviders", ctx, token, realm)
	ret0, _ := ret[0].([]*gocloak.IdentityProviderRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdentityProviders indicates an expected call of GetIdentityProviders.
func (mr *MockKeycloakClientMockRecorder) GetIdentityProviders(ctx, token, realm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdentityProviders", reflect.TypeOf((*MockKeycloakClient)(nil).GetIdentityProviders), ctx, token, realm)
}

// GetIssuer mocks base method.
func (m *MockKeycloakClient) GetIssuer(ctx context.Context, realm string) (*gocloak.IssuerResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIssuer", ctx, realm)
	ret0, _ := ret[0].(*gocloak.IssuerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIssuer indicates an expected call of GetIssuer.
func (mr *MockKeycloakClientMockRecorder) GetIssuer(ctx, realm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssuer", reflect.TypeOf((*MockKeycloakClient)(nil).GetIssuer), ctx, realm)
}

// GetKeyStoreConfig mocks base method.
func (m *MockKeycloakClient) GetKeyStoreConfig(ctx context.Context, accessToken, realm string) (*gocloak.KeyStoreConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeyStoreConfig", ctx, accessToken, realm)
	ret0, _ := ret[0].(*gocloak.KeyStoreConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeyStoreConfig indicates an expected call of GetKeyStoreConfig.
func (mr *MockKeycloakClientMockRecorder) GetKeyStoreConfig(ctx, accessToken, realm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyStoreConfig", reflect.TypeOf((*MockKeycloakClient)(nil).GetKeyStoreConfig), ctx, accessToken, realm)
}

// GetPermission mocks base method.
func (m *MockKeycloakClient) GetPermission(ctx context.Context, token, realm, idOfClient, permissionID string) (*gocloak.PermissionRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPermission", ctx, token, realm, idOfClient, permissionID)
	ret0, _ := ret[0].(*gocloak.PermissionRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPermission indicates an expected call of GetPermission.
func (mr *MockKeycloakClientMockRecorder) GetPermission(ctx, token, realm, idOfClient, permissionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermission", reflect.TypeOf((*MockKeycloakClient)(nil).GetPermission), ctx, token, realm, idOfClient, permissionID)
}

// GetPermissionResources mocks base method.
func (m *MockKeycloakClient) GetPermissionResources(ctx context.Context, token, realm, idOfClient, permissionID string) ([]*gocloak.PermissionResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPermissionResources", ctx, token, realm, idOfClient, permissionID)
	ret0, _ := ret[0].([]*gocloak.PermissionResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPermissionResources indicates an expected call of GetPermissionResources.
func (mr *MockKeycloakClientMockRecorder) GetPermissionResources(ctx, token, realm, idOfClient, permissionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermissionResources", reflect.TypeOf((*MockKeycloakClient)(nil).GetPermissionResources), ctx, token, realm, idOfClient, permissionID)
}

// GetPermissionScopes mocks base method.
func (m *MockKeycloakClient) GetPermissionScopes(ctx context.Context, token, realm, idOfClient, permissionID string) ([]*gocloak.PermissionScope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPermissionScopes", ctx, token, realm, idOfClient, permissionID)
	ret0, _ := ret[0].([]*gocloak.PermissionScope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPermissionScopes indicates an expected call of GetPermissionScopes.
func (mr *MockKeycloakClientMockRecorder) GetPermissionScopes(ctx, token, realm, idOfClient, permissionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermissionScopes", reflect.TypeOf((*MockKeycloakClient)(nil).GetPermissionScopes), ctx, token, realm, idOfClient, permissionID)
}

// GetPermissions mocks base method.
func (m *MockKeycloakClient) GetPermissions(ctx context.Context, token, realm, idOfClient string, params gocloak.GetPermissionParams) ([]*gocloak.PermissionRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPermissions", ctx, token, realm, idOfClient, params)
	ret0, _ := ret[0].([]*gocloak.PermissionRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPermissions indicates an expected call of GetPermissions.
func (mr *MockKeycloakClientMockRecorder) GetPermissions(ctx, token, realm, idOfClient, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermissions", reflect.TypeOf((*MockKeycloakClient)(nil).GetPermissions), ctx, token, realm, idOfClient, params)
}

// GetPolicies mocks base method.
func (m *MockKeycloakClient) GetPolicies(ctx context.Context, token, realm, idOfClient string, params gocloak.GetPolicyParams) ([]*gocloak.PolicyRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPolicies", ctx, token, realm, idOfClient, params)
	ret0, _ := ret[0].([]*gocloak.PolicyRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPolicies indicates an expected call of GetPolicies.
func (mr *MockKeycloakClientMockRecorder) GetPolicies(ctx, token, realm, idOfClient, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPolicies", reflect.TypeOf((*MockKeycloakClient)(nil).GetPolicies), ctx, token, realm, idOfClient, params)
}

// GetPolicy mocks base method.
func (m *MockKeycloakClient) GetPolicy(ctx context.Context, token, realm, idOfClient, policyID string) (*gocloak.PolicyRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPolicy", ctx, token, realm, idOfClient, policyID)
	ret0, _ := ret[0].(*gocloak.PolicyRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPolicy indicates an expected call of GetPolicy.
func (mr *MockKeycloakClientMockRecorder) GetPolicy(ctx, token, realm, idOfClient, policyID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPolicy", reflect.TypeOf((*MockKeycloakClient)(nil).GetPolicy), ctx, token, realm, idOfClient, policyID)
}

// GetRawUserInfo mocks base method.
func (m *MockKeycloakClient) GetRawUserInfo(ctx context.Context, accessToken, realm string) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRawUserInfo", ctx, accessToken, realm)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRawUserInfo indicates an expected call of GetRawUserInfo.
func (mr *MockKeycloakClientMockRecorder) GetRawUserInfo(ctx, accessToken, realm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRawUserInfo", reflect.TypeOf((*MockKeycloakClient)(nil).GetRawUserInfo), ctx, accessToken, realm)
}

// GetRealm mocks base method.
func (m *MockKeycloakClient) GetRealm(ctx context.Context, token, realm string) (*gocloak.RealmRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRealm", ctx, token, realm)
	ret0, _ := ret[0].(*gocloak.RealmRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRealm indicates an expected call of GetRealm.
func (mr *MockKeycloakClientMockRecorder) GetRealm(ctx, token, realm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRealm", reflect.TypeOf((*MockKeycloakClient)(nil).GetRealm), ctx, token, realm)
}

// GetRealmRole mocks base method.
func (m *MockKeycloakClient) GetRealmRole(ctx context.Context, token, realm, roleName string) (*gocloak.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRealmRole", ctx, token, realm, roleName)
	ret0, _ := ret[0].(*gocloak.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRealmRole indicates an expected call of GetRealmRole.
func (mr *MockKeycloakClientMockRecorder) GetRealmRole(ctx, token, realm, roleName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRealmRole", reflect.TypeOf((*MockKeycloakClient)(nil).GetRealmRole), ctx, token, realm, roleName)
}

// GetRealmRoleByID mocks base method.
func (m *MockKeycloakClient) GetRealmRoleByID(ctx context.Context, token, realm, roleID string) (*gocloak.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRealmRoleByID", ctx, token, realm, roleID)
	ret0, _ := ret[0].(*gocloak.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRealmRoleByID indicates an expected call of GetRealmRoleByID.
func (mr *MockKeycloakClientMockRecorder) GetRealmRoleByID(ctx, token, realm, roleID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRealmRoleByID", reflect.TypeOf((*MockKeycloakClient)(nil).GetRealmRoleByID), ctx, token, realm, roleID)
}

// GetRealmRoles mocks base method.
func (m *MockKeycloakClient) GetRealmRoles(ctx context.Context, accessToken, realm string, params gocloak.GetRoleParams) ([]*gocloak.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRealmRoles", ctx, accessToken, realm, params)
	ret0, _ := ret[0].([]*gocloak.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRealmRoles indicates an expected call of GetRealmRoles.
func (mr *MockKeycloakClientMockRecorder) GetRealmRoles(ctx, accessToken, realm, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRealmRoles", reflect.TypeOf((*MockKeycloakClient)(nil).GetRealmRoles), ctx, accessToken, realm, params)
}

// GetRealmRolesByGroupID mocks base method.
func (m *MockKeycloakClient) GetRealmRolesByGroupID(ctx context.Context, accessToken, realm, groupID string) ([]*gocloak.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRealmRolesByGroupID", ctx, accessToken, realm, groupID)
	ret0, _ := ret[0].([]*gocloak.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRealmRolesByGroupID indicates an expected call of GetRealmRolesByGroupID.
func (mr *MockKeycloakClientMockRecorder) GetRealmRolesByGroupID(ctx, accessToken, realm, groupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRealmRolesByGroupID", reflect.TypeOf((*MockKeycloakClient)(nil).GetRealmRolesByGroupID), ctx, accessToken, realm, groupID)
}

// GetRealmRolesByUserID mocks base method.
func (m *MockKeycloakClient) GetRealmRolesByUserID(ctx context.Context, accessToken, realm, userID string) ([]*gocloak.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRealmRolesByUserID", ctx, accessToken, realm, userID)
	ret0, _ := ret[0].([]*gocloak.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRealmRolesByUserID indicates an expected call of GetRealmRolesByUserID.
func (mr *MockKeycloakClientMockRecorder) GetRealmRolesByUserID(ctx, accessToken, realm, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRealmRolesByUserID", reflect.TypeOf((*MockKeycloakClient)(nil).GetRealmRolesByUserID), ctx, accessToken, realm, userID)
}

// GetRealms mocks base method.
func (m *MockKeycloakClient) GetRealms(ctx context.Context, token string) ([]*gocloak.RealmRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRealms", ctx, token)
	ret0, _ := ret[0].([]*gocloak.RealmRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRealms indicates an expected call of GetRealms.
func (mr *MockKeycloakClientMockRecorder) GetRealms(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRealms", reflect.TypeOf((*MockKeycloakClient)(nil).GetRealms), ctx, token)
}

// GetRequestingPartyPermissionDecision mocks base method.
func (m *MockKeycloakClient) GetRequestingPartyPermissionDecision(ctx context.Context, token, realm string, options gocloak.RequestingPartyTokenOptions) (*gocloak.RequestingPartyPermissionDecision, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequestingPartyPermissionDecision", ctx, token, realm, options)
	ret0, _ := ret[0].(*gocloak.RequestingPartyPermissionDecision)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRequestingPartyPermissionDecision indicates an expected call of GetRequestingPartyPermissionDecision.
func (mr *MockKeycloakClientMockRecorder) GetRequestingPartyPermissionDecision(ctx, token, realm, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestingPartyPermissionDecision", reflect.TypeOf((*MockKeycloakClient)(nil).GetRequestingPartyPermissionDecision), ctx, token, realm, options)
}

// GetRequestingPartyPermissions mocks base method.
func (m *MockKeycloakClient) GetRequestingPartyPermissions(ctx context.Context, token, realm string, options gocloak.RequestingPartyTokenOptions) (*[]gocloak.RequestingPartyPermission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequestingPartyPermissions", ctx, token, realm, options)
	ret0, _ := ret[0].(*[]gocloak.RequestingPartyPermission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRequestingPartyPermissions indicates an expected call of GetRequestingPartyPermissions.
func (mr *MockKeycloakClientMockRecorder) GetRequestingPartyPermissions(ctx, token, realm, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestingPartyPermissions", reflect.TypeOf((*MockKeycloakClient)(nil).GetRequestingPartyPermissions), ctx, token, realm, options)
}

// GetRequestingPartyToken mocks base method.
func (m *MockKeycloakClient) GetRequestingPartyToken(ctx context.Context, token, realm string, options gocloak.RequestingPartyTokenOptions) (*gocloak.JWT, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequestingPartyToken", ctx, token, realm, options)
	ret0, _ := ret[0].(*gocloak.JWT)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRequestingPartyToken indicates an expected call of GetRequestingPartyToken.
func (mr *MockKeycloakClientMockRecorder) GetRequestingPartyToken(ctx, token, realm, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestingPartyToken", reflect.TypeOf((*MockKeycloakClient)(nil).GetRequestingPartyToken), ctx, token, realm, options)
}

// GetResource mocks base method.
func (m *MockKeycloakClient) GetResource(ctx context.Context, token, realm, idOfClient, resourceID string) (*gocloak.ResourceRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResource", ctx, token, realm, idOfClient, resourceID)
	ret0, _ := ret[0].(*gocloak.ResourceRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResource indicates an expected call of GetResource.
func (mr *MockKeycloakClientMockRecorder) GetResource(ctx, token, realm, idOfClient, resourceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResource", reflect.TypeOf((*MockKeycloakClient)(nil).GetResource), ctx, token, realm, idOfClient, resourceID)
}

// GetResourceClient mocks base method.
func (m *MockKeycloakClient) GetResourceClient(ctx context.Context, token, realm, resourceID string) (*gocloak.ResourceRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceClient", ctx, token, realm, resourceID)
	ret0, _ := ret[0].(*gocloak.ResourceRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourceClient indicates an expected call of GetResourceClient.
func (mr *MockKeycloakClientMockRecorder) GetResourceClient(ctx, token, realm, resourceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceClient", reflect.TypeOf((*MockKeycloakClient)(nil).GetResourceClient), ctx, token, realm, resourceID)
}

// GetResourcePolicies mocks base method.
func (m *MockKeycloakClient) GetResourcePolicies(ctx context.Context, token, realm string, params gocloak.GetResourcePoliciesParams) ([]*gocloak.ResourcePolicyRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourcePolicies", ctx, token, realm, params)
	ret0, _ := ret[0].([]*gocloak.ResourcePolicyRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourcePolicies indicates an expected call of GetResourcePolicies.
func (mr *MockKeycloakClientMockRecorder) GetResourcePolicies(ctx, token, realm, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourcePolicies", reflect.TypeOf((*MockKeycloakClient)(nil).GetResourcePolicies), ctx, token, realm, params)
}

// GetResourcePolicy mocks base method.
func (m *MockKeycloakClient) GetResourcePolicy(ctx context.Context, token, realm, permissionID string) (*gocloak.ResourcePolicyRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourcePolicy", ctx, token, realm, permissionID)
	ret0, _ := ret[0].(*gocloak.ResourcePolicyRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourcePolicy indicates an expected call of GetResourcePolicy.
func (mr *MockKeycloakClientMockRecorder) GetResourcePolicy(ctx, token, realm, permissionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourcePolicy", reflect.TypeOf((*MockKeycloakClient)(nil).GetResourcePolicy), ctx, token, realm, permissionID)
}

// GetResources mocks base method.
func (m *MockKeycloakClient) GetResources(ctx context.Context, token, realm, idOfClient string, params gocloak.GetResourceParams) ([]*gocloak.ResourceRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResources", ctx, token, realm, idOfClient, params)
	ret0, _ := ret[0].([]*gocloak.ResourceRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResources indicates an expected call of GetResources.
func (mr *MockKeycloakClientMockRecorder) GetResources(ctx, token, realm, idOfClient, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResources", reflect.TypeOf((*MockKeycloakClient)(nil).GetResources), ctx, token, realm, idOfClient, params)
}

// GetResourcesClient mocks base method.
func (m *MockKeycloakClient) GetResourcesClient(ctx context.Context, token, realm string, params gocloak.GetResourceParams) ([]*gocloak.ResourceRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourcesClient", ctx, token, realm, params)
	ret0, _ := ret[0].([]*gocloak.ResourceRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourcesClient indicates an expected call of GetResourcesClient.
func (mr *MockKeycloakClientMockRecorder) GetResourcesClient(ctx, token, realm, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourcesClient", reflect.TypeOf((*MockKeycloakClient)(nil).GetResourcesClient), ctx, token, realm, params)
}

// GetRoleMappingByGroupID mocks base method.
func (m *MockKeycloakClient) GetRoleMappingByGroupID(ctx context.Context, accessToken, realm, groupID string) (*gocloak.MappingsRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoleMappingByGroupID", ctx, accessToken, realm, groupID)
	ret0, _ := ret[0].(*gocloak.MappingsRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoleMappingByGroupID indicates an expected call of GetRoleMappingByGroupID.
func (mr *MockKeycloakClientMockRecorder) GetRoleMappingByGroupID(ctx, accessToken, realm, groupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleMappingByGroupID", reflect.TypeOf((*MockKeycloakClient)(nil).GetRoleMappingByGroupID), ctx, accessToken, realm, groupID)
}

// GetRoleMappingByUserID mocks base method.
func (m *MockKeycloakClient) GetRoleMappingByUserID(ctx context.Context, accessToken, realm, userID string) (*gocloak.MappingsRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoleMappingByUserID", ctx, accessToken, realm, userID)
	ret0, _ := ret[0].(*gocloak.MappingsRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoleMappingByUserID indicates an expected call of GetRoleMappingByUserID.
func (mr *MockKeycloakClientMockRecorder) GetRoleMappingByUserID(ctx, accessToken, realm, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleMappingByUserID", reflect.TypeOf((*MockKeycloakClient)(nil).GetRoleMappingByUserID), ctx, accessToken, realm, userID)
}

// GetScope mocks base method.
func (m *MockKeycloakClient) GetScope(ctx context.Context, token, realm, idOfClient, scopeID string) (*gocloak.ScopeRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScope", ctx, token, realm, idOfClient, scopeID)
	ret0, _ := ret[0].(*gocloak.ScopeRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScope indicates an expected call of GetScope.
func (mr *MockKeycloakClientMockRecorder) GetScope(ctx, token, realm, idOfClient, scopeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScope", reflect.TypeOf((*MockKeycloakClient)(nil).GetScope), ctx, token, realm, idOfClient, scopeID)
}

// GetScopes mocks base method.
func (m *MockKeycloakClient) GetScopes(ctx context.Context, token, realm, idOfClient string, params gocloak.GetScopeParams) ([]*gocloak.ScopeRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScopes", ctx, token, realm, idOfClient, params)
	ret0, _ := ret[0].([]*gocloak.ScopeRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScopes indicates an expected call of GetScopes.
func (mr *MockKeycloakClientMockRecorder) GetScopes(ctx, token, realm, idOfClient, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScopes", reflect.TypeOf((*MockKeycloakClient)(nil).GetScopes), ctx, token, realm, idOfClient, params)
}

// GetServerInfo mocks base method.
func (m *MockKeycloakClient) GetServerInfo(ctx context.Context, accessToken string) ([]*gocloak.ServerInfoRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServerInfo", ctx, accessToken)
	ret0, _ := ret[0].([]*gocloak.ServerInfoRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServerInfo indicates an expected call of GetServerInfo.
func (mr *MockKeycloakClientMockRecorder) GetServerInfo(ctx, accessToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServerInfo", reflect.TypeOf((*MockKeycloakClient)(nil).GetServerInfo), ctx, accessToken)
}

// GetToken mocks base method.
func (m *MockKeycloakClient) GetToken(ctx context.Context, realm string, options gocloak.TokenOptions) (*gocloak.JWT, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetToken", ctx, realm, options)
	ret0, _ := ret[0].(*gocloak.JWT)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetToken indicates an expected call of GetToken.
func (mr *MockKeycloakClientMockRecorder) GetToken(ctx, realm, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetToken", reflect.TypeOf((*MockKeycloakClient)(nil).GetToken), ctx, realm, options)
}

// GetUserByID mocks base method.
func (m *MockKeycloakClient) GetUserByID(ctx context.Context, accessToken, realm, userID string) (*gocloak.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, accessToken, realm, userID)
	ret0, _ := ret[0].(*gocloak.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockKeycloakClientMockRecorder) GetUserByID(ctx, accessToken, realm, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockKeycloakClient)(nil).GetUserByID), ctx, accessToken, realm, userID)
}

// GetUserCount mocks base method.
func (m *MockKeycloakClient) GetUserCount(ctx context.Context, accessToken, realm string, params gocloak.GetUsersParams) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserCount", ctx, accessToken, realm, params)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserCount indicates an expected call of GetUserCount.
func (mr *MockKeycloakClientMockRecorder) GetUserCount(ctx, accessToken, realm, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserCount", reflect.TypeOf((*MockKeycloakClient)(nil).GetUserCount), ctx, accessToken, realm, params)
}

// GetUserFederatedIdentities mocks base method.
func (m *MockKeycloakClient) GetUserFederatedIdentities(ctx context.Context, token, realm, userID string) ([]*gocloak.FederatedIdentityRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserFederatedIdentities", ctx, token, realm, userID)
	ret0, _ := ret[0].([]*gocloak.FederatedIdentityRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserFederatedIdentities indicates an expected call of GetUserFederatedIdentities.
func (mr *MockKeycloakClientMockRecorder) GetUserFederatedIdentities(ctx, token, realm, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserFederatedIdentities", reflect.TypeOf((*MockKeycloakClient)(nil).GetUserFederatedIdentities), ctx, token, realm, userID)
}

// GetUserGroups mocks base method.
func (m *MockKeycloakClient) GetUserGroups(ctx context.Context, token, realm, userID string, params gocloak.GetGroupsParams) ([]*gocloak.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserGroups", ctx, token, realm, userID, params)
	ret0, _ := ret[0].([]*gocloak.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserGroups indicates an expected call of GetUserGroups.
func (mr *MockKeycloakClientMockRecorder) GetUserGroups(ctx, token, realm, userID, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserGroups", reflect.TypeOf((*MockKeycloakClient)(nil).GetUserGroups), ctx, token, realm, userID, params)
}

// GetUserInfo mocks base method.
func (m *MockKeycloakClient) GetUserInfo(ctx context.Context, accessToken, realm string) (*gocloak.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfo", ctx, accessToken, realm)
	ret0, _ := ret[0].(*gocloak.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfo indicates an expected call of GetUserInfo.
func (mr *MockKeycloakClientMockRecorder) GetUserInfo(ctx, accessToken, realm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfo", reflect.TypeOf((*MockKeycloakClient)(nil).GetUserInfo), ctx, accessToken, realm)
}

// GetUserOfflineSessionsForClient mocks base method.
func (m *MockKeycloakClient) GetUserOfflineSessionsForClient(ctx context.Context, token, realm, userID, idOfClient string) ([]*gocloak.UserSessionRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserOfflineSessionsForClient", ctx, token, realm, userID, idOfClient)
	ret0, _ := ret[0].([]*gocloak.UserSessionRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserOfflineSessionsForClient indicates an expected call of GetUserOfflineSessionsForClient.
func (mr *MockKeycloakClientMockRecorder) GetUserOfflineSessionsForClient(ctx, token, realm, userID, idOfClient any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserOfflineSessionsForClient", reflect.TypeOf((*MockKeycloakClient)(nil).GetUserOfflineSessionsForClient), ctx, token, realm, userID, idOfClient)
}

// GetUserPermissions mocks base method.
func (m *MockKeycloakClient) GetUserPermissions(ctx context.Context, token, realm string, params gocloak.GetUserPermissionParams) ([]*gocloak.PermissionGrantResponseRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPermissions", ctx, token, realm, params)
	ret0, _ := ret[0].([]*gocloak.PermissionGrantResponseRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPermissions indicates an expected call of GetUserPermissions.
func (mr *MockKeycloakClientMockRecorder) GetUserPermissions(ctx, token, realm, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPermissions", reflect.TypeOf((*MockKeycloakClient)(nil).GetUserPermissions), ctx, token, realm, params)
}

// GetUserSessions mocks base method.
func (m *MockKeycloakClient) GetUserSessions(ctx context.Context, token, realm, userID string) ([]*gocloak.UserSessionRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserSessions", ctx, token, realm, userID)
	ret0, _ := ret[0].([]*gocloak.UserSessionRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserSessions indicates an expected call of GetUserSessions.
func (mr *MockKeycloakClientMockRecorder) GetUserSessions(ctx, token, realm, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserSessions", reflect.TypeOf((*MockKeycloakClient)(nil).GetUserSessions), ctx, token, realm, userID)
}

// GetUsers mocks base method.
func (m *MockKeycloakClient) GetUsers(ctx context.Context, accessToken, realm string, params gocloak.GetUsersParams) ([]*gocloak.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", ctx, accessToken, realm, params)
	ret0, _ := ret[0].([]*gocloak.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockKeycloakClientMockRecorder) GetUsers(ctx, accessToken, realm, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockKeycloakClient)(nil).GetUsers), ctx, accessToken, realm, params)
}

// GetUsersByClientRoleName mocks base method.
func (m *MockKeycloakClient) GetUsersByClientRoleName(ctx context.Context, token, realm, idOfClient, roleName string, params gocloak.GetUsersByRoleParams) ([]*gocloak.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersByClientRoleName", ctx, token, realm, idOfClient, roleName, params)
	ret0, _ := ret[0].([]*gocloak.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersByClientRoleName indicates an expected call of GetUsersByClientRoleName.
func (mr *MockKeycloakClientMockRecorder) GetUsersByClientRoleName(ctx, token, realm, idOfClient, roleName, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersByClientRoleName", reflect.TypeOf((*MockKeycloakClient)(nil).GetUsersByClientRoleName), ctx, token, realm, idOfClient, roleName, params)
}

// GetUsersByRoleName mocks base method.
func (m *MockKeycloakClient) GetUsersByRoleName(ctx context.Context, token, realm, roleName string, params gocloak.GetUsersByRoleParams) ([]*gocloak.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersByRoleName", ctx, token, realm, roleName, params)
	ret0, _ := ret[0].([]*gocloak.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersByRoleName indicates an expected call of GetUsersByRoleName.
func (mr *MockKeycloakClientMockRecorder) GetUsersByRoleName(ctx, token, realm, roleName, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersByRoleName", reflect.TypeOf((*MockKeycloakClient)(nil).GetUsersByRoleName), ctx, token, realm, roleName, params)
}

// GrantUserPermission mocks base method.
func (m *MockKeycloakClient) GrantUserPermission(ctx context.Context, token, realm string, permission gocloak.PermissionGrantParams) (*gocloak.PermissionGrantResponseRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GrantUserPermission", ctx, token, realm, permission)
	ret0, _ := ret[0].(*gocloak.PermissionGrantResponseRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GrantUserPermission indicates an expected call of GrantUserPermission.
func (mr *MockKeycloakClientMockRecorder) GrantUserPermission(ctx, token, realm, permission any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrantUserPermission", reflect.TypeOf((*MockKeycloakClient)(nil).GrantUserPermission), ctx, token, realm, permission)
}

// Login mocks base method.
func (m *MockKeycloakClient) Login(ctx context.Context, clientID, clientSecret, realm, username, password string) (*gocloak.JWT, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, clientID, clientSecret, realm, username, password)
	ret0, _ := ret[0].(*gocloak.JWT)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockKeycloakClientMockRecorder) Login(ctx, clientID, clientSecret, realm, username, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockKeycloakClient)(nil).Login), ctx, clientID, clientSecret, realm, username, password)
}

// LoginAdmin mocks base method.
func (m *MockKeycloakClient) LoginAdmin(ctx context.Context, username, password, realm string) (*gocloak.JWT, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginAdmin", ctx, username, password, realm)
	ret0, _ := ret[0].(*gocloak.JWT)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginAdmin indicates an expected call of LoginAdmin.
func (mr *MockKeycloakClientMockRecorder) LoginAdmin(ctx, username, password, realm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginAdmin", reflect.TypeOf((*MockKeycloakClient)(nil).LoginAdmin), ctx, username, password, realm)
}

// LoginClient mocks base method.
func (m *MockKeycloakClient) LoginClient(ctx context.Context, clientID, clientSecret, realm string) (*gocloak.JWT, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginClient", ctx, clientID, clientSecret, realm)
	ret0, _ := ret[0].(*gocloak.JWT)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginClient indicates an expected call of LoginClient.
func (mr *MockKeycloakClientMockRecorder) LoginClient(ctx, clientID, clientSecret, realm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginClient", reflect.TypeOf((*MockKeycloakClient)(nil).LoginClient), ctx, clientID, clientSecret, realm)
}

// LoginClientSignedJWT mocks base method.
func (m *MockKeycloakClient) LoginClientSignedJWT(ctx context.Context, clientID, realm string, key any, signedMethod jwt.SigningMethod, expiresAt *jwt.NumericDate) (*gocloak.JWT, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginClientSignedJWT", ctx, clientID, realm, key, signedMethod, expiresAt)
	ret0, _ := ret[0].(*gocloak.JWT)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginClientSignedJWT indicates an expected call of LoginClientSignedJWT.
func (mr *MockKeycloakClientMockRecorder) LoginClientSignedJWT(ctx, clientID, realm, key, signedMethod, expiresAt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginClientSignedJWT", reflect.TypeOf((*MockKeycloakClient)(nil).LoginClientSignedJWT), ctx, clientID, realm, key, signedMethod, expiresAt)
}

// LoginOtp mocks base method.
func (m *MockKeycloakClient) LoginOtp(ctx context.Context, clientID, clientSecret, realm, username, password, totp string) (*gocloak.JWT, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginOtp", ctx, clientID, clientSecret, realm, username, password, totp)
	ret0, _ := ret[0].(*gocloak.JWT)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginOtp indicates an expected call of LoginOtp.
func (mr *MockKeycloakClientMockRecorder) LoginOtp(ctx, clientID, clientSecret, realm, username, password, totp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginOtp", reflect.TypeOf((*MockKeycloakClient)(nil).LoginOtp), ctx, clientID, clientSecret, realm, username, password, totp)
}

// Logout mocks base method.
func (m *MockKeycloakClient) Logout(ctx context.Context, clientID, clientSecret, realm, refreshToken string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", ctx, clientID, clientSecret, realm, refreshToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// Logout indicates an expected call of Logout.
func (mr *MockKeycloakClientMockRecorder) Logout(ctx, clientID, clientSecret, realm, refreshToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockKeycloakClient)(nil).Logout), ctx, clientID, clientSecret, realm, refreshToken)
}

// LogoutAllSessions mocks base method.
func (m *MockKeycloakClient) LogoutAllSessions(ctx context.Context, accessToken, realm, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogoutAllSessions", ctx, accessToken, realm, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogoutAllSessions indicates an expected call of LogoutAllSessions.
func (mr *MockKeycloakClientMockRecorder) LogoutAllSessions(ctx, accessToken, realm, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogoutAllSessions", reflect.TypeOf((*MockKeycloakClient)(nil).LogoutAllSessions), ctx, accessToken, realm, userID)
}

// LogoutPublicClient mocks base method.
func (m *MockKeycloakClient) LogoutPublicClient(ctx context.Context, clientID, realm, accessToken, refreshToken string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogoutPublicClient", ctx, clientID, realm, accessToken, refreshToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogoutPublicClient indicates an expected call of LogoutPublicClient.
func (mr *MockKeycloakClientMockRecorder) LogoutPublicClient(ctx, clientID, realm, accessToken, refreshToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogoutPublicClient", reflect.TypeOf((*MockKeycloakClient)(nil).LogoutPublicClient), ctx, clientID, realm, accessToken, refreshToken)
}

// LogoutUserSession mocks base method.
func (m *MockKeycloakClient) LogoutUserSession(ctx context.Context, accessToken, realm, session string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogoutUserSession", ctx, accessToken, realm, session)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogoutUserSession indicates an expected call of LogoutUserSession.
func (mr *MockKeycloakClientMockRecorder) LogoutUserSession(ctx, accessToken, realm, session any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogoutUserSession", reflect.TypeOf((*MockKeycloakClient)(nil).LogoutUserSession), ctx, accessToken, realm, session)
}

// MoveCredentialBehind mocks base method.
func (m *MockKeycloakClient) MoveCredentialBehind(ctx context.Context, token, realm, userID, credentialID, newPreviousCredentialID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MoveCredentialBehind", ctx, token, realm, userID, credentialID, newPreviousCredentialID)
	ret0, _ := ret[0].(error)
	return ret0
}

// MoveCredentialBehind indicates an expected call of MoveCredentialBehind.
func (mr *MockKeycloakClientMockRecorder) MoveCredentialBehind(ctx, token, realm, userID, credentialID, newPreviousCredentialID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveCredentialBehind", reflect.TypeOf((*MockKeycloakClient)(nil).MoveCredentialBehind), ctx, token, realm, userID, credentialID, newPreviousCredentialID)
}

// MoveCredentialToFirst mocks base method.
func (m *MockKeycloakClient) MoveCredentialToFirst(ctx context.Context, token, realm, userID, credentialID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MoveCredentialToFirst", ctx, token, realm, userID, credentialID)
	ret0, _ := ret[0].(error)
	return ret0
}

// MoveCredentialToFirst indicates an expected call of MoveCredentialToFirst.
func (mr *MockKeycloakClientMockRecorder) MoveCredentialToFirst(ctx, token, realm, userID, credentialID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveCredentialToFirst", reflect.TypeOf((*MockKeycloakClient)(nil).MoveCredentialToFirst), ctx, token, realm, userID, credentialID)
}

// RefreshToken mocks base method.
func (m *MockKeycloakClient) RefreshToken(ctx context.Context, refreshToken, clientID, clientSecret, realm string) (*gocloak.JWT, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshToken", ctx, refreshToken, clientID, clientSecret, realm)
	ret0, _ := ret[0].(*gocloak.JWT)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshToken indicates an expected call of RefreshToken.
func (mr *MockKeycloakClientMockRecorder) RefreshToken(ctx, refreshToken, clientID, clientSecret, realm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshToken", reflect.TypeOf((*MockKeycloakClient)(nil).RefreshToken), ctx, refreshToken, clientID, clientSecret, realm)
}

// RegenerateClientSecret mocks base method.
func (m *MockKeycloakClient) RegenerateClientSecret(ctx context.Context, token, realm, idOfClient string) (*gocloak.CredentialRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegenerateClientSecret", ctx, token, realm, idOfClient)
	ret0, _ := ret[0].(*gocloak.CredentialRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegenerateClientSecret indicates an expected call of RegenerateClientSecret.
func (mr *MockKeycloakClientMockRecorder) RegenerateClientSecret(ctx, token, realm, idOfClient any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegenerateClientSecret", reflect.TypeOf((*MockKeycloakClient)(nil).RegenerateClientSecret), ctx, token, realm, idOfClient)
}

// RemoveDefaultGroup mocks base method.
func (m *MockKeycloakClient) RemoveDefaultGroup(ctx context.Context, accessToken, realm, groupID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveDefaultGroup", ctx, accessToken, realm, groupID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveDefaultGroup indicates an expected call of RemoveDefaultGroup.
func (mr *MockKeycloakClientMockRecorder) RemoveDefaultGroup(ctx, accessToken, realm, groupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveDefaultGroup", reflect.TypeOf((*MockKeycloakClient)(nil).RemoveDefaultGroup), ctx, accessToken, realm, groupID)
}

// RemoveDefaultScopeFromClient mocks base method.
func (m *MockKeycloakClient) RemoveDefaultScopeFromClient(ctx context.Context, token, realm, idOfClient, scopeID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveDefaultScopeFromClient", ctx, token, realm, idOfClient, scopeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveDefaultScopeFromClient indicates an expected call of RemoveDefaultScopeFromClient.
func (mr *MockKeycloakClientMockRecorder) RemoveDefaultScopeFromClient(ctx, token, realm, idOfClient, scopeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveDefaultScopeFromClient", reflect.TypeOf((*MockKeycloakClient)(nil).RemoveDefaultScopeFromClient), ctx, token, realm, idOfClient, scopeID)
}

// RemoveOptionalScopeFromClient mocks base method.
func (m *MockKeycloakClient) RemoveOptionalScopeFromClient(ctx context.Context, token, realm, idOfClient, scopeID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveOptionalScopeFromClient", ctx, token, realm, idOfClient, scopeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveOptionalScopeFromClient indicates an expected call of RemoveOptionalScopeFromClient.
func (mr *MockKeycloakClientMockRecorder) RemoveOptionalScopeFromClient(ctx, token, realm, idOfClient, scopeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveOptionalScopeFromClient", reflect.TypeOf((*MockKeycloakClient)(nil).RemoveOptionalScopeFromClient), ctx, token, realm, idOfClient, scopeID)
}

// RestyClient mocks base method.
func (m *MockKeycloakClient) RestyClient() *resty.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestyClient")
	ret0, _ := ret[0].(*resty.Client)
	return ret0
}

// RestyClient indicates an expected call of RestyClient.
func (mr *MockKeycloakClientMockRecorder) RestyClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestyClient", reflect.TypeOf((*MockKeycloakClient)(nil).RestyClient))
}

// RetrospectToken mocks base method.
func (m *MockKeycloakClient) RetrospectToken(ctx context.Context, accessToken, clientID, clientSecret, realm string) (*gocloak.IntroSpectTokenResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrospectToken", ctx, accessToken, clientID, clientSecret, realm)
	ret0, _ := ret[0].(*gocloak.IntroSpectTokenResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrospectToken indicates an expected call of RetrospectToken.
func (mr *MockKeycloakClientMockRecorder) RetrospectToken(ctx, accessToken, clientID, clientSecret, realm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrospectToken", reflect.TypeOf((*MockKeycloakClient)(nil).RetrospectToken), ctx, accessToken, clientID, clientSecret, realm)
}

// RevokeUserConsents mocks base method.
func (m *MockKeycloakClient) RevokeUserConsents(ctx context.Context, accessToken, realm, userID, clientID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeUserConsents", ctx, accessToken, realm, userID, clientID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeUserConsents indicates an expected call of RevokeUserConsents.
func (mr *MockKeycloakClientMockRecorder) RevokeUserConsents(ctx, accessToken, realm, userID, clientID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeUserConsents", reflect.TypeOf((*MockKeycloakClient)(nil).RevokeUserConsents), ctx, accessToken, realm, userID, clientID)
}

// SetPassword mocks base method.
func (m *MockKeycloakClient) SetPassword(ctx context.Context, token, userID, realm, password string, temporary bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPassword", ctx, token, userID, realm, password, temporary)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPassword indicates an expected call of SetPassword.
func (mr *MockKeycloakClientMockRecorder) SetPassword(ctx, token, userID, realm, password, temporary any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPassword", reflect.TypeOf((*MockKeycloakClient)(nil).SetPassword), ctx, token, userID, realm, password, temporary)
}

// SetRestyClient mocks base method.
func (m *MockKeycloakClient) SetRestyClient(restyClient *resty.Client) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetRestyClient", restyClient)
}

// SetRestyClient indicates an expected call of SetRestyClient.
func (mr *MockKeycloakClientMockRecorder) SetRestyClient(restyClient any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRestyClient", reflect.TypeOf((*MockKeycloakClient)(nil).SetRestyClient), restyClient)
}

// UpdateAuthenticationFlow mocks base method.
func (m *MockKeycloakClient) UpdateAuthenticationFlow(ctx context.Context, token, realm string, flow gocloak.AuthenticationFlowRepresentation, authenticationFlowID string) (*gocloak.AuthenticationFlowRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAuthenticationFlow", ctx, token, realm, flow, authenticationFlowID)
	ret0, _ := ret[0].(*gocloak.AuthenticationFlowRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAuthenticationFlow indicates an expected call of UpdateAuthenticationFlow.
func (mr *MockKeycloakClientMockRecorder) UpdateAuthenticationFlow(ctx, token, realm, flow, authenticationFlowID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAuthenticationFlow", reflect.TypeOf((*MockKeycloakClient)(nil).UpdateAuthenticationFlow), ctx, token, realm, flow, authenticationFlowID)
}

// UpdateClient mocks base method.
func (m *MockKeycloakClient) UpdateClient(ctx context.Context, accessToken, realm string, updatedClient gocloak.Client) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClient", ctx, accessToken, realm, updatedClient)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateClient indicates an expected call of UpdateClient.
func (mr *MockKeycloakClientMockRecorder) UpdateClient(ctx, accessToken, realm, updatedClient any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClient", reflect.TypeOf((*MockKeycloakClient)(nil).UpdateClient), ctx, accessToken, realm, updatedClient)
}

// UpdateClientProtocolMapper mocks base method.
func (m *MockKeycloakClient) UpdateClientProtocolMapper(ctx context.Context, token, realm, idOfClient, mapperID string, mapper gocloak.ProtocolMapperRepresentation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClientProtocolMapper", ctx, token, realm, idOfClient, mapperID, mapper)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateClientProtocolMapper indicates an expected call of UpdateClientProtocolMapper.
func (mr *MockKeycloakClientMockRecorder) UpdateClientProtocolMapper(ctx, token, realm, idOfClient, mapperID, mapper any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClientProtocolMapper", reflect.TypeOf((*MockKeycloakClient)(nil).UpdateClientProtocolMapper), ctx, token, realm, idOfClient, mapperID, mapper)
}

// UpdateClientScope mocks base method.
func (m *MockKeycloakClient) UpdateClientScope(ctx context.Context, accessToken, realm string, scope gocloak.ClientScope) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClientScope", ctx, accessToken, realm, scope)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateClientScope indicates an expected call of UpdateClientScope.
func (mr *MockKeycloakClientMockRecorder) UpdateClientScope(ctx, accessToken, realm, scope any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClientScope", reflect.TypeOf((*MockKeycloakClient)(nil).UpdateClientScope), ctx, accessToken, realm, scope)
}

// UpdateCredentialUserLabel mocks base method.
func (m *MockKeycloakClient) UpdateCredentialUserLabel(ctx context.Context, token, realm, userID, credentialID, userLabel string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCredentialUserLabel", ctx, token, realm, userID, credentialID, userLabel)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCredentialUserLabel indicates an expected call of UpdateCredentialUserLabel.
func (mr *MockKeycloakClientMockRecorder) UpdateCredentialUserLabel(ctx, token, realm, userID, credentialID, userLabel any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCredentialUserLabel", reflect.TypeOf((*MockKeycloakClient)(nil).UpdateCredentialUserLabel), ctx, token, realm, userID, credentialID, userLabel)
}

// UpdateGroup mocks base method.
func (m *MockKeycloakClient) UpdateGroup(ctx context.Context, accessToken, realm string, updatedGroup gocloak.Group) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGroup", ctx, accessToken, realm, updatedGroup)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGroup indicates an expected call of UpdateGroup.
func (mr *MockKeycloakClientMockRecorder) UpdateGroup(ctx, accessToken, realm, updatedGroup any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGroup", reflect.TypeOf((*MockKeycloakClient)(nil).UpdateGroup), ctx, accessToken, realm, updatedGroup)
}

// UpdateIdentityProvider mocks base method.
func (m *MockKeycloakClient) UpdateIdentityProvider(ctx context.Context, token, realm, alias string, providerRep gocloak.IdentityProviderRepresentation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIdentityProvider", ctx, token, realm, alias, providerRep)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateIdentityProvider indicates an expected call of UpdateIdentityProvider.
func (mr *MockKeycloakClientMockRecorder) UpdateIdentityProvider(ctx, token, realm, alias, providerRep any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIdentityProvider", reflect.TypeOf((*MockKeycloakClient)(nil).UpdateIdentityProvider), ctx, token, realm, alias, providerRep)
}

// UpdatePermission mocks base method.
func (m *MockKeycloakClient) UpdatePermission(ctx context.Context, token, realm, idOfClient string, permission gocloak.PermissionRepresentation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePermission", ctx, token, realm, idOfClient, permission)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePermission indicates an expected call of UpdatePermission.
func (mr *MockKeycloakClientMockRecorder) UpdatePermission(ctx, token, realm, idOfClient, permission any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePermission", reflect.TypeOf((*MockKeycloakClient)(nil).UpdatePermission), ctx, token, realm, idOfClient, permission)
}

// UpdatePolicy mocks base method.
func (m *MockKeycloakClient) UpdatePolicy(ctx context.Context, token, realm, idOfClient string, policy gocloak.PolicyRepresentation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePolicy", ctx, token, realm, idOfClient, policy)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePolicy indicates an expected call of UpdatePolicy.
func (mr *MockKeycloakClientMockRecorder) UpdatePolicy(ctx, token, realm, idOfClient, policy any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePolicy", reflect.TypeOf((*MockKeycloakClient)(nil).UpdatePolicy), ctx, token, realm, idOfClient, policy)
}

// UpdateRealm mocks base method.
func (m *MockKeycloakClient) UpdateRealm(ctx context.Context, token string, realm gocloak.RealmRepresentation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRealm", ctx, token, realm)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRealm indicates an expected call of UpdateRealm.
func (mr *MockKeycloakClientMockRecorder) UpdateRealm(ctx, token, realm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRealm", reflect.TypeOf((*MockKeycloakClient)(nil).UpdateRealm), ctx, token, realm)
}

// UpdateRealmRole mocks base method.
func (m *MockKeycloakClient) UpdateRealmRole(ctx context.Context, token, realm, roleName string, role gocloak.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRealmRole", ctx, token, realm, roleName, role)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRealmRole indicates an expected call of UpdateRealmRole.
func (mr *MockKeycloakClientMockRecorder) UpdateRealmRole(ctx, token, realm, roleName, role any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRealmRole", reflect.TypeOf((*MockKeycloakClient)(nil).UpdateRealmRole), ctx, token, realm, roleName, role)
}

// UpdateRealmRoleByID mocks base method.
func (m *MockKeycloakClient) UpdateRealmRoleByID(ctx context.Context, token, realm, roleID string, role gocloak.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRealmRoleByID", ctx, token, realm, roleID, role)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRealmRoleByID indicates an expected call of UpdateRealmRoleByID.
func (mr *MockKeycloakClientMockRecorder) UpdateRealmRoleByID(ctx, token, realm, roleID, role any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRealmRoleByID", reflect.TypeOf((*MockKeycloakClient)(nil).UpdateRealmRoleByID), ctx, token, realm, roleID, role)
}

// UpdateResource mocks base method.
func (m *MockKeycloakClient) UpdateResource(ctx context.Context, token, realm, idOfClient string, resource gocloak.ResourceRepresentation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateResource", ctx, token, realm, idOfClient, resource)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateResource indicates an expected call of UpdateResource.
func (mr *MockKeycloakClientMockRecorder) UpdateResource(ctx, token, realm, idOfClient, resource any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResource", reflect.TypeOf((*MockKeycloakClient)(nil).UpdateResource), ctx, token, realm, idOfClient, resource)
}

// UpdateResourceClient mocks base method.
func (m *MockKeycloakClient) UpdateResourceClient(ctx context.Context, token, realm string, resource gocloak.ResourceRepresentation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateResourceClient", ctx, token, realm, resource)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateResourceClient indicates an expected call of UpdateResourceClient.
func (mr *MockKeycloakClientMockRecorder) UpdateResourceClient(ctx, token, realm, resource any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResourceClient", reflect.TypeOf((*MockKeycloakClient)(nil).UpdateResourceClient), ctx, token, realm, resource)
}

// UpdateResourcePolicy mocks base method.
func (m *MockKeycloakClient) UpdateResourcePolicy(ctx context.Context, token, realm, permissionID string, policy gocloak.ResourcePolicyRepresentation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateResourcePolicy", ctx, token, realm, permissionID, policy)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateResourcePolicy indicates an expected call of UpdateResourcePolicy.
func (mr *MockKeycloakClientMockRecorder) UpdateResourcePolicy(ctx, token, realm, permissionID, policy any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResourcePolicy", reflect.TypeOf((*MockKeycloakClient)(nil).UpdateResourcePolicy), ctx, token, realm, permissionID, policy)
}

// UpdateRole mocks base method.
func (m *MockKeycloakClient) UpdateRole(ctx context.Context, accessToken, realm, idOfClient string, role gocloak.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRole", ctx, accessToken, realm, idOfClient, role)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRole indicates an expected call of UpdateRole.
func (mr *MockKeycloakClientMockRecorder) UpdateRole(ctx, accessToken, realm, idOfClient, role any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRole", reflect.TypeOf((*MockKeycloakClient)(nil).UpdateRole), ctx, accessToken, realm, idOfClient, role)
}

// UpdateScope mocks base method.
func (m *MockKeycloakClient) UpdateScope(ctx context.Context, token, realm, idOfClient string, resource gocloak.ScopeRepresentation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateScope", ctx, token, realm, idOfClient, resource)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateScope indicates an expected call of UpdateScope.
func (mr *MockKeycloakClientMockRecorder) UpdateScope(ctx, token, realm, idOfClient, resource any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateScope", reflect.TypeOf((*MockKeycloakClient)(nil).UpdateScope), ctx, token, realm, idOfClient, resource)
}

// UpdateUser mocks base method.
func (m *MockKeycloakClient) UpdateUser(ctx context.Context, accessToken, realm string, user gocloak.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, accessToken, realm, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockKeycloakClientMockRecorder) UpdateUser(ctx, accessToken, realm, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockKeycloakClient)(nil).UpdateUser), ctx, accessToken, realm, user)
}

// UpdateUserPermission mocks base method.
func (m *MockKeycloakClient) UpdateUserPermission(ctx context.Context, token, realm string, permission gocloak.PermissionGrantParams) (*gocloak.PermissionGrantResponseRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserPermission", ctx, token, realm, permission)
	ret0, _ := ret[0].(*gocloak.PermissionGrantResponseRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserPermission indicates an expected call of UpdateUserPermission.
func (mr *MockKeycloakClientMockRecorder) UpdateUserPermission(ctx, token, realm, permission any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPermission", reflect.TypeOf((*MockKeycloakClient)(nil).UpdateUserPermission), ctx, token, realm, permission)
}
