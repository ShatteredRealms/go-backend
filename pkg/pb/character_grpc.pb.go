// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.15.8
// source: sro/character/character.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CharacterService_GetCharacters_FullMethodName           = "/sro.character.CharacterService/GetCharacters"
	CharacterService_GetCharacter_FullMethodName            = "/sro.character.CharacterService/GetCharacter"
	CharacterService_CreateCharacter_FullMethodName         = "/sro.character.CharacterService/CreateCharacter"
	CharacterService_DeleteCharacter_FullMethodName         = "/sro.character.CharacterService/DeleteCharacter"
	CharacterService_GetAllCharactersForUser_FullMethodName = "/sro.character.CharacterService/GetAllCharactersForUser"
	CharacterService_EditCharacter_FullMethodName           = "/sro.character.CharacterService/EditCharacter"
	CharacterService_AddCharacterPlayTime_FullMethodName    = "/sro.character.CharacterService/AddCharacterPlayTime"
	CharacterService_GetInventory_FullMethodName            = "/sro.character.CharacterService/GetInventory"
	CharacterService_SetInventory_FullMethodName            = "/sro.character.CharacterService/SetInventory"
)

// CharacterServiceClient is the client API for CharacterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CharacterServiceClient interface {
	GetCharacters(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CharactersDetails, error)
	GetCharacter(ctx context.Context, in *CharacterTarget, opts ...grpc.CallOption) (*CharacterDetails, error)
	CreateCharacter(ctx context.Context, in *CreateCharacterRequest, opts ...grpc.CallOption) (*CharacterDetails, error)
	DeleteCharacter(ctx context.Context, in *CharacterTarget, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetAllCharactersForUser(ctx context.Context, in *UserTarget, opts ...grpc.CallOption) (*CharactersDetails, error)
	EditCharacter(ctx context.Context, in *EditCharacterRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Adds the given amount of playtime to the character and returns the total
	// playtime
	AddCharacterPlayTime(ctx context.Context, in *AddPlayTimeRequest, opts ...grpc.CallOption) (*PlayTimeResponse, error)
	GetInventory(ctx context.Context, in *CharacterTarget, opts ...grpc.CallOption) (*Inventory, error)
	SetInventory(ctx context.Context, in *UpdateInventoryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type characterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCharacterServiceClient(cc grpc.ClientConnInterface) CharacterServiceClient {
	return &characterServiceClient{cc}
}

func (c *characterServiceClient) GetCharacters(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CharactersDetails, error) {
	out := new(CharactersDetails)
	err := c.cc.Invoke(ctx, CharacterService_GetCharacters_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *characterServiceClient) GetCharacter(ctx context.Context, in *CharacterTarget, opts ...grpc.CallOption) (*CharacterDetails, error) {
	out := new(CharacterDetails)
	err := c.cc.Invoke(ctx, CharacterService_GetCharacter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *characterServiceClient) CreateCharacter(ctx context.Context, in *CreateCharacterRequest, opts ...grpc.CallOption) (*CharacterDetails, error) {
	out := new(CharacterDetails)
	err := c.cc.Invoke(ctx, CharacterService_CreateCharacter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *characterServiceClient) DeleteCharacter(ctx context.Context, in *CharacterTarget, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CharacterService_DeleteCharacter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *characterServiceClient) GetAllCharactersForUser(ctx context.Context, in *UserTarget, opts ...grpc.CallOption) (*CharactersDetails, error) {
	out := new(CharactersDetails)
	err := c.cc.Invoke(ctx, CharacterService_GetAllCharactersForUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *characterServiceClient) EditCharacter(ctx context.Context, in *EditCharacterRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CharacterService_EditCharacter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *characterServiceClient) AddCharacterPlayTime(ctx context.Context, in *AddPlayTimeRequest, opts ...grpc.CallOption) (*PlayTimeResponse, error) {
	out := new(PlayTimeResponse)
	err := c.cc.Invoke(ctx, CharacterService_AddCharacterPlayTime_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *characterServiceClient) GetInventory(ctx context.Context, in *CharacterTarget, opts ...grpc.CallOption) (*Inventory, error) {
	out := new(Inventory)
	err := c.cc.Invoke(ctx, CharacterService_GetInventory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *characterServiceClient) SetInventory(ctx context.Context, in *UpdateInventoryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CharacterService_SetInventory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CharacterServiceServer is the server API for CharacterService service.
// All implementations must embed UnimplementedCharacterServiceServer
// for forward compatibility
type CharacterServiceServer interface {
	GetCharacters(context.Context, *emptypb.Empty) (*CharactersDetails, error)
	GetCharacter(context.Context, *CharacterTarget) (*CharacterDetails, error)
	CreateCharacter(context.Context, *CreateCharacterRequest) (*CharacterDetails, error)
	DeleteCharacter(context.Context, *CharacterTarget) (*emptypb.Empty, error)
	GetAllCharactersForUser(context.Context, *UserTarget) (*CharactersDetails, error)
	EditCharacter(context.Context, *EditCharacterRequest) (*emptypb.Empty, error)
	// Adds the given amount of playtime to the character and returns the total
	// playtime
	AddCharacterPlayTime(context.Context, *AddPlayTimeRequest) (*PlayTimeResponse, error)
	GetInventory(context.Context, *CharacterTarget) (*Inventory, error)
	SetInventory(context.Context, *UpdateInventoryRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedCharacterServiceServer()
}

// UnimplementedCharacterServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCharacterServiceServer struct {
}

func (UnimplementedCharacterServiceServer) GetCharacters(context.Context, *emptypb.Empty) (*CharactersDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCharacters not implemented")
}
func (UnimplementedCharacterServiceServer) GetCharacter(context.Context, *CharacterTarget) (*CharacterDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCharacter not implemented")
}
func (UnimplementedCharacterServiceServer) CreateCharacter(context.Context, *CreateCharacterRequest) (*CharacterDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCharacter not implemented")
}
func (UnimplementedCharacterServiceServer) DeleteCharacter(context.Context, *CharacterTarget) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCharacter not implemented")
}
func (UnimplementedCharacterServiceServer) GetAllCharactersForUser(context.Context, *UserTarget) (*CharactersDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCharactersForUser not implemented")
}
func (UnimplementedCharacterServiceServer) EditCharacter(context.Context, *EditCharacterRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditCharacter not implemented")
}
func (UnimplementedCharacterServiceServer) AddCharacterPlayTime(context.Context, *AddPlayTimeRequest) (*PlayTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCharacterPlayTime not implemented")
}
func (UnimplementedCharacterServiceServer) GetInventory(context.Context, *CharacterTarget) (*Inventory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInventory not implemented")
}
func (UnimplementedCharacterServiceServer) SetInventory(context.Context, *UpdateInventoryRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetInventory not implemented")
}
func (UnimplementedCharacterServiceServer) mustEmbedUnimplementedCharacterServiceServer() {}

// UnsafeCharacterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CharacterServiceServer will
// result in compilation errors.
type UnsafeCharacterServiceServer interface {
	mustEmbedUnimplementedCharacterServiceServer()
}

func RegisterCharacterServiceServer(s grpc.ServiceRegistrar, srv CharacterServiceServer) {
	s.RegisterService(&CharacterService_ServiceDesc, srv)
}

func _CharacterService_GetCharacters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharacterServiceServer).GetCharacters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CharacterService_GetCharacters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharacterServiceServer).GetCharacters(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CharacterService_GetCharacter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CharacterTarget)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharacterServiceServer).GetCharacter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CharacterService_GetCharacter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharacterServiceServer).GetCharacter(ctx, req.(*CharacterTarget))
	}
	return interceptor(ctx, in, info, handler)
}

func _CharacterService_CreateCharacter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCharacterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharacterServiceServer).CreateCharacter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CharacterService_CreateCharacter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharacterServiceServer).CreateCharacter(ctx, req.(*CreateCharacterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CharacterService_DeleteCharacter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CharacterTarget)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharacterServiceServer).DeleteCharacter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CharacterService_DeleteCharacter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharacterServiceServer).DeleteCharacter(ctx, req.(*CharacterTarget))
	}
	return interceptor(ctx, in, info, handler)
}

func _CharacterService_GetAllCharactersForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserTarget)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharacterServiceServer).GetAllCharactersForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CharacterService_GetAllCharactersForUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharacterServiceServer).GetAllCharactersForUser(ctx, req.(*UserTarget))
	}
	return interceptor(ctx, in, info, handler)
}

func _CharacterService_EditCharacter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditCharacterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharacterServiceServer).EditCharacter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CharacterService_EditCharacter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharacterServiceServer).EditCharacter(ctx, req.(*EditCharacterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CharacterService_AddCharacterPlayTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPlayTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharacterServiceServer).AddCharacterPlayTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CharacterService_AddCharacterPlayTime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharacterServiceServer).AddCharacterPlayTime(ctx, req.(*AddPlayTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CharacterService_GetInventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CharacterTarget)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharacterServiceServer).GetInventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CharacterService_GetInventory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharacterServiceServer).GetInventory(ctx, req.(*CharacterTarget))
	}
	return interceptor(ctx, in, info, handler)
}

func _CharacterService_SetInventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInventoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharacterServiceServer).SetInventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CharacterService_SetInventory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharacterServiceServer).SetInventory(ctx, req.(*UpdateInventoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CharacterService_ServiceDesc is the grpc.ServiceDesc for CharacterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CharacterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sro.character.CharacterService",
	HandlerType: (*CharacterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCharacters",
			Handler:    _CharacterService_GetCharacters_Handler,
		},
		{
			MethodName: "GetCharacter",
			Handler:    _CharacterService_GetCharacter_Handler,
		},
		{
			MethodName: "CreateCharacter",
			Handler:    _CharacterService_CreateCharacter_Handler,
		},
		{
			MethodName: "DeleteCharacter",
			Handler:    _CharacterService_DeleteCharacter_Handler,
		},
		{
			MethodName: "GetAllCharactersForUser",
			Handler:    _CharacterService_GetAllCharactersForUser_Handler,
		},
		{
			MethodName: "EditCharacter",
			Handler:    _CharacterService_EditCharacter_Handler,
		},
		{
			MethodName: "AddCharacterPlayTime",
			Handler:    _CharacterService_AddCharacterPlayTime_Handler,
		},
		{
			MethodName: "GetInventory",
			Handler:    _CharacterService_GetInventory_Handler,
		},
		{
			MethodName: "SetInventory",
			Handler:    _CharacterService_SetInventory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sro/character/character.proto",
}
