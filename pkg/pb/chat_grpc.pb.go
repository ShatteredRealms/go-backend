// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.15.8
// source: sro/chat/chat.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ChatService_ConnectChannel_FullMethodName                      = "/sro.chat.ChatService/ConnectChannel"
	ChatService_ConnectDirectMessage_FullMethodName                = "/sro.chat.ChatService/ConnectDirectMessage"
	ChatService_SendChatMessage_FullMethodName                     = "/sro.chat.ChatService/SendChatMessage"
	ChatService_SendDirectMessage_FullMethodName                   = "/sro.chat.ChatService/SendDirectMessage"
	ChatService_GetChannel_FullMethodName                          = "/sro.chat.ChatService/GetChannel"
	ChatService_AllChatChannels_FullMethodName                     = "/sro.chat.ChatService/AllChatChannels"
	ChatService_CreateChannel_FullMethodName                       = "/sro.chat.ChatService/CreateChannel"
	ChatService_DeleteChannel_FullMethodName                       = "/sro.chat.ChatService/DeleteChannel"
	ChatService_EditChannel_FullMethodName                         = "/sro.chat.ChatService/EditChannel"
	ChatService_GetAuthorizedChatChannels_FullMethodName           = "/sro.chat.ChatService/GetAuthorizedChatChannels"
	ChatService_UpdateUserChatChannelAuthorizations_FullMethodName = "/sro.chat.ChatService/UpdateUserChatChannelAuthorizations"
	ChatService_SetUserChatChannelAuthorizations_FullMethodName    = "/sro.chat.ChatService/SetUserChatChannelAuthorizations"
)

// ChatServiceClient is the client API for ChatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatServiceClient interface {
	ConnectChannel(ctx context.Context, in *ChatChannelTarget, opts ...grpc.CallOption) (ChatService_ConnectChannelClient, error)
	ConnectDirectMessage(ctx context.Context, in *CharacterTarget, opts ...grpc.CallOption) (ChatService_ConnectDirectMessageClient, error)
	SendChatMessage(ctx context.Context, in *SendChatMessageRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SendDirectMessage(ctx context.Context, in *SendDirectMessageRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetChannel(ctx context.Context, in *ChatChannelTarget, opts ...grpc.CallOption) (*ChatChannel, error)
	AllChatChannels(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ChatChannels, error)
	CreateChannel(ctx context.Context, in *CreateChannelMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteChannel(ctx context.Context, in *ChatChannelTarget, opts ...grpc.CallOption) (*emptypb.Empty, error)
	EditChannel(ctx context.Context, in *UpdateChatChannelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetAuthorizedChatChannels(ctx context.Context, in *CharacterTarget, opts ...grpc.CallOption) (*ChatChannels, error)
	UpdateUserChatChannelAuthorizations(ctx context.Context, in *RequestChatChannelAuthChange, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SetUserChatChannelAuthorizations(ctx context.Context, in *RequestSetChannelAuth, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type chatServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatServiceClient(cc grpc.ClientConnInterface) ChatServiceClient {
	return &chatServiceClient{cc}
}

func (c *chatServiceClient) ConnectChannel(ctx context.Context, in *ChatChannelTarget, opts ...grpc.CallOption) (ChatService_ConnectChannelClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChatService_ServiceDesc.Streams[0], ChatService_ConnectChannel_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &chatServiceConnectChannelClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChatService_ConnectChannelClient interface {
	Recv() (*ChatMessage, error)
	grpc.ClientStream
}

type chatServiceConnectChannelClient struct {
	grpc.ClientStream
}

func (x *chatServiceConnectChannelClient) Recv() (*ChatMessage, error) {
	m := new(ChatMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chatServiceClient) ConnectDirectMessage(ctx context.Context, in *CharacterTarget, opts ...grpc.CallOption) (ChatService_ConnectDirectMessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChatService_ServiceDesc.Streams[1], ChatService_ConnectDirectMessage_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &chatServiceConnectDirectMessageClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChatService_ConnectDirectMessageClient interface {
	Recv() (*ChatMessage, error)
	grpc.ClientStream
}

type chatServiceConnectDirectMessageClient struct {
	grpc.ClientStream
}

func (x *chatServiceConnectDirectMessageClient) Recv() (*ChatMessage, error) {
	m := new(ChatMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chatServiceClient) SendChatMessage(ctx context.Context, in *SendChatMessageRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ChatService_SendChatMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) SendDirectMessage(ctx context.Context, in *SendDirectMessageRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ChatService_SendDirectMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) GetChannel(ctx context.Context, in *ChatChannelTarget, opts ...grpc.CallOption) (*ChatChannel, error) {
	out := new(ChatChannel)
	err := c.cc.Invoke(ctx, ChatService_GetChannel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) AllChatChannels(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ChatChannels, error) {
	out := new(ChatChannels)
	err := c.cc.Invoke(ctx, ChatService_AllChatChannels_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) CreateChannel(ctx context.Context, in *CreateChannelMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ChatService_CreateChannel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) DeleteChannel(ctx context.Context, in *ChatChannelTarget, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ChatService_DeleteChannel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) EditChannel(ctx context.Context, in *UpdateChatChannelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ChatService_EditChannel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) GetAuthorizedChatChannels(ctx context.Context, in *CharacterTarget, opts ...grpc.CallOption) (*ChatChannels, error) {
	out := new(ChatChannels)
	err := c.cc.Invoke(ctx, ChatService_GetAuthorizedChatChannels_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) UpdateUserChatChannelAuthorizations(ctx context.Context, in *RequestChatChannelAuthChange, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ChatService_UpdateUserChatChannelAuthorizations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) SetUserChatChannelAuthorizations(ctx context.Context, in *RequestSetChannelAuth, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ChatService_SetUserChatChannelAuthorizations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatServiceServer is the server API for ChatService service.
// All implementations must embed UnimplementedChatServiceServer
// for forward compatibility
type ChatServiceServer interface {
	ConnectChannel(*ChatChannelTarget, ChatService_ConnectChannelServer) error
	ConnectDirectMessage(*CharacterTarget, ChatService_ConnectDirectMessageServer) error
	SendChatMessage(context.Context, *SendChatMessageRequest) (*emptypb.Empty, error)
	SendDirectMessage(context.Context, *SendDirectMessageRequest) (*emptypb.Empty, error)
	GetChannel(context.Context, *ChatChannelTarget) (*ChatChannel, error)
	AllChatChannels(context.Context, *emptypb.Empty) (*ChatChannels, error)
	CreateChannel(context.Context, *CreateChannelMessage) (*emptypb.Empty, error)
	DeleteChannel(context.Context, *ChatChannelTarget) (*emptypb.Empty, error)
	EditChannel(context.Context, *UpdateChatChannelRequest) (*emptypb.Empty, error)
	GetAuthorizedChatChannels(context.Context, *CharacterTarget) (*ChatChannels, error)
	UpdateUserChatChannelAuthorizations(context.Context, *RequestChatChannelAuthChange) (*emptypb.Empty, error)
	SetUserChatChannelAuthorizations(context.Context, *RequestSetChannelAuth) (*emptypb.Empty, error)
	mustEmbedUnimplementedChatServiceServer()
}

// UnimplementedChatServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChatServiceServer struct {
}

func (UnimplementedChatServiceServer) ConnectChannel(*ChatChannelTarget, ChatService_ConnectChannelServer) error {
	return status.Errorf(codes.Unimplemented, "method ConnectChannel not implemented")
}
func (UnimplementedChatServiceServer) ConnectDirectMessage(*CharacterTarget, ChatService_ConnectDirectMessageServer) error {
	return status.Errorf(codes.Unimplemented, "method ConnectDirectMessage not implemented")
}
func (UnimplementedChatServiceServer) SendChatMessage(context.Context, *SendChatMessageRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendChatMessage not implemented")
}
func (UnimplementedChatServiceServer) SendDirectMessage(context.Context, *SendDirectMessageRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendDirectMessage not implemented")
}
func (UnimplementedChatServiceServer) GetChannel(context.Context, *ChatChannelTarget) (*ChatChannel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannel not implemented")
}
func (UnimplementedChatServiceServer) AllChatChannels(context.Context, *emptypb.Empty) (*ChatChannels, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllChatChannels not implemented")
}
func (UnimplementedChatServiceServer) CreateChannel(context.Context, *CreateChannelMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChannel not implemented")
}
func (UnimplementedChatServiceServer) DeleteChannel(context.Context, *ChatChannelTarget) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChannel not implemented")
}
func (UnimplementedChatServiceServer) EditChannel(context.Context, *UpdateChatChannelRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditChannel not implemented")
}
func (UnimplementedChatServiceServer) GetAuthorizedChatChannels(context.Context, *CharacterTarget) (*ChatChannels, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthorizedChatChannels not implemented")
}
func (UnimplementedChatServiceServer) UpdateUserChatChannelAuthorizations(context.Context, *RequestChatChannelAuthChange) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserChatChannelAuthorizations not implemented")
}
func (UnimplementedChatServiceServer) SetUserChatChannelAuthorizations(context.Context, *RequestSetChannelAuth) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserChatChannelAuthorizations not implemented")
}
func (UnimplementedChatServiceServer) mustEmbedUnimplementedChatServiceServer() {}

// UnsafeChatServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatServiceServer will
// result in compilation errors.
type UnsafeChatServiceServer interface {
	mustEmbedUnimplementedChatServiceServer()
}

func RegisterChatServiceServer(s grpc.ServiceRegistrar, srv ChatServiceServer) {
	s.RegisterService(&ChatService_ServiceDesc, srv)
}

func _ChatService_ConnectChannel_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChatChannelTarget)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatServiceServer).ConnectChannel(m, &chatServiceConnectChannelServer{stream})
}

type ChatService_ConnectChannelServer interface {
	Send(*ChatMessage) error
	grpc.ServerStream
}

type chatServiceConnectChannelServer struct {
	grpc.ServerStream
}

func (x *chatServiceConnectChannelServer) Send(m *ChatMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _ChatService_ConnectDirectMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CharacterTarget)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatServiceServer).ConnectDirectMessage(m, &chatServiceConnectDirectMessageServer{stream})
}

type ChatService_ConnectDirectMessageServer interface {
	Send(*ChatMessage) error
	grpc.ServerStream
}

type chatServiceConnectDirectMessageServer struct {
	grpc.ServerStream
}

func (x *chatServiceConnectDirectMessageServer) Send(m *ChatMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _ChatService_SendChatMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendChatMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).SendChatMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_SendChatMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).SendChatMessage(ctx, req.(*SendChatMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_SendDirectMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendDirectMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).SendDirectMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_SendDirectMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).SendDirectMessage(ctx, req.(*SendDirectMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_GetChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatChannelTarget)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).GetChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_GetChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).GetChannel(ctx, req.(*ChatChannelTarget))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_AllChatChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).AllChatChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_AllChatChannels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).AllChatChannels(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_CreateChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChannelMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).CreateChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_CreateChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).CreateChannel(ctx, req.(*CreateChannelMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_DeleteChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatChannelTarget)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).DeleteChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_DeleteChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).DeleteChannel(ctx, req.(*ChatChannelTarget))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_EditChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChatChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).EditChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_EditChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).EditChannel(ctx, req.(*UpdateChatChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_GetAuthorizedChatChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CharacterTarget)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).GetAuthorizedChatChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_GetAuthorizedChatChannels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).GetAuthorizedChatChannels(ctx, req.(*CharacterTarget))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_UpdateUserChatChannelAuthorizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestChatChannelAuthChange)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).UpdateUserChatChannelAuthorizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_UpdateUserChatChannelAuthorizations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).UpdateUserChatChannelAuthorizations(ctx, req.(*RequestChatChannelAuthChange))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_SetUserChatChannelAuthorizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestSetChannelAuth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).SetUserChatChannelAuthorizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_SetUserChatChannelAuthorizations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).SetUserChatChannelAuthorizations(ctx, req.(*RequestSetChannelAuth))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatService_ServiceDesc is the grpc.ServiceDesc for ChatService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sro.chat.ChatService",
	HandlerType: (*ChatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendChatMessage",
			Handler:    _ChatService_SendChatMessage_Handler,
		},
		{
			MethodName: "SendDirectMessage",
			Handler:    _ChatService_SendDirectMessage_Handler,
		},
		{
			MethodName: "GetChannel",
			Handler:    _ChatService_GetChannel_Handler,
		},
		{
			MethodName: "AllChatChannels",
			Handler:    _ChatService_AllChatChannels_Handler,
		},
		{
			MethodName: "CreateChannel",
			Handler:    _ChatService_CreateChannel_Handler,
		},
		{
			MethodName: "DeleteChannel",
			Handler:    _ChatService_DeleteChannel_Handler,
		},
		{
			MethodName: "EditChannel",
			Handler:    _ChatService_EditChannel_Handler,
		},
		{
			MethodName: "GetAuthorizedChatChannels",
			Handler:    _ChatService_GetAuthorizedChatChannels_Handler,
		},
		{
			MethodName: "UpdateUserChatChannelAuthorizations",
			Handler:    _ChatService_UpdateUserChatChannelAuthorizations_Handler,
		},
		{
			MethodName: "SetUserChatChannelAuthorizations",
			Handler:    _ChatService_SetUserChatChannelAuthorizations_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ConnectChannel",
			Handler:       _ChatService_ConnectChannel_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ConnectDirectMessage",
			Handler:       _ChatService_ConnectDirectMessage_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "sro/chat/chat.proto",
}
