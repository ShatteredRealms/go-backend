// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.15.8
// source: sro/gamebackend/connection.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ConnectionService_ConnectGameServer_FullMethodName = "/sro.gamebackend.ConnectionService/ConnectGameServer"
	ConnectionService_VerifyConnect_FullMethodName     = "/sro.gamebackend.ConnectionService/VerifyConnect"
	ConnectionService_TransferPlayer_FullMethodName    = "/sro.gamebackend.ConnectionService/TransferPlayer"
	ConnectionService_IsPlaying_FullMethodName         = "/sro.gamebackend.ConnectionService/IsPlaying"
)

// ConnectionServiceClient is the client API for ConnectionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConnectionServiceClient interface {
	ConnectGameServer(ctx context.Context, in *CharacterTarget, opts ...grpc.CallOption) (*ConnectGameServerResponse, error)
	VerifyConnect(ctx context.Context, in *VerifyConnectRequest, opts ...grpc.CallOption) (*CharacterDetails, error)
	TransferPlayer(ctx context.Context, in *TransferPlayerRequest, opts ...grpc.CallOption) (*ConnectGameServerResponse, error)
	IsPlaying(ctx context.Context, in *CharacterTarget, opts ...grpc.CallOption) (*ConnectionStatus, error)
}

type connectionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConnectionServiceClient(cc grpc.ClientConnInterface) ConnectionServiceClient {
	return &connectionServiceClient{cc}
}

func (c *connectionServiceClient) ConnectGameServer(ctx context.Context, in *CharacterTarget, opts ...grpc.CallOption) (*ConnectGameServerResponse, error) {
	out := new(ConnectGameServerResponse)
	err := c.cc.Invoke(ctx, ConnectionService_ConnectGameServer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionServiceClient) VerifyConnect(ctx context.Context, in *VerifyConnectRequest, opts ...grpc.CallOption) (*CharacterDetails, error) {
	out := new(CharacterDetails)
	err := c.cc.Invoke(ctx, ConnectionService_VerifyConnect_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionServiceClient) TransferPlayer(ctx context.Context, in *TransferPlayerRequest, opts ...grpc.CallOption) (*ConnectGameServerResponse, error) {
	out := new(ConnectGameServerResponse)
	err := c.cc.Invoke(ctx, ConnectionService_TransferPlayer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionServiceClient) IsPlaying(ctx context.Context, in *CharacterTarget, opts ...grpc.CallOption) (*ConnectionStatus, error) {
	out := new(ConnectionStatus)
	err := c.cc.Invoke(ctx, ConnectionService_IsPlaying_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConnectionServiceServer is the server API for ConnectionService service.
// All implementations must embed UnimplementedConnectionServiceServer
// for forward compatibility
type ConnectionServiceServer interface {
	ConnectGameServer(context.Context, *CharacterTarget) (*ConnectGameServerResponse, error)
	VerifyConnect(context.Context, *VerifyConnectRequest) (*CharacterDetails, error)
	TransferPlayer(context.Context, *TransferPlayerRequest) (*ConnectGameServerResponse, error)
	IsPlaying(context.Context, *CharacterTarget) (*ConnectionStatus, error)
	mustEmbedUnimplementedConnectionServiceServer()
}

// UnimplementedConnectionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedConnectionServiceServer struct {
}

func (UnimplementedConnectionServiceServer) ConnectGameServer(context.Context, *CharacterTarget) (*ConnectGameServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectGameServer not implemented")
}
func (UnimplementedConnectionServiceServer) VerifyConnect(context.Context, *VerifyConnectRequest) (*CharacterDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyConnect not implemented")
}
func (UnimplementedConnectionServiceServer) TransferPlayer(context.Context, *TransferPlayerRequest) (*ConnectGameServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferPlayer not implemented")
}
func (UnimplementedConnectionServiceServer) IsPlaying(context.Context, *CharacterTarget) (*ConnectionStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsPlaying not implemented")
}
func (UnimplementedConnectionServiceServer) mustEmbedUnimplementedConnectionServiceServer() {}

// UnsafeConnectionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConnectionServiceServer will
// result in compilation errors.
type UnsafeConnectionServiceServer interface {
	mustEmbedUnimplementedConnectionServiceServer()
}

func RegisterConnectionServiceServer(s grpc.ServiceRegistrar, srv ConnectionServiceServer) {
	s.RegisterService(&ConnectionService_ServiceDesc, srv)
}

func _ConnectionService_ConnectGameServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CharacterTarget)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionServiceServer).ConnectGameServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectionService_ConnectGameServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionServiceServer).ConnectGameServer(ctx, req.(*CharacterTarget))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionService_VerifyConnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyConnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionServiceServer).VerifyConnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectionService_VerifyConnect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionServiceServer).VerifyConnect(ctx, req.(*VerifyConnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionService_TransferPlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferPlayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionServiceServer).TransferPlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectionService_TransferPlayer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionServiceServer).TransferPlayer(ctx, req.(*TransferPlayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionService_IsPlaying_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CharacterTarget)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionServiceServer).IsPlaying(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectionService_IsPlaying_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionServiceServer).IsPlaying(ctx, req.(*CharacterTarget))
	}
	return interceptor(ctx, in, info, handler)
}

// ConnectionService_ServiceDesc is the grpc.ServiceDesc for ConnectionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConnectionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sro.gamebackend.ConnectionService",
	HandlerType: (*ConnectionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConnectGameServer",
			Handler:    _ConnectionService_ConnectGameServer_Handler,
		},
		{
			MethodName: "VerifyConnect",
			Handler:    _ConnectionService_VerifyConnect_Handler,
		},
		{
			MethodName: "TransferPlayer",
			Handler:    _ConnectionService_TransferPlayer_Handler,
		},
		{
			MethodName: "IsPlaying",
			Handler:    _ConnectionService_IsPlaying_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sro/gamebackend/connection.proto",
}
