// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.15.8
// source: sro/gamebackend/servermanager.proto

package pb

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DimensionTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to FindBy:
	//
	//	*DimensionTarget_Id
	//	*DimensionTarget_Name
	FindBy isDimensionTarget_FindBy `protobuf_oneof:"FindBy"`
}

func (x *DimensionTarget) Reset() {
	*x = DimensionTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sro_gamebackend_servermanager_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DimensionTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DimensionTarget) ProtoMessage() {}

func (x *DimensionTarget) ProtoReflect() protoreflect.Message {
	mi := &file_sro_gamebackend_servermanager_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DimensionTarget.ProtoReflect.Descriptor instead.
func (*DimensionTarget) Descriptor() ([]byte, []int) {
	return file_sro_gamebackend_servermanager_proto_rawDescGZIP(), []int{0}
}

func (m *DimensionTarget) GetFindBy() isDimensionTarget_FindBy {
	if m != nil {
		return m.FindBy
	}
	return nil
}

func (x *DimensionTarget) GetId() string {
	if x, ok := x.GetFindBy().(*DimensionTarget_Id); ok {
		return x.Id
	}
	return ""
}

func (x *DimensionTarget) GetName() string {
	if x, ok := x.GetFindBy().(*DimensionTarget_Name); ok {
		return x.Name
	}
	return ""
}

type isDimensionTarget_FindBy interface {
	isDimensionTarget_FindBy()
}

type DimensionTarget_Id struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3,oneof"`
}

type DimensionTarget_Name struct {
	Name string `protobuf:"bytes,2,opt,name=name,proto3,oneof"`
}

func (*DimensionTarget_Id) isDimensionTarget_FindBy() {}

func (*DimensionTarget_Name) isDimensionTarget_FindBy() {}

type MapTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to FindBy:
	//
	//	*MapTarget_Id
	//	*MapTarget_Name
	FindBy isMapTarget_FindBy `protobuf_oneof:"FindBy"`
}

func (x *MapTarget) Reset() {
	*x = MapTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sro_gamebackend_servermanager_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapTarget) ProtoMessage() {}

func (x *MapTarget) ProtoReflect() protoreflect.Message {
	mi := &file_sro_gamebackend_servermanager_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapTarget.ProtoReflect.Descriptor instead.
func (*MapTarget) Descriptor() ([]byte, []int) {
	return file_sro_gamebackend_servermanager_proto_rawDescGZIP(), []int{1}
}

func (m *MapTarget) GetFindBy() isMapTarget_FindBy {
	if m != nil {
		return m.FindBy
	}
	return nil
}

func (x *MapTarget) GetId() string {
	if x, ok := x.GetFindBy().(*MapTarget_Id); ok {
		return x.Id
	}
	return ""
}

func (x *MapTarget) GetName() string {
	if x, ok := x.GetFindBy().(*MapTarget_Name); ok {
		return x.Name
	}
	return ""
}

type isMapTarget_FindBy interface {
	isMapTarget_FindBy()
}

type MapTarget_Id struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3,oneof"`
}

type MapTarget_Name struct {
	Name string `protobuf:"bytes,2,opt,name=name,proto3,oneof"`
}

func (*MapTarget_Id) isMapTarget_FindBy() {}

func (*MapTarget_Name) isMapTarget_FindBy() {}

type CreateDimensionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version  string   `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	MapIds   []string `protobuf:"bytes,3,rep,name=map_ids,json=mapIds,proto3" json:"map_ids,omitempty"`
	Location string   `protobuf:"bytes,4,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *CreateDimensionRequest) Reset() {
	*x = CreateDimensionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sro_gamebackend_servermanager_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDimensionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDimensionRequest) ProtoMessage() {}

func (x *CreateDimensionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sro_gamebackend_servermanager_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDimensionRequest.ProtoReflect.Descriptor instead.
func (*CreateDimensionRequest) Descriptor() ([]byte, []int) {
	return file_sro_gamebackend_servermanager_proto_rawDescGZIP(), []int{2}
}

func (x *CreateDimensionRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateDimensionRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *CreateDimensionRequest) GetMapIds() []string {
	if x != nil {
		return x.MapIds
	}
	return nil
}

func (x *CreateDimensionRequest) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

type DuplicateDimensionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target *DimensionTarget `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	Name   string           `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DuplicateDimensionRequest) Reset() {
	*x = DuplicateDimensionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sro_gamebackend_servermanager_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DuplicateDimensionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DuplicateDimensionRequest) ProtoMessage() {}

func (x *DuplicateDimensionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sro_gamebackend_servermanager_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DuplicateDimensionRequest.ProtoReflect.Descriptor instead.
func (*DuplicateDimensionRequest) Descriptor() ([]byte, []int) {
	return file_sro_gamebackend_servermanager_proto_rawDescGZIP(), []int{3}
}

func (x *DuplicateDimensionRequest) GetTarget() *DimensionTarget {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *DuplicateDimensionRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type EditDimensionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target *DimensionTarget `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	// Types that are assignable to OptionalName:
	//
	//	*EditDimensionRequest_Name
	OptionalName isEditDimensionRequest_OptionalName `protobuf_oneof:"optional_name"`
	// Types that are assignable to OptionalVersion:
	//
	//	*EditDimensionRequest_Version
	OptionalVersion isEditDimensionRequest_OptionalVersion `protobuf_oneof:"optional_version"`
	EditMaps        bool                                   `protobuf:"varint,4,opt,name=edit_maps,json=editMaps,proto3" json:"edit_maps,omitempty"`
	MapIds          []string                               `protobuf:"bytes,5,rep,name=map_ids,json=mapIds,proto3" json:"map_ids,omitempty"`
	// Types that are assignable to OptionalLocation:
	//
	//	*EditDimensionRequest_Location
	OptionalLocation isEditDimensionRequest_OptionalLocation `protobuf_oneof:"optional_location"`
}

func (x *EditDimensionRequest) Reset() {
	*x = EditDimensionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sro_gamebackend_servermanager_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditDimensionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditDimensionRequest) ProtoMessage() {}

func (x *EditDimensionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sro_gamebackend_servermanager_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditDimensionRequest.ProtoReflect.Descriptor instead.
func (*EditDimensionRequest) Descriptor() ([]byte, []int) {
	return file_sro_gamebackend_servermanager_proto_rawDescGZIP(), []int{4}
}

func (x *EditDimensionRequest) GetTarget() *DimensionTarget {
	if x != nil {
		return x.Target
	}
	return nil
}

func (m *EditDimensionRequest) GetOptionalName() isEditDimensionRequest_OptionalName {
	if m != nil {
		return m.OptionalName
	}
	return nil
}

func (x *EditDimensionRequest) GetName() string {
	if x, ok := x.GetOptionalName().(*EditDimensionRequest_Name); ok {
		return x.Name
	}
	return ""
}

func (m *EditDimensionRequest) GetOptionalVersion() isEditDimensionRequest_OptionalVersion {
	if m != nil {
		return m.OptionalVersion
	}
	return nil
}

func (x *EditDimensionRequest) GetVersion() string {
	if x, ok := x.GetOptionalVersion().(*EditDimensionRequest_Version); ok {
		return x.Version
	}
	return ""
}

func (x *EditDimensionRequest) GetEditMaps() bool {
	if x != nil {
		return x.EditMaps
	}
	return false
}

func (x *EditDimensionRequest) GetMapIds() []string {
	if x != nil {
		return x.MapIds
	}
	return nil
}

func (m *EditDimensionRequest) GetOptionalLocation() isEditDimensionRequest_OptionalLocation {
	if m != nil {
		return m.OptionalLocation
	}
	return nil
}

func (x *EditDimensionRequest) GetLocation() string {
	if x, ok := x.GetOptionalLocation().(*EditDimensionRequest_Location); ok {
		return x.Location
	}
	return ""
}

type isEditDimensionRequest_OptionalName interface {
	isEditDimensionRequest_OptionalName()
}

type EditDimensionRequest_Name struct {
	Name string `protobuf:"bytes,2,opt,name=name,proto3,oneof"`
}

func (*EditDimensionRequest_Name) isEditDimensionRequest_OptionalName() {}

type isEditDimensionRequest_OptionalVersion interface {
	isEditDimensionRequest_OptionalVersion()
}

type EditDimensionRequest_Version struct {
	Version string `protobuf:"bytes,3,opt,name=version,proto3,oneof"`
}

func (*EditDimensionRequest_Version) isEditDimensionRequest_OptionalVersion() {}

type isEditDimensionRequest_OptionalLocation interface {
	isEditDimensionRequest_OptionalLocation()
}

type EditDimensionRequest_Location struct {
	Location string `protobuf:"bytes,8,opt,name=location,proto3,oneof"`
}

func (*EditDimensionRequest_Location) isEditDimensionRequest_OptionalLocation() {}

type Dimension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for the dimension
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Unique name of the dimension
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Server version used for each server instance
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	// All maps the realm should have available
	Maps []*Map `protobuf:"bytes,4,rep,name=maps,proto3" json:"maps,omitempty"`
	// Physical server location
	Location string `protobuf:"bytes,6,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *Dimension) Reset() {
	*x = Dimension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sro_gamebackend_servermanager_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dimension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dimension) ProtoMessage() {}

func (x *Dimension) ProtoReflect() protoreflect.Message {
	mi := &file_sro_gamebackend_servermanager_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dimension.ProtoReflect.Descriptor instead.
func (*Dimension) Descriptor() ([]byte, []int) {
	return file_sro_gamebackend_servermanager_proto_rawDescGZIP(), []int{5}
}

func (x *Dimension) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Dimension) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Dimension) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Dimension) GetMaps() []*Map {
	if x != nil {
		return x.Maps
	}
	return nil
}

func (x *Dimension) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

type Dimensions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dimensions []*Dimension `protobuf:"bytes,1,rep,name=dimensions,proto3" json:"dimensions,omitempty"`
}

func (x *Dimensions) Reset() {
	*x = Dimensions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sro_gamebackend_servermanager_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dimensions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dimensions) ProtoMessage() {}

func (x *Dimensions) ProtoReflect() protoreflect.Message {
	mi := &file_sro_gamebackend_servermanager_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dimensions.ProtoReflect.Descriptor instead.
func (*Dimensions) Descriptor() ([]byte, []int) {
	return file_sro_gamebackend_servermanager_proto_rawDescGZIP(), []int{6}
}

func (x *Dimensions) GetDimensions() []*Dimension {
	if x != nil {
		return x.Dimensions
	}
	return nil
}

type CreateMapRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Path       string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	MaxPlayers uint64 `protobuf:"varint,3,opt,name=max_players,json=maxPlayers,proto3" json:"max_players,omitempty"`
	Instanced  bool   `protobuf:"varint,4,opt,name=instanced,proto3" json:"instanced,omitempty"`
}

func (x *CreateMapRequest) Reset() {
	*x = CreateMapRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sro_gamebackend_servermanager_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMapRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMapRequest) ProtoMessage() {}

func (x *CreateMapRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sro_gamebackend_servermanager_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMapRequest.ProtoReflect.Descriptor instead.
func (*CreateMapRequest) Descriptor() ([]byte, []int) {
	return file_sro_gamebackend_servermanager_proto_rawDescGZIP(), []int{7}
}

func (x *CreateMapRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateMapRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *CreateMapRequest) GetMaxPlayers() uint64 {
	if x != nil {
		return x.MaxPlayers
	}
	return 0
}

func (x *CreateMapRequest) GetInstanced() bool {
	if x != nil {
		return x.Instanced
	}
	return false
}

type Map struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for the map
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// User friendly name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Path to the map for the server to laod
	Path string `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	// maximum amount of players to allow
	MaxPlayers uint64 `protobuf:"varint,4,opt,name=max_players,json=maxPlayers,proto3" json:"max_players,omitempty"`
	// whether the map is instanced
	Instanced bool `protobuf:"varint,5,opt,name=instanced,proto3" json:"instanced,omitempty"`
}

func (x *Map) Reset() {
	*x = Map{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sro_gamebackend_servermanager_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Map) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Map) ProtoMessage() {}

func (x *Map) ProtoReflect() protoreflect.Message {
	mi := &file_sro_gamebackend_servermanager_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Map.ProtoReflect.Descriptor instead.
func (*Map) Descriptor() ([]byte, []int) {
	return file_sro_gamebackend_servermanager_proto_rawDescGZIP(), []int{8}
}

func (x *Map) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Map) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Map) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Map) GetMaxPlayers() uint64 {
	if x != nil {
		return x.MaxPlayers
	}
	return 0
}

func (x *Map) GetInstanced() bool {
	if x != nil {
		return x.Instanced
	}
	return false
}

type EditMapRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target *MapTarget `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	// Types that are assignable to OptionalName:
	//
	//	*EditMapRequest_Name
	OptionalName isEditMapRequest_OptionalName `protobuf_oneof:"optional_name"`
	// Types that are assignable to OptionalPath:
	//
	//	*EditMapRequest_Path
	OptionalPath isEditMapRequest_OptionalPath `protobuf_oneof:"optional_path"`
	// Types that are assignable to OptionalMaxPlayers:
	//
	//	*EditMapRequest_MaxPlayers
	OptionalMaxPlayers isEditMapRequest_OptionalMaxPlayers `protobuf_oneof:"optional_max_players"`
	// Types that are assignable to OptionalInstanced:
	//
	//	*EditMapRequest_Instanced
	OptionalInstanced isEditMapRequest_OptionalInstanced `protobuf_oneof:"optional_instanced"`
}

func (x *EditMapRequest) Reset() {
	*x = EditMapRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sro_gamebackend_servermanager_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditMapRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditMapRequest) ProtoMessage() {}

func (x *EditMapRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sro_gamebackend_servermanager_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditMapRequest.ProtoReflect.Descriptor instead.
func (*EditMapRequest) Descriptor() ([]byte, []int) {
	return file_sro_gamebackend_servermanager_proto_rawDescGZIP(), []int{9}
}

func (x *EditMapRequest) GetTarget() *MapTarget {
	if x != nil {
		return x.Target
	}
	return nil
}

func (m *EditMapRequest) GetOptionalName() isEditMapRequest_OptionalName {
	if m != nil {
		return m.OptionalName
	}
	return nil
}

func (x *EditMapRequest) GetName() string {
	if x, ok := x.GetOptionalName().(*EditMapRequest_Name); ok {
		return x.Name
	}
	return ""
}

func (m *EditMapRequest) GetOptionalPath() isEditMapRequest_OptionalPath {
	if m != nil {
		return m.OptionalPath
	}
	return nil
}

func (x *EditMapRequest) GetPath() string {
	if x, ok := x.GetOptionalPath().(*EditMapRequest_Path); ok {
		return x.Path
	}
	return ""
}

func (m *EditMapRequest) GetOptionalMaxPlayers() isEditMapRequest_OptionalMaxPlayers {
	if m != nil {
		return m.OptionalMaxPlayers
	}
	return nil
}

func (x *EditMapRequest) GetMaxPlayers() uint64 {
	if x, ok := x.GetOptionalMaxPlayers().(*EditMapRequest_MaxPlayers); ok {
		return x.MaxPlayers
	}
	return 0
}

func (m *EditMapRequest) GetOptionalInstanced() isEditMapRequest_OptionalInstanced {
	if m != nil {
		return m.OptionalInstanced
	}
	return nil
}

func (x *EditMapRequest) GetInstanced() bool {
	if x, ok := x.GetOptionalInstanced().(*EditMapRequest_Instanced); ok {
		return x.Instanced
	}
	return false
}

type isEditMapRequest_OptionalName interface {
	isEditMapRequest_OptionalName()
}

type EditMapRequest_Name struct {
	Name string `protobuf:"bytes,2,opt,name=name,proto3,oneof"`
}

func (*EditMapRequest_Name) isEditMapRequest_OptionalName() {}

type isEditMapRequest_OptionalPath interface {
	isEditMapRequest_OptionalPath()
}

type EditMapRequest_Path struct {
	Path string `protobuf:"bytes,3,opt,name=path,proto3,oneof"`
}

func (*EditMapRequest_Path) isEditMapRequest_OptionalPath() {}

type isEditMapRequest_OptionalMaxPlayers interface {
	isEditMapRequest_OptionalMaxPlayers()
}

type EditMapRequest_MaxPlayers struct {
	MaxPlayers uint64 `protobuf:"varint,4,opt,name=max_players,json=maxPlayers,proto3,oneof"`
}

func (*EditMapRequest_MaxPlayers) isEditMapRequest_OptionalMaxPlayers() {}

type isEditMapRequest_OptionalInstanced interface {
	isEditMapRequest_OptionalInstanced()
}

type EditMapRequest_Instanced struct {
	Instanced bool `protobuf:"varint,5,opt,name=instanced,proto3,oneof"`
}

func (*EditMapRequest_Instanced) isEditMapRequest_OptionalInstanced() {}

type Maps struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Maps []*Map `protobuf:"bytes,1,rep,name=maps,proto3" json:"maps,omitempty"`
}

func (x *Maps) Reset() {
	*x = Maps{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sro_gamebackend_servermanager_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Maps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Maps) ProtoMessage() {}

func (x *Maps) ProtoReflect() protoreflect.Message {
	mi := &file_sro_gamebackend_servermanager_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Maps.ProtoReflect.Descriptor instead.
func (*Maps) Descriptor() ([]byte, []int) {
	return file_sro_gamebackend_servermanager_proto_rawDescGZIP(), []int{10}
}

func (x *Maps) GetMaps() []*Map {
	if x != nil {
		return x.Maps
	}
	return nil
}

var File_sro_gamebackend_servermanager_proto protoreflect.FileDescriptor

var file_sro_gamebackend_servermanager_proto_rawDesc = []byte{
	0x0a, 0x23, 0x73, 0x72, 0x6f, 0x2f, 0x67, 0x61, 0x6d, 0x65, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x73, 0x72, 0x6f, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x62,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x43, 0x0a, 0x0f, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x08, 0x0a, 0x06,
	0x46, 0x69, 0x6e, 0x64, 0x42, 0x79, 0x22, 0x3d, 0x0a, 0x09, 0x4d, 0x61, 0x70, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x46,
	0x69, 0x6e, 0x64, 0x42, 0x79, 0x22, 0x7b, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44,
	0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a,
	0x07, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06,
	0x6d, 0x61, 0x70, 0x49, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x69, 0x0a, 0x19, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x44,
	0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x38, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x73, 0x72, 0x6f, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x2e, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x90, 0x02,
	0x0a, 0x14, 0x45, 0x64, 0x69, 0x74, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x72, 0x6f, 0x2e, 0x67, 0x61, 0x6d,
	0x65, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x12, 0x14, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x65, 0x64, 0x69, 0x74, 0x4d, 0x61, 0x70, 0x73, 0x12,
	0x17, 0x0a, 0x07, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0f, 0x0a, 0x0d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x13, 0x0a, 0x11, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x8f, 0x01, 0x0a, 0x09, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x04,
	0x6d, 0x61, 0x70, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x72, 0x6f,
	0x2e, 0x67, 0x61, 0x6d, 0x65, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x4d, 0x61, 0x70,
	0x52, 0x04, 0x6d, 0x61, 0x70, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x48, 0x0a, 0x0a, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x3a, 0x0a, 0x0a, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x72, 0x6f, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x62,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x0a, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x79, 0x0a, 0x10,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6d,
	0x61, 0x78, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x22, 0x7c, 0x0a, 0x03, 0x4d, 0x61, 0x70, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6d, 0x61, 0x78,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x64, 0x22, 0x83, 0x02, 0x0a, 0x0e, 0x45, 0x64, 0x69, 0x74, 0x4d, 0x61,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x72, 0x6f, 0x2e, 0x67,
	0x61, 0x6d, 0x65, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x4d, 0x61, 0x70, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x21, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x48, 0x02, 0x52,
	0x0a, 0x6d, 0x61, 0x78, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x0a, 0x09, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03,
	0x52, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x42, 0x16, 0x0a,
	0x14, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x73, 0x42, 0x14, 0x0a, 0x12, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x22, 0x30, 0x0a, 0x04, 0x4d,
	0x61, 0x70, 0x73, 0x12, 0x28, 0x0a, 0x04, 0x6d, 0x61, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x73, 0x72, 0x6f, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x2e, 0x4d, 0x61, 0x70, 0x52, 0x04, 0x6d, 0x61, 0x70, 0x73, 0x32, 0xf9, 0x0a,
	0x0a, 0x14, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x71, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x2e, 0x73, 0x72, 0x6f, 0x2e,
	0x67, 0x61, 0x6d, 0x65, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x73, 0x72, 0x6f, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x19,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x3a, 0x01, 0x2a, 0x22, 0x0e, 0x2f, 0x76, 0x31, 0x2f, 0x64,
	0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xbf, 0x01, 0x0a, 0x12, 0x44, 0x75,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x2a, 0x2e, 0x73, 0x72, 0x6f, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x2e, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x44, 0x69, 0x6d, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x73,
	0x72, 0x6f, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x44,
	0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x61, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5b,
	0x3a, 0x01, 0x2a, 0x5a, 0x29, 0x22, 0x27, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x69, 0x6d, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x2f,
	0x69, 0x64, 0x2f, 0x7b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2e, 0x69, 0x64, 0x7d, 0x22, 0x2b,
	0x2f, 0x76, 0x31, 0x2f, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x64,
	0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x2f, 0x7b, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0x8a, 0x01, 0x0a, 0x0c,
	0x47, 0x65, 0x74, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x2e, 0x73,
	0x72, 0x6f, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x44,
	0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x1a, 0x1a,
	0x2e, 0x73, 0x72, 0x6f, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x2e, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x3c, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x36, 0x5a, 0x18, 0x12, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x69, 0x64, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x1a, 0x2f, 0x76,
	0x31, 0x2f, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6e, 0x61, 0x6d,
	0x65, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0x5e, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x6c, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x1b, 0x2e, 0x73, 0x72, 0x6f, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x12, 0x0e, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x69,
	0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xa1, 0x01, 0x0a, 0x0d, 0x45, 0x64, 0x69,
	0x74, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x2e, 0x73, 0x72, 0x6f,
	0x2e, 0x67, 0x61, 0x6d, 0x65, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x45, 0x64, 0x69,
	0x74, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1a, 0x2e, 0x73, 0x72, 0x6f, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x2e, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x4d, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x47, 0x3a, 0x01, 0x2a, 0x5a, 0x1f, 0x1a, 0x1d, 0x2f, 0x76, 0x31, 0x2f,
	0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x69, 0x64, 0x2f, 0x7b, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x2e, 0x69, 0x64, 0x7d, 0x1a, 0x21, 0x2f, 0x76, 0x31, 0x2f, 0x64,
	0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x2f, 0x7b,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0x89, 0x01, 0x0a,
	0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x20, 0x2e, 0x73, 0x72, 0x6f, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x2e, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x3c, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x36, 0x5a, 0x18, 0x2a, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x69, 0x64, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2a, 0x1a, 0x2f, 0x76,
	0x31, 0x2f, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6e, 0x61, 0x6d,
	0x65, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0x59, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x21, 0x2e, 0x73, 0x72, 0x6f, 0x2e, 0x67, 0x61, 0x6d, 0x65,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x73, 0x72, 0x6f, 0x2e, 0x67,
	0x61, 0x6d, 0x65, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x4d, 0x61, 0x70, 0x22, 0x13,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x3a, 0x01, 0x2a, 0x22, 0x08, 0x2f, 0x76, 0x31, 0x2f, 0x6d,
	0x61, 0x70, 0x73, 0x12, 0x6c, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x70, 0x12, 0x1a, 0x2e,
	0x73, 0x72, 0x6f, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e,
	0x4d, 0x61, 0x70, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x1a, 0x14, 0x2e, 0x73, 0x72, 0x6f, 0x2e,
	0x67, 0x61, 0x6d, 0x65, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x4d, 0x61, 0x70, 0x22,
	0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x5a, 0x12, 0x12, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x6d,
	0x61, 0x70, 0x73, 0x2f, 0x69, 0x64, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x14, 0x2f, 0x76, 0x31,
	0x2f, 0x6d, 0x61, 0x70, 0x73, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65,
	0x7d, 0x12, 0x4d, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4d, 0x61, 0x70, 0x73, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x15, 0x2e, 0x73, 0x72, 0x6f, 0x2e, 0x67, 0x61,
	0x6d, 0x65, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x4d, 0x61, 0x70, 0x73, 0x22, 0x10,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0a, 0x12, 0x08, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x61, 0x70, 0x73,
	0x12, 0x83, 0x01, 0x0a, 0x07, 0x45, 0x64, 0x69, 0x74, 0x4d, 0x61, 0x70, 0x12, 0x1f, 0x2e, 0x73,
	0x72, 0x6f, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x45,
	0x64, 0x69, 0x74, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e,
	0x73, 0x72, 0x6f, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e,
	0x4d, 0x61, 0x70, 0x22, 0x41, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3b, 0x3a, 0x01, 0x2a, 0x5a, 0x19,
	0x1a, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x61, 0x70, 0x73, 0x2f, 0x69, 0x64, 0x2f, 0x7b, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x2e, 0x69, 0x64, 0x7d, 0x1a, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x6d,
	0x61, 0x70, 0x73, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x2f, 0x7b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0x71, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4d, 0x61, 0x70, 0x12, 0x1a, 0x2e, 0x73, 0x72, 0x6f, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x4d, 0x61, 0x70, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x5a,
	0x12, 0x2a, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x61, 0x70, 0x73, 0x2f, 0x69, 0x64, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x2a, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x61, 0x70, 0x73, 0x2f, 0x6e, 0x61,
	0x6d, 0x65, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x42, 0x08, 0x5a, 0x06, 0x70, 0x6b, 0x67,
	0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sro_gamebackend_servermanager_proto_rawDescOnce sync.Once
	file_sro_gamebackend_servermanager_proto_rawDescData = file_sro_gamebackend_servermanager_proto_rawDesc
)

func file_sro_gamebackend_servermanager_proto_rawDescGZIP() []byte {
	file_sro_gamebackend_servermanager_proto_rawDescOnce.Do(func() {
		file_sro_gamebackend_servermanager_proto_rawDescData = protoimpl.X.CompressGZIP(file_sro_gamebackend_servermanager_proto_rawDescData)
	})
	return file_sro_gamebackend_servermanager_proto_rawDescData
}

var file_sro_gamebackend_servermanager_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_sro_gamebackend_servermanager_proto_goTypes = []interface{}{
	(*DimensionTarget)(nil),           // 0: sro.gamebackend.DimensionTarget
	(*MapTarget)(nil),                 // 1: sro.gamebackend.MapTarget
	(*CreateDimensionRequest)(nil),    // 2: sro.gamebackend.CreateDimensionRequest
	(*DuplicateDimensionRequest)(nil), // 3: sro.gamebackend.DuplicateDimensionRequest
	(*EditDimensionRequest)(nil),      // 4: sro.gamebackend.EditDimensionRequest
	(*Dimension)(nil),                 // 5: sro.gamebackend.Dimension
	(*Dimensions)(nil),                // 6: sro.gamebackend.Dimensions
	(*CreateMapRequest)(nil),          // 7: sro.gamebackend.CreateMapRequest
	(*Map)(nil),                       // 8: sro.gamebackend.Map
	(*EditMapRequest)(nil),            // 9: sro.gamebackend.EditMapRequest
	(*Maps)(nil),                      // 10: sro.gamebackend.Maps
	(*emptypb.Empty)(nil),             // 11: google.protobuf.Empty
}
var file_sro_gamebackend_servermanager_proto_depIdxs = []int32{
	0,  // 0: sro.gamebackend.DuplicateDimensionRequest.target:type_name -> sro.gamebackend.DimensionTarget
	0,  // 1: sro.gamebackend.EditDimensionRequest.target:type_name -> sro.gamebackend.DimensionTarget
	8,  // 2: sro.gamebackend.Dimension.maps:type_name -> sro.gamebackend.Map
	5,  // 3: sro.gamebackend.Dimensions.dimensions:type_name -> sro.gamebackend.Dimension
	1,  // 4: sro.gamebackend.EditMapRequest.target:type_name -> sro.gamebackend.MapTarget
	8,  // 5: sro.gamebackend.Maps.maps:type_name -> sro.gamebackend.Map
	2,  // 6: sro.gamebackend.ServerManagerService.CreateDimension:input_type -> sro.gamebackend.CreateDimensionRequest
	3,  // 7: sro.gamebackend.ServerManagerService.DuplicateDimension:input_type -> sro.gamebackend.DuplicateDimensionRequest
	0,  // 8: sro.gamebackend.ServerManagerService.GetDimension:input_type -> sro.gamebackend.DimensionTarget
	11, // 9: sro.gamebackend.ServerManagerService.GetAllDimension:input_type -> google.protobuf.Empty
	4,  // 10: sro.gamebackend.ServerManagerService.EditDimension:input_type -> sro.gamebackend.EditDimensionRequest
	0,  // 11: sro.gamebackend.ServerManagerService.DeleteDimension:input_type -> sro.gamebackend.DimensionTarget
	7,  // 12: sro.gamebackend.ServerManagerService.CreateMap:input_type -> sro.gamebackend.CreateMapRequest
	1,  // 13: sro.gamebackend.ServerManagerService.GetMap:input_type -> sro.gamebackend.MapTarget
	11, // 14: sro.gamebackend.ServerManagerService.GetAllMaps:input_type -> google.protobuf.Empty
	9,  // 15: sro.gamebackend.ServerManagerService.EditMap:input_type -> sro.gamebackend.EditMapRequest
	1,  // 16: sro.gamebackend.ServerManagerService.DeleteMap:input_type -> sro.gamebackend.MapTarget
	5,  // 17: sro.gamebackend.ServerManagerService.CreateDimension:output_type -> sro.gamebackend.Dimension
	5,  // 18: sro.gamebackend.ServerManagerService.DuplicateDimension:output_type -> sro.gamebackend.Dimension
	5,  // 19: sro.gamebackend.ServerManagerService.GetDimension:output_type -> sro.gamebackend.Dimension
	6,  // 20: sro.gamebackend.ServerManagerService.GetAllDimension:output_type -> sro.gamebackend.Dimensions
	5,  // 21: sro.gamebackend.ServerManagerService.EditDimension:output_type -> sro.gamebackend.Dimension
	11, // 22: sro.gamebackend.ServerManagerService.DeleteDimension:output_type -> google.protobuf.Empty
	8,  // 23: sro.gamebackend.ServerManagerService.CreateMap:output_type -> sro.gamebackend.Map
	8,  // 24: sro.gamebackend.ServerManagerService.GetMap:output_type -> sro.gamebackend.Map
	10, // 25: sro.gamebackend.ServerManagerService.GetAllMaps:output_type -> sro.gamebackend.Maps
	8,  // 26: sro.gamebackend.ServerManagerService.EditMap:output_type -> sro.gamebackend.Map
	11, // 27: sro.gamebackend.ServerManagerService.DeleteMap:output_type -> google.protobuf.Empty
	17, // [17:28] is the sub-list for method output_type
	6,  // [6:17] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_sro_gamebackend_servermanager_proto_init() }
func file_sro_gamebackend_servermanager_proto_init() {
	if File_sro_gamebackend_servermanager_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sro_gamebackend_servermanager_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DimensionTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sro_gamebackend_servermanager_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sro_gamebackend_servermanager_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDimensionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sro_gamebackend_servermanager_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DuplicateDimensionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sro_gamebackend_servermanager_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditDimensionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sro_gamebackend_servermanager_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dimension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sro_gamebackend_servermanager_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dimensions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sro_gamebackend_servermanager_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMapRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sro_gamebackend_servermanager_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Map); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sro_gamebackend_servermanager_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditMapRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sro_gamebackend_servermanager_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Maps); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_sro_gamebackend_servermanager_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*DimensionTarget_Id)(nil),
		(*DimensionTarget_Name)(nil),
	}
	file_sro_gamebackend_servermanager_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*MapTarget_Id)(nil),
		(*MapTarget_Name)(nil),
	}
	file_sro_gamebackend_servermanager_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*EditDimensionRequest_Name)(nil),
		(*EditDimensionRequest_Version)(nil),
		(*EditDimensionRequest_Location)(nil),
	}
	file_sro_gamebackend_servermanager_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*EditMapRequest_Name)(nil),
		(*EditMapRequest_Path)(nil),
		(*EditMapRequest_MaxPlayers)(nil),
		(*EditMapRequest_Instanced)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sro_gamebackend_servermanager_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_sro_gamebackend_servermanager_proto_goTypes,
		DependencyIndexes: file_sro_gamebackend_servermanager_proto_depIdxs,
		MessageInfos:      file_sro_gamebackend_servermanager_proto_msgTypes,
	}.Build()
	File_sro_gamebackend_servermanager_proto = out.File
	file_sro_gamebackend_servermanager_proto_rawDesc = nil
	file_sro_gamebackend_servermanager_proto_goTypes = nil
	file_sro_gamebackend_servermanager_proto_depIdxs = nil
}
