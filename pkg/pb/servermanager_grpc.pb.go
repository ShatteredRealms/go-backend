// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.15.8
// source: sro/gamebackend/servermanager.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ServerManagerService_CreateDimension_FullMethodName    = "/sro.gamebackend.ServerManagerService/CreateDimension"
	ServerManagerService_DuplicateDimension_FullMethodName = "/sro.gamebackend.ServerManagerService/DuplicateDimension"
	ServerManagerService_GetDimension_FullMethodName       = "/sro.gamebackend.ServerManagerService/GetDimension"
	ServerManagerService_GetAllDimension_FullMethodName    = "/sro.gamebackend.ServerManagerService/GetAllDimension"
	ServerManagerService_EditDimension_FullMethodName      = "/sro.gamebackend.ServerManagerService/EditDimension"
	ServerManagerService_DeleteDimension_FullMethodName    = "/sro.gamebackend.ServerManagerService/DeleteDimension"
	ServerManagerService_CreateMap_FullMethodName          = "/sro.gamebackend.ServerManagerService/CreateMap"
	ServerManagerService_GetMap_FullMethodName             = "/sro.gamebackend.ServerManagerService/GetMap"
	ServerManagerService_GetAllMaps_FullMethodName         = "/sro.gamebackend.ServerManagerService/GetAllMaps"
	ServerManagerService_EditMap_FullMethodName            = "/sro.gamebackend.ServerManagerService/EditMap"
	ServerManagerService_DeleteMap_FullMethodName          = "/sro.gamebackend.ServerManagerService/DeleteMap"
)

// ServerManagerServiceClient is the client API for ServerManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServerManagerServiceClient interface {
	CreateDimension(ctx context.Context, in *CreateDimensionRequest, opts ...grpc.CallOption) (*Dimension, error)
	DuplicateDimension(ctx context.Context, in *DuplicateDimensionRequest, opts ...grpc.CallOption) (*Dimension, error)
	GetDimension(ctx context.Context, in *DimensionTarget, opts ...grpc.CallOption) (*Dimension, error)
	GetAllDimension(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Dimensions, error)
	EditDimension(ctx context.Context, in *EditDimensionRequest, opts ...grpc.CallOption) (*Dimension, error)
	DeleteDimension(ctx context.Context, in *DimensionTarget, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateMap(ctx context.Context, in *CreateMapRequest, opts ...grpc.CallOption) (*Map, error)
	GetMap(ctx context.Context, in *MapTarget, opts ...grpc.CallOption) (*Map, error)
	GetAllMaps(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Maps, error)
	EditMap(ctx context.Context, in *EditMapRequest, opts ...grpc.CallOption) (*Map, error)
	DeleteMap(ctx context.Context, in *MapTarget, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type serverManagerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewServerManagerServiceClient(cc grpc.ClientConnInterface) ServerManagerServiceClient {
	return &serverManagerServiceClient{cc}
}

func (c *serverManagerServiceClient) CreateDimension(ctx context.Context, in *CreateDimensionRequest, opts ...grpc.CallOption) (*Dimension, error) {
	out := new(Dimension)
	err := c.cc.Invoke(ctx, ServerManagerService_CreateDimension_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverManagerServiceClient) DuplicateDimension(ctx context.Context, in *DuplicateDimensionRequest, opts ...grpc.CallOption) (*Dimension, error) {
	out := new(Dimension)
	err := c.cc.Invoke(ctx, ServerManagerService_DuplicateDimension_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverManagerServiceClient) GetDimension(ctx context.Context, in *DimensionTarget, opts ...grpc.CallOption) (*Dimension, error) {
	out := new(Dimension)
	err := c.cc.Invoke(ctx, ServerManagerService_GetDimension_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverManagerServiceClient) GetAllDimension(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Dimensions, error) {
	out := new(Dimensions)
	err := c.cc.Invoke(ctx, ServerManagerService_GetAllDimension_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverManagerServiceClient) EditDimension(ctx context.Context, in *EditDimensionRequest, opts ...grpc.CallOption) (*Dimension, error) {
	out := new(Dimension)
	err := c.cc.Invoke(ctx, ServerManagerService_EditDimension_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverManagerServiceClient) DeleteDimension(ctx context.Context, in *DimensionTarget, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ServerManagerService_DeleteDimension_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverManagerServiceClient) CreateMap(ctx context.Context, in *CreateMapRequest, opts ...grpc.CallOption) (*Map, error) {
	out := new(Map)
	err := c.cc.Invoke(ctx, ServerManagerService_CreateMap_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverManagerServiceClient) GetMap(ctx context.Context, in *MapTarget, opts ...grpc.CallOption) (*Map, error) {
	out := new(Map)
	err := c.cc.Invoke(ctx, ServerManagerService_GetMap_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverManagerServiceClient) GetAllMaps(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Maps, error) {
	out := new(Maps)
	err := c.cc.Invoke(ctx, ServerManagerService_GetAllMaps_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverManagerServiceClient) EditMap(ctx context.Context, in *EditMapRequest, opts ...grpc.CallOption) (*Map, error) {
	out := new(Map)
	err := c.cc.Invoke(ctx, ServerManagerService_EditMap_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverManagerServiceClient) DeleteMap(ctx context.Context, in *MapTarget, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ServerManagerService_DeleteMap_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServerManagerServiceServer is the server API for ServerManagerService service.
// All implementations must embed UnimplementedServerManagerServiceServer
// for forward compatibility
type ServerManagerServiceServer interface {
	CreateDimension(context.Context, *CreateDimensionRequest) (*Dimension, error)
	DuplicateDimension(context.Context, *DuplicateDimensionRequest) (*Dimension, error)
	GetDimension(context.Context, *DimensionTarget) (*Dimension, error)
	GetAllDimension(context.Context, *emptypb.Empty) (*Dimensions, error)
	EditDimension(context.Context, *EditDimensionRequest) (*Dimension, error)
	DeleteDimension(context.Context, *DimensionTarget) (*emptypb.Empty, error)
	CreateMap(context.Context, *CreateMapRequest) (*Map, error)
	GetMap(context.Context, *MapTarget) (*Map, error)
	GetAllMaps(context.Context, *emptypb.Empty) (*Maps, error)
	EditMap(context.Context, *EditMapRequest) (*Map, error)
	DeleteMap(context.Context, *MapTarget) (*emptypb.Empty, error)
	mustEmbedUnimplementedServerManagerServiceServer()
}

// UnimplementedServerManagerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServerManagerServiceServer struct {
}

func (UnimplementedServerManagerServiceServer) CreateDimension(context.Context, *CreateDimensionRequest) (*Dimension, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDimension not implemented")
}
func (UnimplementedServerManagerServiceServer) DuplicateDimension(context.Context, *DuplicateDimensionRequest) (*Dimension, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DuplicateDimension not implemented")
}
func (UnimplementedServerManagerServiceServer) GetDimension(context.Context, *DimensionTarget) (*Dimension, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDimension not implemented")
}
func (UnimplementedServerManagerServiceServer) GetAllDimension(context.Context, *emptypb.Empty) (*Dimensions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllDimension not implemented")
}
func (UnimplementedServerManagerServiceServer) EditDimension(context.Context, *EditDimensionRequest) (*Dimension, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditDimension not implemented")
}
func (UnimplementedServerManagerServiceServer) DeleteDimension(context.Context, *DimensionTarget) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDimension not implemented")
}
func (UnimplementedServerManagerServiceServer) CreateMap(context.Context, *CreateMapRequest) (*Map, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMap not implemented")
}
func (UnimplementedServerManagerServiceServer) GetMap(context.Context, *MapTarget) (*Map, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMap not implemented")
}
func (UnimplementedServerManagerServiceServer) GetAllMaps(context.Context, *emptypb.Empty) (*Maps, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllMaps not implemented")
}
func (UnimplementedServerManagerServiceServer) EditMap(context.Context, *EditMapRequest) (*Map, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditMap not implemented")
}
func (UnimplementedServerManagerServiceServer) DeleteMap(context.Context, *MapTarget) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMap not implemented")
}
func (UnimplementedServerManagerServiceServer) mustEmbedUnimplementedServerManagerServiceServer() {}

// UnsafeServerManagerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServerManagerServiceServer will
// result in compilation errors.
type UnsafeServerManagerServiceServer interface {
	mustEmbedUnimplementedServerManagerServiceServer()
}

func RegisterServerManagerServiceServer(s grpc.ServiceRegistrar, srv ServerManagerServiceServer) {
	s.RegisterService(&ServerManagerService_ServiceDesc, srv)
}

func _ServerManagerService_CreateDimension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDimensionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerManagerServiceServer).CreateDimension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerManagerService_CreateDimension_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerManagerServiceServer).CreateDimension(ctx, req.(*CreateDimensionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerManagerService_DuplicateDimension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DuplicateDimensionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerManagerServiceServer).DuplicateDimension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerManagerService_DuplicateDimension_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerManagerServiceServer).DuplicateDimension(ctx, req.(*DuplicateDimensionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerManagerService_GetDimension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DimensionTarget)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerManagerServiceServer).GetDimension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerManagerService_GetDimension_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerManagerServiceServer).GetDimension(ctx, req.(*DimensionTarget))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerManagerService_GetAllDimension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerManagerServiceServer).GetAllDimension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerManagerService_GetAllDimension_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerManagerServiceServer).GetAllDimension(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerManagerService_EditDimension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditDimensionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerManagerServiceServer).EditDimension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerManagerService_EditDimension_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerManagerServiceServer).EditDimension(ctx, req.(*EditDimensionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerManagerService_DeleteDimension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DimensionTarget)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerManagerServiceServer).DeleteDimension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerManagerService_DeleteDimension_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerManagerServiceServer).DeleteDimension(ctx, req.(*DimensionTarget))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerManagerService_CreateMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerManagerServiceServer).CreateMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerManagerService_CreateMap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerManagerServiceServer).CreateMap(ctx, req.(*CreateMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerManagerService_GetMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MapTarget)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerManagerServiceServer).GetMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerManagerService_GetMap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerManagerServiceServer).GetMap(ctx, req.(*MapTarget))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerManagerService_GetAllMaps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerManagerServiceServer).GetAllMaps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerManagerService_GetAllMaps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerManagerServiceServer).GetAllMaps(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerManagerService_EditMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerManagerServiceServer).EditMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerManagerService_EditMap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerManagerServiceServer).EditMap(ctx, req.(*EditMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerManagerService_DeleteMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MapTarget)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerManagerServiceServer).DeleteMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerManagerService_DeleteMap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerManagerServiceServer).DeleteMap(ctx, req.(*MapTarget))
	}
	return interceptor(ctx, in, info, handler)
}

// ServerManagerService_ServiceDesc is the grpc.ServiceDesc for ServerManagerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServerManagerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sro.gamebackend.ServerManagerService",
	HandlerType: (*ServerManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDimension",
			Handler:    _ServerManagerService_CreateDimension_Handler,
		},
		{
			MethodName: "DuplicateDimension",
			Handler:    _ServerManagerService_DuplicateDimension_Handler,
		},
		{
			MethodName: "GetDimension",
			Handler:    _ServerManagerService_GetDimension_Handler,
		},
		{
			MethodName: "GetAllDimension",
			Handler:    _ServerManagerService_GetAllDimension_Handler,
		},
		{
			MethodName: "EditDimension",
			Handler:    _ServerManagerService_EditDimension_Handler,
		},
		{
			MethodName: "DeleteDimension",
			Handler:    _ServerManagerService_DeleteDimension_Handler,
		},
		{
			MethodName: "CreateMap",
			Handler:    _ServerManagerService_CreateMap_Handler,
		},
		{
			MethodName: "GetMap",
			Handler:    _ServerManagerService_GetMap_Handler,
		},
		{
			MethodName: "GetAllMaps",
			Handler:    _ServerManagerService_GetAllMaps_Handler,
		},
		{
			MethodName: "EditMap",
			Handler:    _ServerManagerService_EditMap_Handler,
		},
		{
			MethodName: "DeleteMap",
			Handler:    _ServerManagerService_DeleteMap_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sro/gamebackend/servermanager.proto",
}
